{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p> Mongorunway </p> <p> Centered Shield.io Icons <p></p> MongorunwayMigration can be easy Mongorunway is a tool for MongoDB migrations that allows you to version the states of your      databases. By default, Mongorunway uses <code>builtins.None</code> as the initial state indicator that      has no migrations applied. The versioning starts from one onwards."},{"location":"docs/application/applications/","title":"Applications","text":""},{"location":"docs/application/applications/#mongorunway.application.applications","title":"<code>mongorunway.application.applications</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationApp', 'MigrationAppImpl')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp","title":"<code>MigrationApp</code>","text":"<p>         Bases: <code>traits.MigrationRunner</code>, <code>traits.MigrationSessionAware</code>, <code>traits.MigrationEventManagerAware</code>, <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>class MigrationApp(\ntraits.MigrationRunner,\ntraits.MigrationSessionAware,\ntraits.MigrationEventManagerAware,\nabc.ABC,\n):\n__slots__: typing.Sequence[str] = ()\n@property\n@abc.abstractmethod\ndef name(self) -&gt; str:\n...\n@abc.abstractmethod\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\n...\n@abc.abstractmethod\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\n...\n@abc.abstractmethod\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\n...\n@abc.abstractmethod\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.name","title":"<code>name: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.dispatch","title":"<code>dispatch(event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.get_event_handlers_for","title":"<code>get_event_handlers_for(event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.listen","title":"<code>listen(*events)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.prioritize_handler","title":"<code>prioritize_handler(handler, event, priority)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.subscribe_event_handler","title":"<code>subscribe_event_handler(handler, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.subscribe_events","title":"<code>subscribe_events(handler, *events)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.unprioritize_handler_proxy","title":"<code>unprioritize_handler_proxy(handler_proxy, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.unsubscribe_event_handler","title":"<code>unsubscribe_event_handler(handler, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationApp.unsubscribe_events","title":"<code>unsubscribe_events(*events)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@abc.abstractmethod\ndef unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl","title":"<code>MigrationAppImpl</code>","text":"<p>         Bases: <code>MigrationApp</code></p> Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>class MigrationAppImpl(MigrationApp):\n__slots__: typing.Sequence[str] = (\n\"_config\",\n\"_session\",\n\"_event_manager\",\n\"_migration_service\",\n)\ndef __init__(\nself,\nconfiguration: config.Config,\n) -&gt; None:\nux.init_logging(configuration)\nux.init_components(configuration)\nself._session = app_session = session.MigrationSessionImpl(self, configuration)\nself._migration_service = migration_service.MigrationService(app_session)\nself._event_manager = event_manager.MigrationEventManagerImpl()\nfor event_type, event_handlers in configuration.application.app_events.items():\nfor handler in event_handlers:\nself._event_manager.subscribe_event_handler(handler, event_type)\nself._event_manager.dispatch(domain_event.StartingEvent(self))\ndef __del__(self) -&gt; None:\nself._event_manager.dispatch(domain_event.ClosingEvent(self))\n@property\ndef name(self) -&gt; str:\nreturn self._session.session_name\n@property\ndef session(self) -&gt; session.MigrationSession:\nreturn self._session\n@property\ndef event_manager(self) -&gt; domain_event_manager.MigrationEventManager:\nreturn self._event_manager\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.subscribe_events(handler, *events)\ndef unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\nreturn self._event_manager.unsubscribe_events(*events)\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.subscribe_event_handler(handler, event)\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.unsubscribe_event_handler(handler, event)\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\nreturn self._event_manager.get_event_handlers_for(event)\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\nreturn self._event_manager.prioritize_handler(handler, event, priority)\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.unprioritize_handler_proxy(handler_proxy, event)\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\nreturn self._event_manager.listen(*events)\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\nreturn self._event_manager.dispatch(event)\n@requires_migrations(is_applied=False)\ndef upgrade_once(self) -&gt; int:\npending_migration_model = self._session.get_migration_model_by_flag(is_applied=False)\nassert pending_migration_model is not None  # Only for type checkers\npending_migration = self._migration_service.get_migration(\npending_migration_model.name,\npending_migration_model.version,\n)\nwith self._session.begin_mongo_session() as session_context:\n_LOGGER.info(\n\"%s: upgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nversioning_service.get_previous_migration_version(pending_migration),\npending_migration.version,\n)\nwith self._session.begin_transaction(\ntransactions.UpgradeTransaction,\nmigration=pending_migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: Successfully upgraded to (#%s).\",\nself.name,\npending_migration.version,\n)\nreturn transactions.TRANSACTION_SUCCESS\n@requires_migrations(is_applied=True)\ndef downgrade_once(self) -&gt; int:\napplied_migration_model = self._session.get_migration_model_by_flag(is_applied=True)\nassert applied_migration_model is not None  # Only for type checkers\napplied_migration = self._migration_service.get_migration(\napplied_migration_model.name,\napplied_migration_model.version,\n)\nwith self._session.begin_mongo_session() as session_context:\n_LOGGER.info(\n\"%s: downgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\napplied_migration.version,\nversioning_service.get_previous_migration_version(applied_migration),\n)\nwith self._session.begin_transaction(\ntransactions.DowngradeTransaction,\nmigration=applied_migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: successfully downgraded to (#%s).\",\nself.name,\nversioning_service.get_previous_migration_version(applied_migration),\n)\nreturn transactions.TRANSACTION_SUCCESS\n@requires_migrations(is_applied=False)\ndef upgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\nupgraded = 0\npending_migration_models = self._session.get_migration_models_by_flag(is_applied=False)\nwith self._session.begin_mongo_session() as session_context:\nwhile pending_migration_models:\nmigration = self._migration_service.get_migration(\n(model := pending_migration_models.pop(0)).name,\nmodel.version,\n)\nif not predicate(migration):\nbreak\n_LOGGER.info(\n\"%s: upgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nversioning_service.get_previous_migration_version(migration),\nmigration.version,\n)\nwith self._session.begin_transaction(\ntransactions.UpgradeTransaction,\nmigration=migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: Successfully upgraded to (#%s).\",\nself.name,\nmigration.version,\n)\nupgraded += 1\nreturn upgraded\n@requires_migrations(is_applied=True)\ndef downgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\ndowngraded = 0\napplied_migration_models = self._session.get_migration_models_by_flag(is_applied=True)\nwith self._session.begin_mongo_session() as session_context:\nwhile applied_migration_models:\nmigration = self._migration_service.get_migration(\n(model := applied_migration_models.pop(0)).name,\nmodel.version,\n)\nif not predicate(migration):\nbreak\n_LOGGER.info(\n\"%s: downgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nmigration.version,\nversioning_service.get_previous_migration_version(migration),\n)\nwith self._session.begin_transaction(\ntransactions.DowngradeTransaction,\nmigration=migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: successfully downgraded to (#%s).\",\nself.name,\nversioning_service.get_previous_migration_version(migration),\n)\ndowngraded += 1\nreturn downgraded\ndef downgrade_to(self, migration_version: int, /) -&gt; int:\nif not migration_version:\nreturn self.downgrade_all()\nmodel = self.session.get_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version!r} is not found.\")\nif not model.is_applied:\nraise ValueError(f\"Migration with version {migration_version} is already pending.\")\nreturn self.downgrade_while(lambda m: m.version &gt; migration_version)\ndef upgrade_to(self, migration_version: int, /) -&gt; int:\nmodel = self.session.get_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version!r} is not found.\")\nif model.is_applied:\nraise ValueError(f\"Migration with version {migration_version} is already applied.\")\nreturn self.upgrade_while(lambda m: m.version &lt;= migration_version)\ndef downgrade_all(self) -&gt; int:\nreturn self.downgrade_while(lambda _: True)\ndef upgrade_all(self) -&gt; int:\nreturn self.upgrade_while(lambda _: True)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_config', '_session', '_event_manager', '_migration_service')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.event_manager","title":"<code>event_manager: domain_event_manager.MigrationEventManager</code>  <code>property</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.session","title":"<code>session: session.MigrationSession</code>  <code>property</code>","text":""},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.__del__","title":"<code>__del__()</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def __del__(self) -&gt; None:\nself._event_manager.dispatch(domain_event.ClosingEvent(self))\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.__init__","title":"<code>__init__(configuration)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def __init__(\nself,\nconfiguration: config.Config,\n) -&gt; None:\nux.init_logging(configuration)\nux.init_components(configuration)\nself._session = app_session = session.MigrationSessionImpl(self, configuration)\nself._migration_service = migration_service.MigrationService(app_session)\nself._event_manager = event_manager.MigrationEventManagerImpl()\nfor event_type, event_handlers in configuration.application.app_events.items():\nfor handler in event_handlers:\nself._event_manager.subscribe_event_handler(handler, event_type)\nself._event_manager.dispatch(domain_event.StartingEvent(self))\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.dispatch","title":"<code>dispatch(event)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\nreturn self._event_manager.dispatch(event)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.downgrade_all","title":"<code>downgrade_all()</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def downgrade_all(self) -&gt; int:\nreturn self.downgrade_while(lambda _: True)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.downgrade_once","title":"<code>downgrade_once()</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@requires_migrations(is_applied=True)\ndef downgrade_once(self) -&gt; int:\napplied_migration_model = self._session.get_migration_model_by_flag(is_applied=True)\nassert applied_migration_model is not None  # Only for type checkers\napplied_migration = self._migration_service.get_migration(\napplied_migration_model.name,\napplied_migration_model.version,\n)\nwith self._session.begin_mongo_session() as session_context:\n_LOGGER.info(\n\"%s: downgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\napplied_migration.version,\nversioning_service.get_previous_migration_version(applied_migration),\n)\nwith self._session.begin_transaction(\ntransactions.DowngradeTransaction,\nmigration=applied_migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: successfully downgraded to (#%s).\",\nself.name,\nversioning_service.get_previous_migration_version(applied_migration),\n)\nreturn transactions.TRANSACTION_SUCCESS\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.downgrade_to","title":"<code>downgrade_to(migration_version)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def downgrade_to(self, migration_version: int, /) -&gt; int:\nif not migration_version:\nreturn self.downgrade_all()\nmodel = self.session.get_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version!r} is not found.\")\nif not model.is_applied:\nraise ValueError(f\"Migration with version {migration_version} is already pending.\")\nreturn self.downgrade_while(lambda m: m.version &gt; migration_version)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.downgrade_while","title":"<code>downgrade_while(predicate)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@requires_migrations(is_applied=True)\ndef downgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\ndowngraded = 0\napplied_migration_models = self._session.get_migration_models_by_flag(is_applied=True)\nwith self._session.begin_mongo_session() as session_context:\nwhile applied_migration_models:\nmigration = self._migration_service.get_migration(\n(model := applied_migration_models.pop(0)).name,\nmodel.version,\n)\nif not predicate(migration):\nbreak\n_LOGGER.info(\n\"%s: downgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nmigration.version,\nversioning_service.get_previous_migration_version(migration),\n)\nwith self._session.begin_transaction(\ntransactions.DowngradeTransaction,\nmigration=migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: successfully downgraded to (#%s).\",\nself.name,\nversioning_service.get_previous_migration_version(migration),\n)\ndowngraded += 1\nreturn downgraded\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.get_event_handlers_for","title":"<code>get_event_handlers_for(event)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\nreturn self._event_manager.get_event_handlers_for(event)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.listen","title":"<code>listen(*events)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\nreturn self._event_manager.listen(*events)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.prioritize_handler","title":"<code>prioritize_handler(handler, event, priority)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\nreturn self._event_manager.prioritize_handler(handler, event, priority)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.subscribe_event_handler","title":"<code>subscribe_event_handler(handler, event)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.subscribe_event_handler(handler, event)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.subscribe_events","title":"<code>subscribe_events(handler, *events)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.subscribe_events(handler, *events)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.unprioritize_handler_proxy","title":"<code>unprioritize_handler_proxy(handler_proxy, event)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.unprioritize_handler_proxy(handler_proxy, event)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.unsubscribe_event_handler","title":"<code>unsubscribe_event_handler(handler, event)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nreturn self._event_manager.unsubscribe_event_handler(handler, event)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.unsubscribe_events","title":"<code>unsubscribe_events(*events)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\nreturn self._event_manager.unsubscribe_events(*events)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.upgrade_all","title":"<code>upgrade_all()</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def upgrade_all(self) -&gt; int:\nreturn self.upgrade_while(lambda _: True)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.upgrade_once","title":"<code>upgrade_once()</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@requires_migrations(is_applied=False)\ndef upgrade_once(self) -&gt; int:\npending_migration_model = self._session.get_migration_model_by_flag(is_applied=False)\nassert pending_migration_model is not None  # Only for type checkers\npending_migration = self._migration_service.get_migration(\npending_migration_model.name,\npending_migration_model.version,\n)\nwith self._session.begin_mongo_session() as session_context:\n_LOGGER.info(\n\"%s: upgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nversioning_service.get_previous_migration_version(pending_migration),\npending_migration.version,\n)\nwith self._session.begin_transaction(\ntransactions.UpgradeTransaction,\nmigration=pending_migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: Successfully upgraded to (#%s).\",\nself.name,\npending_migration.version,\n)\nreturn transactions.TRANSACTION_SUCCESS\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.upgrade_to","title":"<code>upgrade_to(migration_version)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def upgrade_to(self, migration_version: int, /) -&gt; int:\nmodel = self.session.get_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version!r} is not found.\")\nif model.is_applied:\nraise ValueError(f\"Migration with version {migration_version} is already applied.\")\nreturn self.upgrade_while(lambda m: m.version &lt;= migration_version)\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.MigrationAppImpl.upgrade_while","title":"<code>upgrade_while(predicate)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>@requires_migrations(is_applied=False)\ndef upgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\nupgraded = 0\npending_migration_models = self._session.get_migration_models_by_flag(is_applied=False)\nwith self._session.begin_mongo_session() as session_context:\nwhile pending_migration_models:\nmigration = self._migration_service.get_migration(\n(model := pending_migration_models.pop(0)).name,\nmodel.version,\n)\nif not predicate(migration):\nbreak\n_LOGGER.info(\n\"%s: upgrading waiting migration (#%s -&gt; #%s)...\",\nself.name,\nversioning_service.get_previous_migration_version(migration),\nmigration.version,\n)\nwith self._session.begin_transaction(\ntransactions.UpgradeTransaction,\nmigration=migration,\n) as transaction:\ntransaction.apply_to(session_context)\n_LOGGER.info(\n\"%s: Successfully upgraded to (#%s).\",\nself.name,\nmigration.version,\n)\nupgraded += 1\nreturn upgraded\n</code></pre>"},{"location":"docs/application/applications/#mongorunway.application.applications.requires_migrations","title":"<code>requires_migrations(*, is_applied)</code>","text":"Source code in <code>mongorunway\\application\\applications.py</code> <pre><code>def requires_migrations(\n*,\nis_applied: bool,\n) -&gt; typing.Callable[\n[typing.Callable[_P, _TransactionCodeT]], typing.Callable[_P, _TransactionCodeT]\n]:\ndef decorator(\nmeth: typing.Callable[_P, _TransactionCodeT],\n) -&gt; typing.Callable[_P, _TransactionCodeT]:\n@functools.wraps(meth)\ndef wrapper(*args: _P.args, **kwargs: _P.kwargs) -&gt; _TransactionCodeT:\nif not isinstance((self := args[0]), traits.MigrationSessionAware):\nraise ValueError(\nf\"'requires_migrations' can be applied only to \"\nf\"{traits.MigrationSessionAware!r} objects.\"\n)\nmodels = self.session.get_migration_models_by_flag(is_applied=is_applied)\nif not models:\nif self.session.raises_on_transaction_failure:\nif is_applied:\nraise domain_exception.NothingToDowngradeError()\nraise domain_exception.NothingToUpgradeError()\nreturn typing.cast(\n_TransactionCodeT,\ntransactions.TRANSACTION_NOT_APPLIED,\n)\nreturn meth(*args, **kwargs)\nreturn wrapper\nreturn decorator\n</code></pre>"},{"location":"docs/application/config/","title":"Config","text":""},{"location":"docs/application/config/#mongorunway.application.config","title":"<code>mongorunway.application.config</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.VERSIONING_STARTS_FROM","title":"<code>VERSIONING_STARTS_FROM: typing.Final[int] = 1</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.__all__","title":"<code>__all__: typing.Sequence[str] = ('FileSystemConfig', 'Config', 'ApplicationConfig', 'VERSIONING_STARTS_FROM')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig","title":"<code>ApplicationConfig</code>","text":"Source code in <code>mongorunway\\application\\config.py</code> <pre><code>@attr.define(frozen=True, kw_only=True, repr=True, eq=True)\nclass ApplicationConfig:\napp_client: mongo.Client = attr.field(repr=False)\napp_database: mongo.Database = attr.field(repr=False)\napp_repository: repository_port.MigrationModelRepository = attr.field(repr=False)\napp_auditlog_journal: typing.Optional[auditlog_journal_port.AuditlogJournal] = attr.field(\nrepr=False,\n)\napp_name: str = attr.field(\nvalidator=[attr.validators.min_len(1), attr.validators.instance_of(str)],  # type: ignore[arg-type]\nrepr=True,\neq=True,\n)\napp_timezone: str = attr.field(\nvalidator=attr.validators.instance_of(str),\ndefault=\"UTC\",\nrepr=True,\n)\napp_date_format: str = attr.field(\ndefault=\"%Y-%m-%d %H:%M:%S\",\nvalidator=attr.validators.instance_of(str),\n)\napp_events: typing.Mapping[\ntyping.Type[domain_event.MigrationEvent],\ntyping.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n] = attr.field(factory=dict, repr=False)\napp_auditlog_limit: typing.Optional[int] = attr.field(\ndefault=None,\nvalidator=attr.validators.optional(attr.validators.instance_of(int)),\nconverter=attr.converters.optional(int),\nrepr=False,\n)\nuse_logging: bool = attr.field(default=True, repr=False, converter=attr.converters.to_bool)\nuse_auditlog: bool = attr.field(default=False, repr=False, converter=attr.converters.to_bool)\nuse_indexing: bool = attr.field(default=False, converter=attr.converters.to_bool, repr=False)\nuse_schema_validation: bool = attr.field(\ndefault=True,\nconverter=attr.converters.to_bool,\nrepr=False,\n)\nraise_on_transaction_failure: bool = attr.field(\ndefault=True, converter=attr.converters.to_bool, repr=False\n)\n@property\ndef is_auditlog_enabled(self) -&gt; bool:\nreturn self.app_auditlog_journal is not None and self.use_auditlog\n@property\ndef is_logged(self) -&gt; bool:\nreturn self.use_logging\n@property\ndef has_unique_timezone(self) -&gt; bool:\nreturn self.app_timezone != \"UTC\"\n</code></pre>"},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_auditlog_journal","title":"<code>app_auditlog_journal: typing.Optional[auditlog_journal_port.AuditlogJournal] = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_auditlog_limit","title":"<code>app_auditlog_limit: typing.Optional[int] = attr.field(default=None, validator=attr.validators.optional(attr.validators.instance_of(int)), converter=attr.converters.optional(int), repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_client","title":"<code>app_client: mongo.Client = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_database","title":"<code>app_database: mongo.Database = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_date_format","title":"<code>app_date_format: str = attr.field(default='%Y-%m-%d %H:%M:%S', validator=attr.validators.instance_of(str))</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_events","title":"<code>app_events: typing.Mapping[typing.Type[domain_event.MigrationEvent], typing.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]] = attr.field(factory=dict, repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_name","title":"<code>app_name: str = attr.field(validator=[attr.validators.min_len(1), attr.validators.instance_of(str)], repr=True, eq=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_repository","title":"<code>app_repository: repository_port.MigrationModelRepository = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.app_timezone","title":"<code>app_timezone: str = attr.field(validator=attr.validators.instance_of(str), default='UTC', repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.has_unique_timezone","title":"<code>has_unique_timezone: bool</code>  <code>property</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.is_auditlog_enabled","title":"<code>is_auditlog_enabled: bool</code>  <code>property</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.is_logged","title":"<code>is_logged: bool</code>  <code>property</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.raise_on_transaction_failure","title":"<code>raise_on_transaction_failure: bool = attr.field(default=True, converter=attr.converters.to_bool, repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.use_auditlog","title":"<code>use_auditlog: bool = attr.field(default=False, repr=False, converter=attr.converters.to_bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.use_indexing","title":"<code>use_indexing: bool = attr.field(default=False, converter=attr.converters.to_bool, repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.use_logging","title":"<code>use_logging: bool = attr.field(default=True, repr=False, converter=attr.converters.to_bool)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.ApplicationConfig.use_schema_validation","title":"<code>use_schema_validation: bool = attr.field(default=True, converter=attr.converters.to_bool, repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.Config","title":"<code>Config</code>","text":"Source code in <code>mongorunway\\application\\config.py</code> <pre><code>@attr.define(frozen=True, kw_only=True, repr=True)\nclass Config:\nfilesystem: FileSystemConfig = attr.field(repr=True)\napplication: ApplicationConfig = attr.field(repr=True)\nlogging_dict: typing.Dict[str, typing.Any]\n</code></pre>"},{"location":"docs/application/config/#mongorunway.application.config.Config.application","title":"<code>application: ApplicationConfig = attr.field(repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.Config.filesystem","title":"<code>filesystem: FileSystemConfig = attr.field(repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.Config.logging_dict","title":"<code>logging_dict: typing.Dict[str, typing.Any]</code>  <code>instance-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.FileSystemConfig","title":"<code>FileSystemConfig</code>","text":"Source code in <code>mongorunway\\application\\config.py</code> <pre><code>@attr.define(frozen=True, kw_only=True, repr=True)\nclass FileSystemConfig:\nscripts_dir: str = attr.field(repr=True, validator=attr.validators.instance_of(str))\nconfig_dir: str = attr.field(repr=False, validator=attr.validators.instance_of(str))\nfilename_strategy: filename_strategy_port.FilenameStrategy = attr.field(repr=True)\nuse_filename_strategy: bool = attr.field(\ndefault=True,\nconverter=attr.converters.to_bool,\nrepr=True,\n)\n</code></pre>"},{"location":"docs/application/config/#mongorunway.application.config.FileSystemConfig.config_dir","title":"<code>config_dir: str = attr.field(repr=False, validator=attr.validators.instance_of(str))</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.FileSystemConfig.filename_strategy","title":"<code>filename_strategy: filename_strategy_port.FilenameStrategy = attr.field(repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.FileSystemConfig.scripts_dir","title":"<code>scripts_dir: str = attr.field(repr=True, validator=attr.validators.instance_of(str))</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/config/#mongorunway.application.config.FileSystemConfig.use_filename_strategy","title":"<code>use_filename_strategy: bool = attr.field(default=True, converter=attr.converters.to_bool, repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/event_manager/","title":"Event manager","text":""},{"location":"docs/application/event_manager/#mongorunway.application.event_manager","title":"<code>mongorunway.application.event_manager</code>","text":""},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationEventManagerImpl')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl","title":"<code>MigrationEventManagerImpl</code>","text":"<p>         Bases: <code>domain_event_manager.MigrationEventManager</code></p> Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>class MigrationEventManagerImpl(domain_event_manager.MigrationEventManager):\n__slots__: typing.Sequence[str] = (\"_event_dict\", \"_event_cond\")\ndef __init__(self) -&gt; None:\nself._event_dict: typing.DefaultDict[\ntyping.Type[domain_event.MigrationEvent],\ntyping.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n] = collections.defaultdict(list)\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nfor event in events:\nself.subscribe_event_handler(handler, event)\ndef unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\nfor event in events:\nself._event_dict.pop(event)\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nself._event_dict[event].append(handler)\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nself._event_dict[event].remove(handler)\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\nreturn self._event_dict[event]\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\nhandlers = self.get_event_handlers_for(event)\ntry:\nindex = handlers.index(handler)\nexcept ValueError:\nraise ValueError(f\"Handler {handler!r} is not subscribed for {event!r}.\")\nhandlers.remove(handler)\nhandlers.insert(\nindex,\ndomain_event.EventHandlerProxy(\nhandler=handler,\npriority=priority,\n),\n)\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nhandlers = self._event_dict[event]\ntry:\nindex = handlers.index(handler_proxy)\nexcept ValueError:\nraise ValueError(f\"Handler {handler_proxy!r} is not subscribed for {event!r}.\")\nhandlers.remove(handler_proxy)\nhandlers.insert(index, handler_proxy.handler)\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\ndef decorator(\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n) -&gt; domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]:\nhandler_func = handler\nif isinstance(handler, domain_event.EventHandlerProxy):\nhandler_func = typing.cast(\ndomain_event.EventHandlerT,\nhandler.handler,\n)\nif not events:\nsignature = inspect.signature(handler_func, eval_str=True)\ntry:\nparameter = signature.parameters[\"event\"]\nif parameter.annotation is inspect.Parameter.empty:\nraise\nexcept KeyError as exc:\nraise ValueError(\nf\"Handler missing 'event' parameter or parameter annotation.\"\n) from exc\nif typing.get_origin(parameter.annotation) is typing.Union:\nself.subscribe_events(handler, *typing.get_args(parameter.annotation))\nreturn handler\nself.subscribe_events(handler, parameter.annotation)\nreturn handler\nself.subscribe_events(handler, *events)\nreturn handler\nreturn decorator\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\nhandlers = self.get_event_handlers_for(type(event))\nprioritized_handlers = []\nunprioritized_handlers = []\nfor handler in handlers:\nif isinstance(handler, domain_event.EventHandlerProxy):\nprioritized_handlers.append(handler)\nelse:\nunprioritized_handlers.append(handler)\nprioritized_handlers.sort(key=operator.attrgetter(\"priority\"))\nheapq.heapify(prioritized_handlers)\nwhile prioritized_handlers:\nproxy = heapq.heappop(prioritized_handlers)\nproxy.handler(event)\nfor handler in unprioritized_handlers:\nhandler(event)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_event_dict', '_event_cond')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.__init__","title":"<code>__init__()</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def __init__(self) -&gt; None:\nself._event_dict: typing.DefaultDict[\ntyping.Type[domain_event.MigrationEvent],\ntyping.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n] = collections.defaultdict(list)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.dispatch","title":"<code>dispatch(event)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\nhandlers = self.get_event_handlers_for(type(event))\nprioritized_handlers = []\nunprioritized_handlers = []\nfor handler in handlers:\nif isinstance(handler, domain_event.EventHandlerProxy):\nprioritized_handlers.append(handler)\nelse:\nunprioritized_handlers.append(handler)\nprioritized_handlers.sort(key=operator.attrgetter(\"priority\"))\nheapq.heapify(prioritized_handlers)\nwhile prioritized_handlers:\nproxy = heapq.heappop(prioritized_handlers)\nproxy.handler(event)\nfor handler in unprioritized_handlers:\nhandler(event)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.get_event_handlers_for","title":"<code>get_event_handlers_for(event)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\nreturn self._event_dict[event]\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.listen","title":"<code>listen(*events)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\ndef decorator(\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n) -&gt; domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]:\nhandler_func = handler\nif isinstance(handler, domain_event.EventHandlerProxy):\nhandler_func = typing.cast(\ndomain_event.EventHandlerT,\nhandler.handler,\n)\nif not events:\nsignature = inspect.signature(handler_func, eval_str=True)\ntry:\nparameter = signature.parameters[\"event\"]\nif parameter.annotation is inspect.Parameter.empty:\nraise\nexcept KeyError as exc:\nraise ValueError(\nf\"Handler missing 'event' parameter or parameter annotation.\"\n) from exc\nif typing.get_origin(parameter.annotation) is typing.Union:\nself.subscribe_events(handler, *typing.get_args(parameter.annotation))\nreturn handler\nself.subscribe_events(handler, parameter.annotation)\nreturn handler\nself.subscribe_events(handler, *events)\nreturn handler\nreturn decorator\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.prioritize_handler","title":"<code>prioritize_handler(handler, event, priority)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\nhandlers = self.get_event_handlers_for(event)\ntry:\nindex = handlers.index(handler)\nexcept ValueError:\nraise ValueError(f\"Handler {handler!r} is not subscribed for {event!r}.\")\nhandlers.remove(handler)\nhandlers.insert(\nindex,\ndomain_event.EventHandlerProxy(\nhandler=handler,\npriority=priority,\n),\n)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.subscribe_event_handler","title":"<code>subscribe_event_handler(handler, event)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nself._event_dict[event].append(handler)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.subscribe_events","title":"<code>subscribe_events(handler, *events)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nfor event in events:\nself.subscribe_event_handler(handler, event)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.unprioritize_handler_proxy","title":"<code>unprioritize_handler_proxy(handler_proxy, event)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nhandlers = self._event_dict[event]\ntry:\nindex = handlers.index(handler_proxy)\nexcept ValueError:\nraise ValueError(f\"Handler {handler_proxy!r} is not subscribed for {event!r}.\")\nhandlers.remove(handler_proxy)\nhandlers.insert(index, handler_proxy.handler)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.unsubscribe_event_handler","title":"<code>unsubscribe_event_handler(handler, event)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\nself._event_dict[event].remove(handler)\n</code></pre>"},{"location":"docs/application/event_manager/#mongorunway.application.event_manager.MigrationEventManagerImpl.unsubscribe_events","title":"<code>unsubscribe_events(*events)</code>","text":"Source code in <code>mongorunway\\application\\event_manager.py</code> <pre><code>def unsubscribe_events(self, *events: typing.Type[domain_event.MigrationEvent]) -&gt; None:\nfor event in events:\nself._event_dict.pop(event)\n</code></pre>"},{"location":"docs/application/filesystem/","title":"Filesystem","text":""},{"location":"docs/application/filesystem/#mongorunway.application.filesystem","title":"<code>mongorunway.application.filesystem</code>","text":""},{"location":"docs/application/filesystem/#mongorunway.application.filesystem.__all__","title":"<code>__all__: typing.Sequence[str] = ('read', 'getcwd', 'join', 'find_any')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/filesystem/#mongorunway.application.filesystem.find_any","title":"<code>find_any(*filenames, base_dir=os.getcwd())</code>","text":"Source code in <code>mongorunway\\application\\filesystem.py</code> <pre><code>def find_any(*filenames: str, base_dir: str = os.getcwd()) -&gt; typing.List[str]:\nfound_files: typing.List[str] = []\nfor dirpath, dirnames, filenames_in_dir in os.walk(base_dir):\nfor filename in filenames:\nif filename in filenames_in_dir:\nfound_files.append(os.path.join(dirpath, filename))\nreturn found_files\n</code></pre>"},{"location":"docs/application/filesystem/#mongorunway.application.filesystem.getcwd","title":"<code>getcwd()</code>","text":"Source code in <code>mongorunway\\application\\filesystem.py</code> <pre><code>def getcwd() -&gt; str:\nreturn os.getcwd()\n</code></pre>"},{"location":"docs/application/filesystem/#mongorunway.application.filesystem.join","title":"<code>join(*components)</code>","text":"Source code in <code>mongorunway\\application\\filesystem.py</code> <pre><code>def join(*components: str) -&gt; str:\nreturn os.path.join(*components)\n</code></pre>"},{"location":"docs/application/filesystem/#mongorunway.application.filesystem.read","title":"<code>read(filename)</code>","text":"Source code in <code>mongorunway\\application\\filesystem.py</code> <pre><code>def read(filename: str) -&gt; str:\nwith open(filename) as file:\nreturn file.read()\n</code></pre>"},{"location":"docs/application/output/","title":"Output","text":""},{"location":"docs/application/output/#mongorunway.application.output","title":"<code>mongorunway.application.output</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.ERROR","title":"<code>ERROR = 'error'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.HEADING_LEVEL_ONE","title":"<code>HEADING_LEVEL_ONE = 1</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.HEADING_LEVEL_THREE","title":"<code>HEADING_LEVEL_THREE = 3</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.HEADING_LEVEL_TWO","title":"<code>HEADING_LEVEL_TWO = 2</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.HEADING_MAP","title":"<code>HEADING_MAP = {HEADING_LEVEL_ONE: ('=', True), HEADING_LEVEL_TWO: ('-', True), HEADING_LEVEL_THREE: ('-', False)}</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.INFO","title":"<code>INFO = 'info'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.SUCCESS","title":"<code>SUCCESS = 'success'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.TOOL_HEADING_NAME","title":"<code>TOOL_HEADING_NAME: typing.Final[str] = 'Mongorunway'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.WARNING","title":"<code>WARNING = 'warning'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.__all__","title":"<code>__all__: typing.Sequence[str] = ('INFO', 'ERROR', 'SUCCESS', 'WARNING', 'HEADING_MAP', 'HEADING_LEVEL_ONE', 'HEADING_LEVEL_TWO', 'HEADING_LEVEL_THREE', 'TOOL_HEADING_NAME', 'AsciiOutput', 'print', 'print_heading', 'print_error', 'print_success', 'print_info', 'print_warning', 'print_new_line', 'verbose_print')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput","title":"<code>AsciiOutput</code>","text":"<p>         Bases: <code>str</code>, <code>enum.Enum</code></p> Source code in <code>mongorunway\\application\\output.py</code> <pre><code>class AsciiOutput(str, enum.Enum):\nINFO = 128712\nDONE = 10003\nWARNING = 9888\nERROR = 33\ndef __str__(self) -&gt; str:\nreturn chr(self.value)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput.DONE","title":"<code>DONE = 10003</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput.ERROR","title":"<code>ERROR = 33</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput.INFO","title":"<code>INFO = 128712</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput.WARNING","title":"<code>WARNING = 9888</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/output/#mongorunway.application.output.AsciiOutput.__str__","title":"<code>__str__()</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def __str__(self) -&gt; str:\nreturn chr(self.value)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print","title":"<code>print(text='', bold=False, newline=True, symbol='')</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print(\ntext: str = \"\",\nbold: bool = False,\nnewline: bool = True,\nsymbol: str = \"\",\n) -&gt; None:\nif symbol:\ntext = symbol + \" \" + text\nclick.secho(text, bold=bold, nl=newline)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_error","title":"<code>print_error(text, bold=False)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_error(text: str, bold: bool = False) -&gt; None:\nprint(text, bold=bold, symbol=AsciiOutput.ERROR)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_heading","title":"<code>print_heading(level, text, indent=True)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_heading(level: int, text: str, indent: bool = True) -&gt; None:\nline_char, show_line_above = HEADING_MAP[level]\nheading_line = line_char * len(text)\nif show_line_above:\nprint(heading_line, bold=True)\nprint(text, bold=True)\nprint(heading_line, bold=True)\nif indent:\nprint_new_line()\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_info","title":"<code>print_info(text, bold=False)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_info(text: str, bold: bool = False) -&gt; None:\nprint(text, bold=bold, symbol=AsciiOutput.INFO)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_new_line","title":"<code>print_new_line(count=1)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_new_line(count: int = 1) -&gt; None:\nfor i in range(count):\nclick.secho()\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_success","title":"<code>print_success(text, bold=False)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_success(text: str, bold: bool = False) -&gt; None:\nprint(text, bold=bold, symbol=AsciiOutput.DONE)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.print_warning","title":"<code>print_warning(text, bold=False)</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def print_warning(text: str, bold: bool = False) -&gt; None:\nprint(text, bold=bold, symbol=AsciiOutput.WARNING)\n</code></pre>"},{"location":"docs/application/output/#mongorunway.application.output.verbose_print","title":"<code>verbose_print(verbose, text='', bold=False, newline=True, symbol='')</code>","text":"Source code in <code>mongorunway\\application\\output.py</code> <pre><code>def verbose_print(\nverbose: bool,\ntext: str = \"\",\nbold: bool = False,\nnewline: bool = True,\nsymbol: str = \"\",\n) -&gt; None:\nif verbose:\nprint(\ntext=text,\nbold=bold,\nsymbol=symbol,\nnewline=newline,\n)\n</code></pre>"},{"location":"docs/application/session/","title":"Session","text":""},{"location":"docs/application/session/#mongorunway.application.session","title":"<code>mongorunway.application.session</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContextT","title":"<code>MongoSessionContextT = typing.TypeVar('MongoSessionContextT', bound='MongoSessionContext')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.TransactionT","title":"<code>TransactionT = typing.TypeVar('TransactionT', bound=transactions.MigrationTransaction)</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationSessionImpl', 'MigrationSession', 'MongoSessionContextT', 'MongoSessionContext', 'TransactionT', 'TransactionContext', 'requires_auditlog')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession","title":"<code>MigrationSession</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\session.py</code> <pre><code>class MigrationSession(abc.ABC):\n__slots__ = ()\n@property\n@abc.abstractmethod\ndef session_id(self) -&gt; bson.binary.Binary:\n...\n@property\n@abc.abstractmethod\ndef session_timezone(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef session_date_format(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef session_client(self) -&gt; mongo.Client:\n...\n@property\n@abc.abstractmethod\ndef session_database(self) -&gt; mongo.Database:\n...\n@property\n@abc.abstractmethod\ndef session_name(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef session_subscribed_events(\nself,\n) -&gt; typing.Mapping[\ntyping.Type[domain_event.MigrationEvent],\ntyping.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n]:\n...\n@property\n@abc.abstractmethod\ndef session_auditlog_limit(self) -&gt; typing.Optional[int]:\n...\n@property\n@abc.abstractmethod\ndef session_config_dir(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef session_scripts_dir(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef session_file_naming_strategy(self) -&gt; filename_strategy_port.FilenameStrategy:\n...\n@property\n@abc.abstractmethod\ndef uses_strict_file_naming(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef uses_schema_validation(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef uses_indexing(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef uses_logging(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef uses_unique_timezone(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef uses_auditlog(self) -&gt; bool:\n...\n@property\n@abc.abstractmethod\ndef raises_on_transaction_failure(self) -&gt; bool:\n...\n@abc.abstractmethod\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n@abc.abstractmethod\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef has_migrations(self) -&gt; bool:\n...\n@abc.abstractmethod\ndef get_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef get_migration_model_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef get_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef get_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; None:\n...\n@abc.abstractmethod\ndef remove_migration(self, migration_version: int, /) -&gt; None:\n...\n@abc.abstractmethod\ndef get_current_version(self) -&gt; typing.Optional[int]:\n...\n@abc.abstractmethod\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; None:\n...\n@abc.abstractmethod\ndef log_audit_entry(\nself, migration_auditlog_entry: domain_auditlog_entry.MigrationAuditlogEntry, /\n) -&gt; None:\n...\n@abc.abstractmethod\ndef begin_mongo_session(self) -&gt; MongoSessionContext:\n...\n@abc.abstractmethod\ndef begin_transaction(\nself,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; TransactionContext[TransactionT]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.__slots__","title":"<code>__slots__ = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.raises_on_transaction_failure","title":"<code>raises_on_transaction_failure: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_auditlog_limit","title":"<code>session_auditlog_limit: typing.Optional[int]</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_client","title":"<code>session_client: mongo.Client</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_config_dir","title":"<code>session_config_dir: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_database","title":"<code>session_database: mongo.Database</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_date_format","title":"<code>session_date_format: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_file_naming_strategy","title":"<code>session_file_naming_strategy: filename_strategy_port.FilenameStrategy</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_id","title":"<code>session_id: bson.binary.Binary</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_name","title":"<code>session_name: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_scripts_dir","title":"<code>session_scripts_dir: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_subscribed_events","title":"<code>session_subscribed_events: typing.Mapping[typing.Type[domain_event.MigrationEvent], typing.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]]</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.session_timezone","title":"<code>session_timezone: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_auditlog","title":"<code>uses_auditlog: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_indexing","title":"<code>uses_indexing: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_logging","title":"<code>uses_logging: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_schema_validation","title":"<code>uses_schema_validation: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_strict_file_naming","title":"<code>uses_strict_file_naming: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.uses_unique_timezone","title":"<code>uses_unique_timezone: bool</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.append_migration","title":"<code>append_migration(migration)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.begin_mongo_session","title":"<code>begin_mongo_session()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef begin_mongo_session(self) -&gt; MongoSessionContext:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.begin_transaction","title":"<code>begin_transaction(transaction_type, migration)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef begin_transaction(\nself,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; TransactionContext[TransactionT]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.get_all_migration_models","title":"<code>get_all_migration_models(*, ascending_id=True)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef get_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.get_current_version","title":"<code>get_current_version()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef get_current_version(self) -&gt; typing.Optional[int]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.get_migration_model_by_flag","title":"<code>get_migration_model_by_flag(*, is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef get_migration_model_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.get_migration_model_by_version","title":"<code>get_migration_model_by_version(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef get_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.get_migration_models_by_flag","title":"<code>get_migration_models_by_flag(*, is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef get_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.has_migration","title":"<code>has_migration(item)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.has_migration_with_version","title":"<code>has_migration_with_version(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.has_migrations","title":"<code>has_migrations()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef has_migrations(self) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.history","title":"<code>history(start=None, end=None, limit=None, ascending_date=True)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.log_audit_entry","title":"<code>log_audit_entry(migration_auditlog_entry)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef log_audit_entry(\nself, migration_auditlog_entry: domain_auditlog_entry.MigrationAuditlogEntry, /\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.remove_migration","title":"<code>remove_migration(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef remove_migration(self, migration_version: int, /) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSession.set_applied_flag","title":"<code>set_applied_flag(migration, is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@abc.abstractmethod\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl","title":"<code>MigrationSessionImpl</code>","text":"<p>         Bases: <code>MigrationSession</code></p> Source code in <code>mongorunway\\application\\session.py</code> <pre><code>class MigrationSessionImpl(MigrationSession):\ndef __init__(\nself,\napp: applications.MigrationApp,\nconfiguration: config.Config,\n) -&gt; None:\nself._config = configuration\nself._application = app\nself._repository = configuration.application.app_repository\nself._auditlog_journal = configuration.application.app_auditlog_journal\n@property\ndef session_id(self) -&gt; bson.binary.Binary:\nreturn bson.binary.Binary(uuid.uuid4().bytes, bson.UUID_SUBTYPE)  # like in pymongo session\n@property\ndef session_timezone(self) -&gt; str:\nreturn self._config.application.app_timezone\n@property\ndef session_date_format(self) -&gt; str:\nreturn self._config.application.app_date_format\n@property\ndef session_client(self) -&gt; mongo.Client:\nreturn self._config.application.app_client\n@property\ndef session_database(self) -&gt; mongo.Database:\nreturn self._config.application.app_database\n@property\ndef session_name(self) -&gt; str:\nreturn self._config.application.app_name\n@property\ndef session_subscribed_events(\nself,\n) -&gt; typing.Mapping[\ntyping.Type[domain_event.MigrationEvent],\ntyping.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n]:\nreturn self._config.application.app_events\n@property\ndef session_auditlog_limit(self) -&gt; typing.Optional[int]:\nreturn self._config.application.app_auditlog_limit\n@property\ndef session_config_dir(self) -&gt; str:\nreturn self._config.filesystem.config_dir\n@property\ndef session_scripts_dir(self) -&gt; str:\nreturn self._config.filesystem.scripts_dir\n@property\ndef session_file_naming_strategy(self) -&gt; filename_strategy_port.FilenameStrategy:\nreturn self._config.filesystem.filename_strategy\n@property\ndef uses_strict_file_naming(self) -&gt; bool:\nreturn self._config.filesystem.use_filename_strategy\n@property\ndef uses_schema_validation(self) -&gt; bool:\nreturn self._config.application.use_schema_validation\n@property\ndef uses_indexing(self) -&gt; bool:\nreturn self._config.application.use_indexing\n@property\ndef uses_logging(self) -&gt; bool:\nreturn self._config.application.is_logged\n@property\ndef uses_unique_timezone(self) -&gt; bool:\nreturn self._config.application.has_unique_timezone\n@property\ndef uses_auditlog(self) -&gt; bool:\nreturn self._config.application.is_auditlog_enabled\n@property\ndef raises_on_transaction_failure(self) -&gt; bool:\nreturn self._config.application.raise_on_transaction_failure\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\nreturn self._repository.has_migration(item)\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nreturn self._repository.has_migration_with_version(migration_version)\ndef has_migrations(self) -&gt; bool:\nreturn self._repository.has_migrations()\ndef get_migration_model_by_version(\nself, migration_version: int\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nreturn self._repository.acquire_migration_model_by_version(migration_version)\ndef get_migration_model_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nreturn self._repository.acquire_migration_model_by_flag(is_applied)\ndef get_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\nreturn list(self._repository.acquire_all_migration_models(ascending_id=ascending_id))\ndef get_migration_models_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\nreturn list(self._repository.acquire_migration_models_by_flag(is_applied=is_applied))\ndef get_current_version(self) -&gt; typing.Optional[int]:\nif (\ntarget := self._repository.acquire_migration_model_by_flag(is_applied=True)\n) is not None:\nreturn typing.cast(\ntyping.Optional[int],\ntarget.version,\n)\nreturn target\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; None:\nif not isinstance(migration, domain_migration.Migration):\nraise TypeError(f\"Migration must be instance of {domain_migration.Migration!r}.\")\nself._repository.append_migration(migration)\ndef remove_migration(self, migration_version: int, /) -&gt; None:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nmodel = self._repository.acquire_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version} does not exist.\")\nself._repository.remove_migration(migration_version)\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; None:\nif not isinstance(migration, domain_migration.Migration):\nraise TypeError(f\"Migration must be instance of {domain_migration.Migration!r}.\")\nself._repository.set_applied_flag(migration, is_applied)\n@requires_auditlog\ndef log_audit_entry(self, entry: domain_auditlog_entry.MigrationAuditlogEntry) -&gt; None:\nif not isinstance(entry, domain_auditlog_entry.MigrationAuditlogEntry):\nraise TypeError(\nf\"Migration auditlog entry must be instance of \"\nf\"{domain_auditlog_entry.MigrationAuditlogEntry!r}.\"\n)\nassert self._auditlog_journal is not None  # For type checkers only\nself._auditlog_journal.append_entries([entry])\n@requires_auditlog\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\nassert self._auditlog_journal is not None  # For type checkers only\nyield from self._auditlog_journal.history(\nstart=start,\nend=end,\nlimit=limit,\nascending_date=ascending_date,\n)\ndef begin_mongo_session(self) -&gt; MongoSessionContext:\nctx = MongoSessionContext(self.session_client.start_session())\n_LOGGER.info(\n\"Mongorunway MongoDB context successfully initialized \" \"with MongoDB session id (%s)\",\nutil.hexlify(ctx.mongodb_session_id),\n)\nreturn ctx\ndef begin_transaction(\nself,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; TransactionContext[TransactionT]:\nctx = TransactionContext(self, transaction_type, migration)\n_LOGGER.info(\n\"Mongorunway transaction context successfully initialized \"\n\"with Mongorunway session id (%s)\",\nutil.hexlify(self.session_id),\n)\nreturn ctx\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.raises_on_transaction_failure","title":"<code>raises_on_transaction_failure: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_auditlog_limit","title":"<code>session_auditlog_limit: typing.Optional[int]</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_client","title":"<code>session_client: mongo.Client</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_config_dir","title":"<code>session_config_dir: str</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_database","title":"<code>session_database: mongo.Database</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_date_format","title":"<code>session_date_format: str</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_file_naming_strategy","title":"<code>session_file_naming_strategy: filename_strategy_port.FilenameStrategy</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_id","title":"<code>session_id: bson.binary.Binary</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_name","title":"<code>session_name: str</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_scripts_dir","title":"<code>session_scripts_dir: str</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_subscribed_events","title":"<code>session_subscribed_events: typing.Mapping[typing.Type[domain_event.MigrationEvent], typing.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]]</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.session_timezone","title":"<code>session_timezone: str</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_auditlog","title":"<code>uses_auditlog: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_indexing","title":"<code>uses_indexing: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_logging","title":"<code>uses_logging: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_schema_validation","title":"<code>uses_schema_validation: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_strict_file_naming","title":"<code>uses_strict_file_naming: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.uses_unique_timezone","title":"<code>uses_unique_timezone: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.__init__","title":"<code>__init__(app, configuration)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __init__(\nself,\napp: applications.MigrationApp,\nconfiguration: config.Config,\n) -&gt; None:\nself._config = configuration\nself._application = app\nself._repository = configuration.application.app_repository\nself._auditlog_journal = configuration.application.app_auditlog_journal\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.append_migration","title":"<code>append_migration(migration)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def append_migration(self, migration: domain_migration.Migration, /) -&gt; None:\nif not isinstance(migration, domain_migration.Migration):\nraise TypeError(f\"Migration must be instance of {domain_migration.Migration!r}.\")\nself._repository.append_migration(migration)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.begin_mongo_session","title":"<code>begin_mongo_session()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def begin_mongo_session(self) -&gt; MongoSessionContext:\nctx = MongoSessionContext(self.session_client.start_session())\n_LOGGER.info(\n\"Mongorunway MongoDB context successfully initialized \" \"with MongoDB session id (%s)\",\nutil.hexlify(ctx.mongodb_session_id),\n)\nreturn ctx\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.begin_transaction","title":"<code>begin_transaction(transaction_type, migration)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def begin_transaction(\nself,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; TransactionContext[TransactionT]:\nctx = TransactionContext(self, transaction_type, migration)\n_LOGGER.info(\n\"Mongorunway transaction context successfully initialized \"\n\"with Mongorunway session id (%s)\",\nutil.hexlify(self.session_id),\n)\nreturn ctx\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.get_all_migration_models","title":"<code>get_all_migration_models(*, ascending_id=True)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def get_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\nreturn list(self._repository.acquire_all_migration_models(ascending_id=ascending_id))\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.get_current_version","title":"<code>get_current_version()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def get_current_version(self) -&gt; typing.Optional[int]:\nif (\ntarget := self._repository.acquire_migration_model_by_flag(is_applied=True)\n) is not None:\nreturn typing.cast(\ntyping.Optional[int],\ntarget.version,\n)\nreturn target\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.get_migration_model_by_flag","title":"<code>get_migration_model_by_flag(*, is_applied)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def get_migration_model_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nreturn self._repository.acquire_migration_model_by_flag(is_applied)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.get_migration_model_by_version","title":"<code>get_migration_model_by_version(migration_version)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def get_migration_model_by_version(\nself, migration_version: int\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nreturn self._repository.acquire_migration_model_by_version(migration_version)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.get_migration_models_by_flag","title":"<code>get_migration_models_by_flag(*, is_applied)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def get_migration_models_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.MutableSequence[domain_migration.MigrationReadModel]:\nreturn list(self._repository.acquire_migration_models_by_flag(is_applied=is_applied))\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.has_migration","title":"<code>has_migration(item)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def has_migration(self, item: typing.Any, /) -&gt; bool:\nreturn self._repository.has_migration(item)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.has_migration_with_version","title":"<code>has_migration_with_version(migration_version)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def has_migration_with_version(self, migration_version: int, /) -&gt; bool:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nreturn self._repository.has_migration_with_version(migration_version)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.has_migrations","title":"<code>has_migrations()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def has_migrations(self) -&gt; bool:\nreturn self._repository.has_migrations()\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.history","title":"<code>history(start=None, end=None, limit=None, ascending_date=True)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@requires_auditlog\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\nassert self._auditlog_journal is not None  # For type checkers only\nyield from self._auditlog_journal.history(\nstart=start,\nend=end,\nlimit=limit,\nascending_date=ascending_date,\n)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.log_audit_entry","title":"<code>log_audit_entry(entry)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>@requires_auditlog\ndef log_audit_entry(self, entry: domain_auditlog_entry.MigrationAuditlogEntry) -&gt; None:\nif not isinstance(entry, domain_auditlog_entry.MigrationAuditlogEntry):\nraise TypeError(\nf\"Migration auditlog entry must be instance of \"\nf\"{domain_auditlog_entry.MigrationAuditlogEntry!r}.\"\n)\nassert self._auditlog_journal is not None  # For type checkers only\nself._auditlog_journal.append_entries([entry])\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.remove_migration","title":"<code>remove_migration(migration_version)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def remove_migration(self, migration_version: int, /) -&gt; None:\nif not isinstance(migration_version, int):\nraise TypeError(f\"Migration version must be instance of {int!r}.\")\nmodel = self._repository.acquire_migration_model_by_version(migration_version)\nif model is None:\nraise ValueError(f\"Migration with version {migration_version} does not exist.\")\nself._repository.remove_migration(migration_version)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MigrationSessionImpl.set_applied_flag","title":"<code>set_applied_flag(migration, is_applied)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; None:\nif not isinstance(migration, domain_migration.Migration):\nraise TypeError(f\"Migration must be instance of {domain_migration.Migration!r}.\")\nself._repository.set_applied_flag(migration, is_applied)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext","title":"<code>MongoSessionContext</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>class MongoSessionContext:\n# incapsulate\ndef __init__(self, session: mongo.ClientSession) -&gt; None:\nself.__session = session\ndef __enter__(self: MongoSessionContextT) -&gt; MongoSessionContextT:\nreturn self\ndef __exit__(self, *args: typing.Any) -&gt; None:\nself.__session.end_session()\n@property\ndef mongodb_session_id(self) -&gt; bson.binary.Binary:\nreturn typing.cast(\nbson.binary.Binary,\nself.__session.session_id[\"id\"],\n)\n@property\ndef has_ended(self) -&gt; bool:\nreturn self.__session.has_ended\ndef start_transaction(\nself,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; contextlib.AbstractContextManager[typing.Any]:\nreturn self.__session.start_transaction(*args, **kwargs)\ndef commit_transaction(self) -&gt; None:\nreturn self.__session.commit_transaction()\ndef abort_transaction(self) -&gt; None:\nreturn self.__session.abort_transaction()\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.__session","title":"<code>__session = session</code>  <code>instance-attribute</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.has_ended","title":"<code>has_ended: bool</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.mongodb_session_id","title":"<code>mongodb_session_id: bson.binary.Binary</code>  <code>property</code>","text":""},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __enter__(self: MongoSessionContextT) -&gt; MongoSessionContextT:\nreturn self\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.__exit__","title":"<code>__exit__(*args)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __exit__(self, *args: typing.Any) -&gt; None:\nself.__session.end_session()\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.__init__","title":"<code>__init__(session)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __init__(self, session: mongo.ClientSession) -&gt; None:\nself.__session = session\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.abort_transaction","title":"<code>abort_transaction()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def abort_transaction(self) -&gt; None:\nreturn self.__session.abort_transaction()\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.commit_transaction","title":"<code>commit_transaction()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def commit_transaction(self) -&gt; None:\nreturn self.__session.commit_transaction()\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.MongoSessionContext.start_transaction","title":"<code>start_transaction(*args, **kwargs)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def start_transaction(\nself,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; contextlib.AbstractContextManager[typing.Any]:\nreturn self.__session.start_transaction(*args, **kwargs)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.TransactionContext","title":"<code>TransactionContext</code>","text":"<p>         Bases: <code>typing.Generic[TransactionT]</code></p> Source code in <code>mongorunway\\application\\session.py</code> <pre><code>class TransactionContext(typing.Generic[TransactionT]):\ndef __init__(\nself,\nmigration_session: MigrationSession,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; None:\nself._transaction = transaction_type.create(migration_session, migration)\nself._migration = migration\nself._migration_session = migration_session\ndef __enter__(self) -&gt; TransactionT:\nreturn self._transaction\ndef __exit__(self, *args: typing.Any) -&gt; None:\nif self._migration_session.uses_auditlog:\nentry = self._build_auditlog_entry()\nif self._transaction.is_failed():\nassert self._transaction.exc_val is not None  # For type checkers only\nentry.with_error(self._transaction.exc_val)\nself._migration_session.log_audit_entry(entry)\ndef _build_auditlog_entry(self) -&gt; domain_auditlog_entry.MigrationAuditlogEntry:\nentry = domain_auditlog_entry.MigrationAuditlogEntry(\ndate_fmt=self._migration_session.session_date_format,\nsession_id=self._migration_session.session_id,\ntransaction_name=type(self._transaction).__name__,\nmigration_read_model=domain_migration.MigrationReadModel.from_migration(\nself._migration,\n),\n)\nif self._migration_session.uses_unique_timezone:\nentry.with_timezone(self._migration_session.session_timezone)\nreturn entry\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.TransactionContext.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __enter__(self) -&gt; TransactionT:\nreturn self._transaction\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.TransactionContext.__exit__","title":"<code>__exit__(*args)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __exit__(self, *args: typing.Any) -&gt; None:\nif self._migration_session.uses_auditlog:\nentry = self._build_auditlog_entry()\nif self._transaction.is_failed():\nassert self._transaction.exc_val is not None  # For type checkers only\nentry.with_error(self._transaction.exc_val)\nself._migration_session.log_audit_entry(entry)\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.TransactionContext.__init__","title":"<code>__init__(migration_session, transaction_type, migration)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def __init__(\nself,\nmigration_session: MigrationSession,\ntransaction_type: typing.Type[TransactionT],\nmigration: domain_migration.Migration,\n) -&gt; None:\nself._transaction = transaction_type.create(migration_session, migration)\nself._migration = migration\nself._migration_session = migration_session\n</code></pre>"},{"location":"docs/application/session/#mongorunway.application.session.requires_auditlog","title":"<code>requires_auditlog(meth)</code>","text":"Source code in <code>mongorunway\\application\\session.py</code> <pre><code>def requires_auditlog(meth: typing.Callable[_P, _T]) -&gt; typing.Callable[_P, _T]:\n@functools.wraps(meth)\ndef wrapper(*args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\nself: \"MigrationSession\" = typing.cast(\"MigrationSession\", args[0])\nif not self.uses_auditlog:\nraise ValueError(\"Auditlog is not enabled on this session.\")\nreturn meth(*args, **kwargs)\nreturn typing.cast(typing.Callable[_P, _T], wrapper)\n</code></pre>"},{"location":"docs/application/traits/","title":"Traits","text":""},{"location":"docs/application/traits/#mongorunway.application.traits","title":"<code>mongorunway.application.traits</code>","text":""},{"location":"docs/application/traits/#mongorunway.application.traits.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationSessionAware', 'MigrationRunner', 'MigrationEventManagerAware')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationEventManagerAware","title":"<code>MigrationEventManagerAware</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>class MigrationEventManagerAware(abc.ABC):\n@property\n@abc.abstractmethod\ndef event_manager(self) -&gt; domain_event_manager.MigrationEventManager:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationEventManagerAware.event_manager","title":"<code>event_manager: domain_event_manager.MigrationEventManager</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner","title":"<code>MigrationRunner</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>class MigrationRunner(abc.ABC):\n__slots__ = ()\n@abc.abstractmethod\ndef upgrade_once(self) -&gt; int:\n...\n@abc.abstractmethod\ndef downgrade_once(self) -&gt; int:\n...\n@abc.abstractmethod\ndef upgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\n...\n@abc.abstractmethod\ndef downgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\n...\n@abc.abstractmethod\ndef downgrade_to(self, migration_version: int, /) -&gt; int:\n...\n@abc.abstractmethod\ndef upgrade_to(self, migration_version: int, /) -&gt; int:\n...\n@abc.abstractmethod\ndef downgrade_all(self) -&gt; int:\n...\n@abc.abstractmethod\ndef upgrade_all(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.__slots__","title":"<code>__slots__ = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.downgrade_all","title":"<code>downgrade_all()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef downgrade_all(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.downgrade_once","title":"<code>downgrade_once()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef downgrade_once(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.downgrade_to","title":"<code>downgrade_to(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef downgrade_to(self, migration_version: int, /) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.downgrade_while","title":"<code>downgrade_while(predicate)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef downgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.upgrade_all","title":"<code>upgrade_all()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef upgrade_all(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.upgrade_once","title":"<code>upgrade_once()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef upgrade_once(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.upgrade_to","title":"<code>upgrade_to(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef upgrade_to(self, migration_version: int, /) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationRunner.upgrade_while","title":"<code>upgrade_while(predicate)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>@abc.abstractmethod\ndef upgrade_while(\nself, predicate: typing.Callable[[domain_migration.Migration], bool], /\n) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationSessionAware","title":"<code>MigrationSessionAware</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\traits.py</code> <pre><code>class MigrationSessionAware(abc.ABC):\n@property\n@abc.abstractmethod\ndef session(self) -&gt; session.MigrationSession:\n...\n</code></pre>"},{"location":"docs/application/traits/#mongorunway.application.traits.MigrationSessionAware.session","title":"<code>session: session.MigrationSession</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/transactions/","title":"Transactions","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions","title":"<code>mongorunway.application.transactions</code>","text":"<p>The transaction module provides classes for performing transactions in a migration application. It contains implementations of the base transaction class as well as classes for different types of transactions.</p>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.TRANSACTION_NOT_APPLIED","title":"<code>TRANSACTION_NOT_APPLIED: typing.Final[TransactionCode] = 0</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.TRANSACTION_SUCCESS","title":"<code>TRANSACTION_SUCCESS: typing.Final[TransactionCode] = 1</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.TransactionCode","title":"<code>TransactionCode: typing.TypeAlias = int</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationTransaction', 'UpgradeTransaction', 'DowngradeTransaction', 'TRANSACTION_SUCCESS', 'TRANSACTION_NOT_APPLIED')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction","title":"<code>AbstractMigrationTransaction</code>","text":"<p>         Bases: <code>MigrationTransaction</code>, <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>class AbstractMigrationTransaction(MigrationTransaction, abc.ABC):\ndef __init__(\nself,\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; None:\nself._client = migration_session.session_client\nself._migration_session = migration_session\nself._migration = migration\nself._exc_val: typing.Optional[BaseException] = None\n@classmethod\ndef create(\ncls: typing.Type[_SelfT],\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; _SelfT:\nreturn cls(migration_session, migration)  # type: ignore[call-arg]\n@property\ndef exc_val(self) -&gt; typing.Optional[BaseException]:\nreturn self._exc_val\ndef is_failed(self) -&gt; bool:\nreturn self.exc_val is not None\n@typing.final\ndef apply_to(self, session_context: session.MongoSessionContext) -&gt; None:\nprocess = self.get_process(self._migration)\ncontext = self._build_command_context(session_context)\nvalidation_service.validate_migration_process(process, context)\nmongodb_session_id = util.hexlify(session_context.mongodb_session_id)\ntry:\nwaiting_commands_count = len(process.commands)\nwith session_context.start_transaction():\n_LOGGER.info(\n\"Beginning a transaction in MongoDB session (%s) for (%s) process.\",\nmongodb_session_id,\nprocess.name,\n)\nfor command_idx, command in enumerate(process.commands, 1):\ncommand.execute(context)\n_LOGGER.info(\n\"%s command successfully applied (%s of %s).\",\ncommand.name,\ncommand_idx,\nwaiting_commands_count,\n)\nself.commit(self._migration, session_context)\nexcept Exception as exc:\n_LOGGER.error(\n\"Transaction execution in MongoDB session (%s) ended with error %s.\",\nmongodb_session_id,\ntype(exc).__name__,\n)\n_LOGGER.error(\"Error details of transaction execution: %s\", str(exc))\nself._exc_val = exc\nself.rollback(self._migration, session_context)\nif session_context.has_ended:\n_LOGGER.info(\"MongoDB session %s has ended.\", mongodb_session_id)\n@typing.final\ndef rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n_LOGGER.debug(\n\"Rolling back migration %s with version %s\",\nmigration.name,\nmigration.version,\n)\nself._rollback(migration, mongo_session)\n@typing.final\ndef commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n_LOGGER.debug(\n\"Committing migration %s with version %s\",\nmigration.name,\nmigration.version,\n)\nself._commit(migration, mongo_session)\n@abc.abstractmethod\ndef _rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\npass\n@abc.abstractmethod\ndef _commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\npass\ndef _build_command_context(\nself,\nsession_context: session.MongoSessionContext,\n) -&gt; domain_context.MigrationContext:\nreturn domain_context.MigrationContext(\nmongorunway_session_id=util.hexlify(self._migration_session.session_id),\nmongodb_session_id=util.hexlify(session_context.mongodb_session_id),\nclient=self._migration_session.session_client,\ndatabase=self._migration_session.session_database,\n)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.exc_val","title":"<code>exc_val: typing.Optional[BaseException]</code>  <code>property</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.__init__","title":"<code>__init__(migration_session, migration)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>def __init__(\nself,\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; None:\nself._client = migration_session.session_client\nself._migration_session = migration_session\nself._migration = migration\nself._exc_val: typing.Optional[BaseException] = None\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.apply_to","title":"<code>apply_to(session_context)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@typing.final\ndef apply_to(self, session_context: session.MongoSessionContext) -&gt; None:\nprocess = self.get_process(self._migration)\ncontext = self._build_command_context(session_context)\nvalidation_service.validate_migration_process(process, context)\nmongodb_session_id = util.hexlify(session_context.mongodb_session_id)\ntry:\nwaiting_commands_count = len(process.commands)\nwith session_context.start_transaction():\n_LOGGER.info(\n\"Beginning a transaction in MongoDB session (%s) for (%s) process.\",\nmongodb_session_id,\nprocess.name,\n)\nfor command_idx, command in enumerate(process.commands, 1):\ncommand.execute(context)\n_LOGGER.info(\n\"%s command successfully applied (%s of %s).\",\ncommand.name,\ncommand_idx,\nwaiting_commands_count,\n)\nself.commit(self._migration, session_context)\nexcept Exception as exc:\n_LOGGER.error(\n\"Transaction execution in MongoDB session (%s) ended with error %s.\",\nmongodb_session_id,\ntype(exc).__name__,\n)\n_LOGGER.error(\"Error details of transaction execution: %s\", str(exc))\nself._exc_val = exc\nself.rollback(self._migration, session_context)\nif session_context.has_ended:\n_LOGGER.info(\"MongoDB session %s has ended.\", mongodb_session_id)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.commit","title":"<code>commit(migration, mongo_session)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@typing.final\ndef commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n_LOGGER.debug(\n\"Committing migration %s with version %s\",\nmigration.name,\nmigration.version,\n)\nself._commit(migration, mongo_session)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.create","title":"<code>create(migration_session, migration)</code>  <code>classmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@classmethod\ndef create(\ncls: typing.Type[_SelfT],\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; _SelfT:\nreturn cls(migration_session, migration)  # type: ignore[call-arg]\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.is_failed","title":"<code>is_failed()</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>def is_failed(self) -&gt; bool:\nreturn self.exc_val is not None\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.AbstractMigrationTransaction.rollback","title":"<code>rollback(migration, mongo_session)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@typing.final\ndef rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n_LOGGER.debug(\n\"Rolling back migration %s with version %s\",\nmigration.name,\nmigration.version,\n)\nself._rollback(migration, mongo_session)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.DowngradeTransaction","title":"<code>DowngradeTransaction</code>","text":"<p>         Bases: <code>AbstractMigrationTransaction</code></p> Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>class DowngradeTransaction(AbstractMigrationTransaction):\ndef get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\nreturn migration.downgrade_process\ndef _rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\nself._migration_session.set_applied_flag(migration, True)\ndef _commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\nself._migration_session.set_applied_flag(migration, False)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.DowngradeTransaction.get_process","title":"<code>get_process(migration)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>def get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\nreturn migration.downgrade_process\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction","title":"<code>MigrationTransaction</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>class MigrationTransaction(abc.ABC):\n__slots__: typing.Sequence[str] = ()\n@property\n@abc.abstractmethod\ndef exc_val(self) -&gt; typing.Optional[BaseException]:\n...\n@classmethod\n@abc.abstractmethod\ndef create(\ncls: typing.Type[_SelfT],\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; _SelfT:\n...\n@abc.abstractmethod\ndef is_failed(self) -&gt; bool:\n...\n@abc.abstractmethod\ndef get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\n...\n@abc.abstractmethod\ndef apply_to(self, session_context: session.MongoSessionContext) -&gt; None:\n...\n@abc.abstractmethod\ndef commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n...\n@abc.abstractmethod\ndef rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.exc_val","title":"<code>exc_val: typing.Optional[BaseException]</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.apply_to","title":"<code>apply_to(session_context)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@abc.abstractmethod\ndef apply_to(self, session_context: session.MongoSessionContext) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.commit","title":"<code>commit(migration, mongo_session)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@abc.abstractmethod\ndef commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.create","title":"<code>create(migration_session, migration)</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef create(\ncls: typing.Type[_SelfT],\nmigration_session: session.MigrationSession,\nmigration: domain_migration.Migration,\n) -&gt; _SelfT:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.get_process","title":"<code>get_process(migration)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@abc.abstractmethod\ndef get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.is_failed","title":"<code>is_failed()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@abc.abstractmethod\ndef is_failed(self) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.MigrationTransaction.rollback","title":"<code>rollback(migration, mongo_session)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>@abc.abstractmethod\ndef rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.UpgradeTransaction","title":"<code>UpgradeTransaction</code>","text":"<p>         Bases: <code>AbstractMigrationTransaction</code></p> Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>class UpgradeTransaction(AbstractMigrationTransaction):\ndef get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\nreturn migration.upgrade_process\ndef _rollback(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\nself._migration_session.set_applied_flag(migration, False)\ndef _commit(\nself,\nmigration: domain_migration.Migration,\nmongo_session: session.MongoSessionContext,\n) -&gt; None:\nself._migration_session.set_applied_flag(migration, True)\n</code></pre>"},{"location":"docs/application/transactions/#mongorunway.application.transactions.UpgradeTransaction.get_process","title":"<code>get_process(migration)</code>","text":"Source code in <code>mongorunway\\application\\transactions.py</code> <pre><code>def get_process(\nself, migration: domain_migration.Migration, /\n) -&gt; domain_migration.MigrationProcess:\nreturn migration.upgrade_process\n</code></pre>"},{"location":"docs/application/use_cases/","title":"Use cases","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases","title":"<code>mongorunway.application.use_cases</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.ALL","title":"<code>ALL: typing.Final[str] = 'all'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.ExitCode","title":"<code>ExitCode: typing.TypeAlias = int</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.FAILURE","title":"<code>FAILURE: typing.Final[ExitCode] = 1</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.MINUS","title":"<code>MINUS: typing.Final[str] = '-'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.PLUS","title":"<code>PLUS: typing.Final[str] = '+'</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.SUCCESS","title":"<code>SUCCESS: typing.Final[ExitCode] = 0</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.UseCaseFailed","title":"<code>UseCaseFailed: typing.TypeAlias = object()</code>  <code>module-attribute</code>","text":"<p>Use case callback sentinel.</p> <p>Some use cases that are designed to retrieve specific data may, by design,  return None. However, since errors at the use case level are not raised but  handled and logged to the console, it has been decided to make it a general  rule to return the UseCaseFailed sentinel in case of a failed use case.</p>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.UseCaseFailed--notes","title":"Notes","text":"<p>It is important to differentiate between ExitCode and this sentinel: 'ExitCode'  is returned by commands that are meant to perform a specific action without being  tied to a particular result. On the other hand, as mentioned earlier, UseCaseFailed  is intended for the opposite scenario: for commands that are meant  to search and  compute data and are expected to return a result.</p>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.UseCaseFailed--see-also","title":"See Also","text":"<p>ExitCode</p>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.UseCaseFailedOr","title":"<code>UseCaseFailedOr = typing.Union[_T, UseCaseFailed]</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.__all__","title":"<code>__all__: typing.Sequence[str] = ('ALL', 'ExitCode', 'FAILURE', 'MINUS', 'PLUS', 'SUCCESS', 'UseCaseFailed', 'UseCaseFailedOr', 'create_migration_file', 'downgrade', 'get_auditlog_entries', 'get_pushed_version', 'get_status', 'read_configuration', 'render_downgrade_results', 'render_error', 'render_upgrade_results', 'upgrade', 'usecase', 'walk', 'refresh', 'safe_remove_migration', 'safe_remove_all_migrations', 'check_files', 'refresh_checksums')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.check_files","title":"<code>check_files(application, raise_exc, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef check_files(\napplication: applications.MigrationApp,\nraise_exc: bool,\nverbose_exc: bool,\n) -&gt; ExitCode:\nservice = migration_service.MigrationService(application.session)\nfailed_migrations = []\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\nfor migration in application.session.get_all_migration_models():\ncurrent_migration_state = service.get_migration(migration.name, migration.version)\nif current_migration_state.checksum != migration.checksum:\nfailed_migrations.append(current_migration_state)\nif failed_migrations:\noutput.print_error(\nf\"'{', '.join(m.name for m in failed_migrations)}' migration file(s) are changed.\"\n)\nif raise_exc:\nraise domain_exception.MigrationFilesChangedError(\n*[m.name for m in failed_migrations]\n)\nreturn FAILURE\noutput.print_success(\"All files remain in their previous state.\")\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.create_migration_file","title":"<code>create_migration_file(application, migration_filename, verbose_exc, migration_version=None)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef create_migration_file(\napplication: applications.MigrationApp,\nmigration_filename: str,\nverbose_exc: bool,\nmigration_version: typing.Optional[int] = None,\n) -&gt; ExitCode:\nif migration_version is None:\noutput.print_info(\"Migration version is not specified, using auto-incrementation...\")\nservice = migration_service.MigrationService(application.session)\nservice.create_migration_file_template(migration_filename, migration_version)\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.downgrade","title":"<code>downgrade(application, expression, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef downgrade(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n) -&gt; ExitCode:\nfunc: typing.Optional[typing.Callable[..., ExitCode]] = None\nargs: typing.Tuple[typing.Any, ...] = ()\nif expression.isdigit():\nfunc, args = application.downgrade_to, (int(expression),)\nelif expression == MINUS:\nfunc = application.downgrade_once\nelif len(expression) &gt; 1 and expression.startswith(MINUS):\nfunc, args = application.downgrade_to, (\nint(expression) + (application.session.get_current_version() or 0),\n)\nelif expression == ALL:\nfunc = application.downgrade_all\nif func is None:\nraise ValueError(f\"The following expression cannot be applied: {expression!r}\")\nrender_downgrade_results(*util.timeit_func(func, *args))\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.get_auditlog_entries","title":"<code>get_auditlog_entries(application, verbose_exc, start=None, end=None, limit=None, ascending_date=True)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@query_usecase(has_verbose_exc=True)\ndef get_auditlog_entries(\napplication: applications.MigrationApp,\nverbose_exc: bool,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; UseCaseFailedOr[typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry]]:\nhistory = application.session.history(\nstart=start,\nend=end,\nlimit=limit,\nascending_date=ascending_date,\n)\nreturn tuple(history)\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.get_pushed_version","title":"<code>get_pushed_version(application, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@query_usecase(has_verbose_exc=True)\ndef get_pushed_version(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n) -&gt; UseCaseFailedOr[typing.Optional[int]]:\nversion = application.session.get_current_version()\nreturn version\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.get_status","title":"<code>get_status(application, verbose_exc, pushed_depth=-1)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@query_usecase(has_verbose_exc=True)\ndef get_status(\napplication: applications.MigrationApp,\nverbose_exc: bool,\npushed_depth: int = -1,\n) -&gt; UseCaseFailedOr[typing.Tuple[bool, int]]:\nall_pushed_successfully = status_service.check_if_all_pushed_successfully(\napplication=application,\ndepth=pushed_depth,\n)\nreturn all_pushed_successfully, pushed_depth\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.init","title":"<code>init(application, verbose_exc, init_scripts_dir, init_collection, init_collection_indexes, init_collection_schema_validation)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef init(\napplication: applications.MigrationApp,\nverbose_exc: bool,\ninit_scripts_dir: bool,\ninit_collection: bool,\ninit_collection_indexes: bool,\ninit_collection_schema_validation: bool,\n) -&gt; ExitCode:\nif init_scripts_dir:\nux.configure_migration_directory(application.session.session_scripts_dir)\nif init_collection:\nux.configure_migration_collection(\napplication.session.session_database,\nuse_schema_validation=init_collection_schema_validation,\n)\nif init_collection_indexes:\nux.configure_migration_indexes(application.session.session_database.migrations)\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.query_usecase","title":"<code>query_usecase(*, has_verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>def query_usecase(\n*,\nhas_verbose_exc: bool,\n) -&gt; typing.Callable[[typing.Callable[_P, _T]], typing.Callable[_P, UseCaseFailedOr[_T]]]:\ndef decorator(func: typing.Callable[_P, _T]) -&gt; typing.Callable[_P, UseCaseFailedOr[_T]]:\n@functools.wraps(func)\ndef wrapper(*args: _P.args, **kwargs: _P.kwargs) -&gt; UseCaseFailedOr[_T]:\ntry:\ncallback = func(*args, **kwargs)\nexcept Exception as exc:\nrender_error(\nexc,\nverbose_exc=typing.cast(\nbool,\nkwargs[\"verbose_exc\"] if has_verbose_exc else False,\n),\n)\nreturn UseCaseFailed\nreturn callback\nreturn wrapper\nreturn decorator\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.read_configuration","title":"<code>read_configuration(config_filepath, *, app_name, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@query_usecase(has_verbose_exc=True)\ndef read_configuration(\nconfig_filepath: typing.Optional[str],\n*,\napp_name: str,\nverbose_exc: bool,\n) -&gt; UseCaseFailedOr[config.Config]:\nreader: typing.Optional[config_reader_port.ConfigReader] = None\nif (\nconfig_filepath is None\nor config_filepath.endswith(\".yaml\")\nor config_filepath.endswith(\".yml\")\n):  # Default reader\nreader = util.import_obj(\n\"mongorunway.infrastructure.config_readers.YamlConfigReader\",\ncast=config_reader_port.ConfigReader,\n).from_application_name(app_name)\nif reader is None:\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_error(\"Undefined configuration file type.\")\nreturn UseCaseFailed\nconfiguration = reader.read_config(config_filepath)\nif configuration is None:\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_error(f\"Cannot find any configuration files in {config_filepath} directory.\")\nreturn UseCaseFailed\nreturn configuration\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.refresh","title":"<code>refresh(application, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef refresh(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n) -&gt; ExitCode:\nsynced_names = ux.sync_scripts_with_repository(application)\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\nif synced_names:\noutput.print_success(\nf\"'{', '.join(synced_names)}' migration(s) was successfully synced.\"\n)\nelse:\noutput.print_error(\"There is no unsynced migrations.\")\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.refresh_checksums","title":"<code>refresh_checksums(application, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef refresh_checksums(application: applications.MigrationApp, verbose_exc: bool) -&gt; ExitCode:\nservice = migration_service.MigrationService(application.session)\nmodified_files = []\nfor migration in application.session.get_all_migration_models():\ncurrent_migration_state = service.get_migration(migration.name, migration.version)\nif current_migration_state.checksum != migration.checksum:\napplication.session.remove_migration(migration.version)\napplication.session.append_migration(current_migration_state)\nmodified_files.append(current_migration_state.name)\nif modified_files:\noutput.print_success(\nf\"'{', '.join(modified_files)}' files have been modified, and their \"\nf\"checksums have been successfully updated.\"\n)\nelse:\noutput.print_info(\"All files remain in their previous state.\")\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.render_downgrade_results","title":"<code>render_downgrade_results(downgraded_count, executed_in)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>def render_downgrade_results(downgraded_count: int, executed_in: float) -&gt; None:\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_success(f\"Successfully downgraded {downgraded_count} migration(s).\")\noutput.print_info(f\"Downgraded {downgraded_count} migration(s) in {executed_in}s.\",)\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.render_error","title":"<code>render_error(exc, verbose_exc=False)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>def render_error(exc: Exception, verbose_exc: bool = False) -&gt; None:\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_warning(type(exc).__name__ + \" : \" + str(exc))\nif verbose_exc:\nexc_info = traceback.format_exception(*sys.exc_info())\noutput.print_error(\"\\n\".join(exc_info))\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.render_upgrade_results","title":"<code>render_upgrade_results(upgraded_count, executed_in)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>def render_upgrade_results(upgraded_count: int, executed_in: float) -&gt; None:\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_success(f\"Successfully upgraded {upgraded_count} migration(s).\")\noutput.print_info(f\"Upgraded {upgraded_count} migration(s) in {executed_in}s.\")\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.safe_remove_all_migrations","title":"<code>safe_remove_all_migrations(application, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef safe_remove_all_migrations(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n) -&gt; ExitCode:\nmigrations = application.session.get_all_migration_models()\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\nif not migrations:\noutput.print_error(\"There is no migrations.\")\nreturn FAILURE\nfor migration in migrations:\napplication.session.remove_migration(migration.version)\ndirectory = application.session.session_scripts_dir\nfor file_name in os.listdir(directory):\nif file_name.startswith(\"_\") or not file_name.endswith(\".py\"):\ncontinue\nfile_path = os.path.join(directory, file_name)\nos.remove(file_path)\noutput.print_success(f\"Successfully deleted {len(migrations)} migration(s).\")\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.safe_remove_migration","title":"<code>safe_remove_migration(application, migration_version, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef safe_remove_migration(\napplication: applications.MigrationApp,\nmigration_version: int,\nverbose_exc: bool,\n) -&gt; ExitCode:\nmigration = application.session.get_migration_model_by_version(migration_version)\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\nif migration is None:\noutput.print_error(\nf\"Migration with version '{migration_version}' is not found.\"\n)\nreturn FAILURE\nlatest, *_ = application.session.get_all_migration_models(ascending_id=False)\nif migration.version != latest.version:\noutput.print_error(\nf\"Removing migrations must be sequential.\"\nf\" \"\nf\"The currently available version for deletion is\"\nf\" \"\nf\"'{latest.version}'\"\n)\nreturn FAILURE\napplication.session.remove_migration(migration_version)\noutput.print_success(\nf\"Migration with version {migration_version} has been successfully deleted.\"\n)\ndirectory = application.session.session_scripts_dir\nif os.path.exists(fp := (directory + \"\\\\\" + migration.name + \".py\")):\nos.remove(fp)\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.upgrade","title":"<code>upgrade(application, expression, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef upgrade(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n) -&gt; ExitCode:\nfunc: typing.Optional[typing.Callable[..., ExitCode]] = None\nargs: typing.Tuple[typing.Any, ...] = ()\nif expression.isdigit():\nfunc, args = application.upgrade_to, (int(expression),)\nelif expression == PLUS:\nfunc = application.upgrade_once\nelif expression.startswith(PLUS):\nfunc, args = application.upgrade_to, (\nint(expression[1:]) + (application.session.get_current_version() or 0),\n)\nelif expression == ALL:\nfunc = application.upgrade_all\nif func is None:\nraise ValueError(f\"The following expression cannot be applied: {expression!r}\")\nrender_upgrade_results(*util.timeit_func(func, *args))\nreturn SUCCESS\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.usecase","title":"<code>usecase(*, has_verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>def usecase(\n*,\nhas_verbose_exc: bool,\n) -&gt; typing.Callable[[typing.Callable[_P, _T]], typing.Callable[_P, ExitCode]]:\ndef decorator(func: typing.Callable[_P, _T]) -&gt; typing.Callable[_P, ExitCode]:\n@functools.wraps(func)\ndef wrapper(*args: _P.args, **kwargs: _P.kwargs) -&gt; ExitCode:\ntry:\nfunc(*args, **kwargs)\nexcept Exception as exc:\nrender_error(\nexc,\nverbose_exc=typing.cast(\nbool,\nkwargs[\"verbose_exc\"] if has_verbose_exc else False,\n),\n)\nreturn FAILURE\nreturn SUCCESS\nreturn wrapper\nreturn decorator\n</code></pre>"},{"location":"docs/application/use_cases/#mongorunway.application.use_cases.walk","title":"<code>walk(application, expression, verbose_exc)</code>","text":"Source code in <code>mongorunway\\application\\use_cases.py</code> <pre><code>@usecase(has_verbose_exc=True)\ndef walk(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n) -&gt; ExitCode:\nif expression[0] not in {PLUS, MINUS}:\nraise ValueError(\n\"This command can only go in positive or negative order. \"\n\"Therefore, the expression must begin with either the '+' \"\n\"or '-' character.\"\n)\nif expression.startswith(MINUS):\nreturn downgrade(\napplication=application,\nexpression=expression,\nverbose_exc=verbose_exc,\n)\nreturn upgrade(\napplication=application,\nexpression=expression,\nverbose_exc=verbose_exc,\n)\n</code></pre>"},{"location":"docs/application/ux/","title":"Ux","text":""},{"location":"docs/application/ux/#mongorunway.application.ux","title":"<code>mongorunway.application.ux</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.APPLIED_MIGRATION_INDEX","title":"<code>APPLIED_MIGRATION_INDEX: typing.Final[typing.Sequence[typing.Tuple[str, int]]] = [('is_applied', 1), ('_id', -1)]</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.MIGRATION_SCHEMA_VALIDATOR","title":"<code>MIGRATION_SCHEMA_VALIDATOR: typing.Final[typing.Dict[str, typing.Any]] = {'$jsonSchema': {'bsonType': 'object', 'required': ['_id', 'name', 'version', 'checksum', 'is_applied', 'description'], 'properties': {'_id': {'bsonType': 'int'}, 'name': {'bsonType': 'string', 'minLength': 1}, 'version': {'bsonType': 'int', 'minimum': 1}, 'checksum': {'bsonType': 'string'}, 'is_applied': {'bsonType': 'bool'}, 'description': {'bsonType': 'string'}}}}</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.PENDING_MIGRATION_INDEX","title":"<code>PENDING_MIGRATION_INDEX: typing.Final[typing.Sequence[typing.Tuple[str, int]]] = [('is_applied', 1)]</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.__all__","title":"<code>__all__: typing.Sequence[str] = ('MIGRATION_SCHEMA_VALIDATOR', 'PENDING_MIGRATION_INDEX', 'APPLIED_MIGRATION_INDEX', 'ValidationAction', 'ValidationLevel', 'configure_logging', 'configure_migration_indexes', 'configure_migration_directory', 'configure_migration_collection', 'configure_migration_schema_validators', 'init_components', 'init_logging', 'init_migration_indexes', 'init_schema_validators', 'init_migration_collection', 'init_migration_directory', 'remove_migration_indexes', 'remove_migration_schema_validators', 'sync_scripts_with_repository')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationAction","title":"<code>ValidationAction</code>","text":"<p>         Bases: <code>str</code>, <code>enum.Enum</code></p> Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>class ValidationAction(str, enum.Enum):\nERROR = \"error\"\nWARNING = \"warn\"\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationAction.ERROR","title":"<code>ERROR = 'error'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationAction.WARNING","title":"<code>WARNING = 'warn'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationLevel","title":"<code>ValidationLevel</code>","text":"<p>         Bases: <code>str</code>, <code>enum.Enum</code></p> Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>class ValidationLevel(str, enum.Enum):\nOFF = \"off\"\nSTRICT = \"strict\"\nMODERATE = \"moderate\"\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationLevel.MODERATE","title":"<code>MODERATE = 'moderate'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationLevel.OFF","title":"<code>OFF = 'off'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.ValidationLevel.STRICT","title":"<code>STRICT = 'strict'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ux/#mongorunway.application.ux.configure_logging","title":"<code>configure_logging(config_dict)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def configure_logging(config_dict: typing.Dict[str, typing.Any]) -&gt; None:\nif _LOGGER.isEnabledFor(logging.INFO):\n_LOGGER.info(\"Mongorunway loggers are already configured, skipping...\")\nelse:\nlogging.config.dictConfig(config_dict)\n_LOGGER.info(\"Mongorunway loggers successfully configured.\")\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.configure_migration_collection","title":"<code>configure_migration_collection(database, use_schema_validation, collection_name='migrations')</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def configure_migration_collection(\ndatabase: mongo.Database,\nuse_schema_validation: bool,\ncollection_name: str = \"migrations\",\n) -&gt; None:\nif collection_name not in database.list_collection_names():\n_LOGGER.info(\"Collection %s is not found, resolving...\", collection_name)\nkwargs: typing.Dict[str, typing.Any] = {}\nif use_schema_validation:\n_LOGGER.info(\n\"Applying a validator to %s collection...\",\ncollection_name,\n)\nkwargs[\"validator\"] = MIGRATION_SCHEMA_VALIDATOR\ndatabase.create_collection(\ncollection_name,\n**kwargs,\n)\n_LOGGER.info(\"Migrations collection successfully configured.\")\nelse:\n_LOGGER.info(\"Migration collection is already exists, skipping...\")\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.configure_migration_directory","title":"<code>configure_migration_directory(scripts_dir)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def configure_migration_directory(scripts_dir: str) -&gt; None:\n_LOGGER.info(\"Checking if the migration directory exists...\")\nif not os.path.exists(scripts_dir):\n_LOGGER.info(\"The migration directory was not found, resolving...\")\nos.mkdir(scripts_dir)\n_LOGGER.info(\n\"The migration directory has been successfully created at %s\",\nscripts_dir,\n)\nelse:\n_LOGGER.info(\"Migration directory is already exists, skipping...\")\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.configure_migration_indexes","title":"<code>configure_migration_indexes(collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def configure_migration_indexes(collection: mongo.Collection) -&gt; None:\n_LOGGER.info(\"The 'use_indexes' parameter is set to True, checking for missing indexes...\")\nindexes = collection.index_information()\ndef _create_index_if_not_exists(index: typing.Sequence[typing.Tuple[str, int]]) -&gt; None:\ntranslated_index = \"_\".join(f\"{x}_{y}\" for x, y in [_ for _ in index])\nif translated_index not in indexes:\n_LOGGER.info(\n\"Found one missing index: %s, resolving...\",\ntranslated_index,\n)\ncollection.create_index(index)\n_LOGGER.info(\"Index %s successfully configured.\", translated_index)\nelse:\n_LOGGER.info(\n\"Index %s is already configured, skipping...\",\ntranslated_index,\n)\n_create_index_if_not_exists(APPLIED_MIGRATION_INDEX)\n_create_index_if_not_exists(PENDING_MIGRATION_INDEX)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.configure_migration_schema_validators","title":"<code>configure_migration_schema_validators(collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def configure_migration_schema_validators(collection: mongo.Collection) -&gt; None:\nvalidator = collection.options().get(\"validator\")\n_LOGGER.info(\"Schema validation is enabled, checking for validators...\")\nif validator != MIGRATION_SCHEMA_VALIDATOR:\n_LOGGER.info(\"Undefined validator found, removing...\")\ncollection.database.command(\n\"collMod\",\ncollection.name,\nvalidationLevel=ValidationLevel.STRICT,\nvalidationAction=ValidationAction.ERROR,\nvalidator=MIGRATION_SCHEMA_VALIDATOR,\n)\n_LOGGER.info(\"Mongorunway migrations schema validator successfully configured.\")\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_components","title":"<code>init_components(configuration)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_components(configuration: config.Config, /) -&gt; None:\njournal = configuration.application.app_auditlog_journal\nif journal is not None:\njournal.set_max_records(configuration.application.app_auditlog_limit)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_logging","title":"<code>init_logging(configuration)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_logging(configuration: config.Config, /) -&gt; None:\nif configuration.application.is_logged:\nconfigure_logging(configuration.logging_dict)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_migration_collection","title":"<code>init_migration_collection(configuration)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_migration_collection(configuration: config.Config, /) -&gt; None:\nconfigure_migration_collection(\ndatabase=configuration.application.app_database,\nuse_schema_validation=configuration.application.use_schema_validation,\n)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_migration_directory","title":"<code>init_migration_directory(configuration)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_migration_directory(configuration: config.Config, /) -&gt; None:\nconfigure_migration_directory(configuration.filesystem.scripts_dir)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_migration_indexes","title":"<code>init_migration_indexes(configuration, collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_migration_indexes(configuration: config.Config, collection: mongo.Collection) -&gt; None:\nif configuration.application.use_indexing:\nconfigure_migration_indexes(collection)\nelse:\nremove_migration_indexes(collection)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.init_schema_validators","title":"<code>init_schema_validators(configuration, collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def init_schema_validators(configuration: config.Config, collection: mongo.Collection) -&gt; None:\nif configuration.application.use_schema_validation:\nconfigure_migration_schema_validators(collection)\nelse:\nremove_migration_schema_validators(collection)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.remove_migration_indexes","title":"<code>remove_migration_indexes(collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def remove_migration_indexes(collection: mongo.Collection) -&gt; None:\n_LOGGER.info(\n\"The 'use_indexes' parameter is set to False, checking the indexes that \"\n\"need to be deleted...\",\n)\nindexes = collection.index_information()\ndef _drop_index_if_exists(index: typing.Sequence[typing.Tuple[str, int]]) -&gt; None:\ntranslated_index = mongo.translate_index(index)\nif translated_index in indexes:\n_LOGGER.info(\n\"Found one existing index: %s, dropping...\",\ntranslated_index,\n)\ncollection.drop_index(index)\n_LOGGER.info(\"Index %s successfully dropped.\", translated_index)\nelse:\n_LOGGER.info(\n\"Index %s is already dropped, skipping...\",\ntranslated_index,\n)\n_drop_index_if_exists(APPLIED_MIGRATION_INDEX)\n_drop_index_if_exists(PENDING_MIGRATION_INDEX)\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.remove_migration_schema_validators","title":"<code>remove_migration_schema_validators(collection)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def remove_migration_schema_validators(collection: mongo.Collection) -&gt; None:\nvalidator = collection.options().get(\"validator\")\n_LOGGER.info(\"Schema validation is disabled, checking for validators...\")\nif validator == MIGRATION_SCHEMA_VALIDATOR:\ncollection.database.command(\n\"collMod\",\ncollection.name,\nvalidator={},\n)\n_LOGGER.info(\"Mongorunway schema validator successfully removed.\")\n</code></pre>"},{"location":"docs/application/ux/#mongorunway.application.ux.sync_scripts_with_repository","title":"<code>sync_scripts_with_repository(application)</code>","text":"Source code in <code>mongorunway\\application\\ux.py</code> <pre><code>def sync_scripts_with_repository(\napplication: traits.MigrationSessionAware,\n) -&gt; typing.Sequence[str]:\nsynced = []\nservice = migration_service.MigrationService(application.session)\nfor migration in service.get_migrations():\nif not application.session.has_migration(migration):\napplication.session.append_migration(migration)\nsynced.append(migration.name)\n_LOGGER.info(\n\"%s: migration '%s' with version %s was synced\"\n\" \"\n\"and successfully append to pending.\",\nsync_scripts_with_repository.__name__,\nmigration.name,\nmigration.version,\n)\nreturn synced\n</code></pre>"},{"location":"docs/application/ports/auditlog_journal/","title":"Auditlog journal","text":""},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal","title":"<code>mongorunway.application.ports.auditlog_journal</code>","text":""},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.__all__","title":"<code>__all__: typing.Sequence[str] = ('AuditlogJournal')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal","title":"<code>AuditlogJournal</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\ports\\auditlog_journal.py</code> <pre><code>class AuditlogJournal(abc.ABC):\n__slots__: typing.Sequence[str] = ()\n@property\n@abc.abstractmethod\ndef max_records(self) -&gt; typing.Optional[int]:\n...\n@abc.abstractmethod\ndef set_max_records(self, value: typing.Optional[int], /) -&gt; None:\n...\n@abc.abstractmethod\ndef append_entries(\nself,\nentries: typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef load_entries(\nself, limit: typing.Optional[int] = None\n) -&gt; typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n@abc.abstractmethod\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n</code></pre>"},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.max_records","title":"<code>max_records: typing.Optional[int]</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.append_entries","title":"<code>append_entries(entries)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\auditlog_journal.py</code> <pre><code>@abc.abstractmethod\ndef append_entries(\nself,\nentries: typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.history","title":"<code>history(start=None, end=None, limit=None, ascending_date=True)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\auditlog_journal.py</code> <pre><code>@abc.abstractmethod\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n</code></pre>"},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.load_entries","title":"<code>load_entries(limit=None)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\auditlog_journal.py</code> <pre><code>@abc.abstractmethod\ndef load_entries(\nself, limit: typing.Optional[int] = None\n) -&gt; typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry]:\n...\n</code></pre>"},{"location":"docs/application/ports/auditlog_journal/#mongorunway.application.ports.auditlog_journal.AuditlogJournal.set_max_records","title":"<code>set_max_records(value)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\auditlog_journal.py</code> <pre><code>@abc.abstractmethod\ndef set_max_records(self, value: typing.Optional[int], /) -&gt; None:\n...\n</code></pre>"},{"location":"docs/application/ports/config_reader/","title":"Config reader","text":""},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader","title":"<code>mongorunway.application.ports.config_reader</code>","text":""},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader.__all__","title":"<code>__all__: typing.Sequence[str] = ('ConfigReader')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader.ConfigReader","title":"<code>ConfigReader</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\ports\\config_reader.py</code> <pre><code>class ConfigReader(abc.ABC):\n__slots__ = ()\n@classmethod\n@abc.abstractmethod\ndef from_application_name(cls, application_name: str, /) -&gt; ConfigReader:\n...\n@abc.abstractmethod\ndef read_config(\nself,\nconfig_filename: typing.Optional[str] = None,\n) -&gt; typing.Optional[config.Config]:\n...\n</code></pre>"},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader.ConfigReader.__slots__","title":"<code>__slots__ = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader.ConfigReader.from_application_name","title":"<code>from_application_name(application_name)</code>  <code>classmethod</code> <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\config_reader.py</code> <pre><code>@classmethod\n@abc.abstractmethod\ndef from_application_name(cls, application_name: str, /) -&gt; ConfigReader:\n...\n</code></pre>"},{"location":"docs/application/ports/config_reader/#mongorunway.application.ports.config_reader.ConfigReader.read_config","title":"<code>read_config(config_filename=None)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\config_reader.py</code> <pre><code>@abc.abstractmethod\ndef read_config(\nself,\nconfig_filename: typing.Optional[str] = None,\n) -&gt; typing.Optional[config.Config]:\n...\n</code></pre>"},{"location":"docs/application/ports/filename_strategy/","title":"Filename strategy","text":""},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy","title":"<code>mongorunway.application.ports.filename_strategy</code>","text":""},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy.__all__","title":"<code>__all__: typing.Sequence[str] = ('FilenameStrategy')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy.FilenameStrategy","title":"<code>FilenameStrategy</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\ports\\filename_strategy.py</code> <pre><code>class FilenameStrategy(abc.ABC):\n__slots__: typing.Sequence[str] = ()\n@abc.abstractmethod\ndef is_valid_filename(self, filename: str, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef transform_migration_filename(self, filename: str, position: int) -&gt; str:\n...\n</code></pre>"},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy.FilenameStrategy.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy.FilenameStrategy.is_valid_filename","title":"<code>is_valid_filename(filename)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\filename_strategy.py</code> <pre><code>@abc.abstractmethod\ndef is_valid_filename(self, filename: str, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/ports/filename_strategy/#mongorunway.application.ports.filename_strategy.FilenameStrategy.transform_migration_filename","title":"<code>transform_migration_filename(filename, position)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\filename_strategy.py</code> <pre><code>@abc.abstractmethod\ndef transform_migration_filename(self, filename: str, position: int) -&gt; str:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/","title":"Repository","text":""},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository","title":"<code>mongorunway.application.ports.repository</code>","text":""},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationModelRepository')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository","title":"<code>MigrationModelRepository</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>class MigrationModelRepository(abc.ABC):\n__slots__: typing.Sequence[str] = ()\n@abc.abstractmethod\ndef __len__(self) -&gt; int:\n...\n@abc.abstractmethod\ndef __contains__(self, item: typing.Any, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\n...\n@abc.abstractmethod\ndef has_migrations(self) -&gt; bool:\n...\n@abc.abstractmethod\ndef acquire_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef acquire_migration_model_by_flag(\nself, is_applied: bool\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef acquire_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef acquire_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\n...\n@abc.abstractmethod\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; int:\n...\n@abc.abstractmethod\ndef remove_migration(self, migration_version: int, /) -&gt; int:\n...\n@abc.abstractmethod\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.__contains__","title":"<code>__contains__(item)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef __contains__(self, item: typing.Any, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.__len__","title":"<code>__len__()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef __len__(self) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.acquire_all_migration_models","title":"<code>acquire_all_migration_models(*, ascending_id=True)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef acquire_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.acquire_migration_model_by_flag","title":"<code>acquire_migration_model_by_flag(is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef acquire_migration_model_by_flag(\nself, is_applied: bool\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.acquire_migration_model_by_version","title":"<code>acquire_migration_model_by_version(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef acquire_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.acquire_migration_models_by_flag","title":"<code>acquire_migration_models_by_flag(*, is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef acquire_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.append_migration","title":"<code>append_migration(migration)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.has_migration","title":"<code>has_migration(item)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.has_migration_with_version","title":"<code>has_migration_with_version(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.has_migrations","title":"<code>has_migrations()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef has_migrations(self) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.remove_migration","title":"<code>remove_migration(migration_version)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef remove_migration(self, migration_version: int, /) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/ports/repository/#mongorunway.application.ports.repository.MigrationModelRepository.set_applied_flag","title":"<code>set_applied_flag(migration, is_applied)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\application\\ports\\repository.py</code> <pre><code>@abc.abstractmethod\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; int:\n...\n</code></pre>"},{"location":"docs/application/services/checksum_service/","title":"Checksum service","text":""},{"location":"docs/application/services/checksum_service/#mongorunway.application.services.checksum_service","title":"<code>mongorunway.application.services.checksum_service</code>","text":""},{"location":"docs/application/services/checksum_service/#mongorunway.application.services.checksum_service.__all__","title":"<code>__all__: typing.Sequence[str] = ('calculate_migration_checksum')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/checksum_service/#mongorunway.application.services.checksum_service.calculate_migration_checksum","title":"<code>calculate_migration_checksum(module)</code>","text":"Source code in <code>mongorunway\\application\\services\\checksum_service.py</code> <pre><code>def calculate_migration_checksum(module: domain_module.MigrationBusinessModule, /) -&gt; str:\nwith open(module.location, \"r\") as f:\nfile_data = f.read().encode()\nreturn hashlib.md5(file_data).hexdigest()\n</code></pre>"},{"location":"docs/application/services/migration_service/","title":"Migration service","text":""},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service","title":"<code>mongorunway.application.services.migration_service</code>","text":""},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.__all__","title":"<code>__all__: typing.Sequence[str] = ('migration_file_template', 'MigrationService')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.migration_file_template","title":"<code>migration_file_template = string.Template('from __future__ import annotations\\n\\nimport typing\\n\\nimport mongorunway\\n\\n# Required, used by Mongorunway.\\nversion = $version\\n\\n\\n@mongorunway.migration\\ndef upgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\\n    return $upgrade_commands\\n\\n\\n@mongorunway.migration\\ndef downgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\\n    return $downgrade_commands\\n')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.MigrationService","title":"<code>MigrationService</code>","text":"Source code in <code>mongorunway\\application\\services\\migration_service.py</code> <pre><code>class MigrationService:\ndef __init__(self, app_session: session.MigrationSession) -&gt; None:\nself._session = app_session\ndef get_migration(\nself,\nmigration_name: str,\nmigration_version: int,\n) -&gt; domain_migration.Migration:\nif self._session.uses_strict_file_naming:\nstrategy = self._session.session_file_naming_strategy\nmigration_name = strategy.transform_migration_filename(\nmigration_name,\nmigration_version,\n)\nmodule = util.get_module(self._session.session_scripts_dir, migration_name)\nmigration_module = domain_module.MigrationBusinessModule(module)\nmodel = self._session.get_migration_model_by_version(module.version)\nmigration = domain_migration.Migration(\nname=migration_module.get_name(),\nversion=module.version,\ndescription=migration_module.description,\nchecksum=checksum_service.calculate_migration_checksum(migration_module),\ndowngrade_process=migration_module.downgrade_process,\nupgrade_process=migration_module.upgrade_process,\nis_applied=False if model is None else model.is_applied,\n)\nreturn migration\n@typing.no_type_check\ndef get_migrations(self) -&gt; typing.Sequence[domain_migration.Migration]:\nfilename_strategy = self._session.session_file_naming_strategy\ndirectory = self._session.session_scripts_dir\nif self._session.uses_strict_file_naming:\n# All migrations are in the correct order by name.\nreturn [\nself.get_migration(\nfilename_strategy.transform_migration_filename(migration_name, position),\nposition,\n)\nfor position, migration_name in enumerate(\nsorted(os.listdir(directory)),\nconfig.VERSIONING_STARTS_FROM,\n)\nif util.is_valid_filename(directory, migration_name)\n]\nelse:\nmigrations: typing.Dict[int, domain_migration.Migration] = {}\nfor migration_name in sorted(os.listdir(directory)):\nif not util.is_valid_filename(directory, migration_name):\ncontinue\nmodule = util.get_module(directory, migration_name)\ntry:\nmigration_version = module.version\nexcept AttributeError:\nraise ImportError(\nf\"Migration {migration_name} in non-strict mode must have \"\nf\"'version' variable.\"\n)\nmigrations[migration_version] = self.get_migration(\nmigration_name,\nmigration_version,\n)\nif (start := config.VERSIONING_STARTS_FROM) not in migrations:\n# ...\nraise ValueError(f\"Versioning starts from {start}.\")\nreturn [migrations[key] for key in sorted(migrations.keys())]\ndef create_migration_file_template(\nself,\nmigration_filename: str,\nmigration_version: typing.Optional[int] = None,\n) -&gt; None:\nmigrations = self.get_migrations()\nif migration_version is None:\nmigration_version = len(migrations) + 1\nif self._session.has_migration_with_version(migration_version):\nraise ValueError(f\"Migration with version {migration_version} already exist.\")\nif abs(len(migrations) - migration_version) &gt; 1:\nraise ValueError(\nf\"Versions of migrations must be consistent: the next version \"\nf\"must be {len(migrations) + 1!r}, but {migration_version!r} received.\"\n)\nfilename_strategy = self._session.session_file_naming_strategy\nif self._session.uses_strict_file_naming:\nmigration_filename = filename_strategy.transform_migration_filename(\nmigration_filename,\nmigration_version,\n)\nif not migration_filename.endswith(\".py\"):\nmigration_filename += \".py\"\nwith open(\nos.path.join(\nself._session.session_scripts_dir,\nmigration_filename,\n),\n\"w\",\n) as file:\nfile.write(\nmigration_file_template.safe_substitute(\nversion=migration_version,\nupgrade_commands=[],\ndowngrade_commands=[],\n)\n)\nreturn None\n</code></pre>"},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.MigrationService.__init__","title":"<code>__init__(app_session)</code>","text":"Source code in <code>mongorunway\\application\\services\\migration_service.py</code> <pre><code>def __init__(self, app_session: session.MigrationSession) -&gt; None:\nself._session = app_session\n</code></pre>"},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.MigrationService.create_migration_file_template","title":"<code>create_migration_file_template(migration_filename, migration_version=None)</code>","text":"Source code in <code>mongorunway\\application\\services\\migration_service.py</code> <pre><code>def create_migration_file_template(\nself,\nmigration_filename: str,\nmigration_version: typing.Optional[int] = None,\n) -&gt; None:\nmigrations = self.get_migrations()\nif migration_version is None:\nmigration_version = len(migrations) + 1\nif self._session.has_migration_with_version(migration_version):\nraise ValueError(f\"Migration with version {migration_version} already exist.\")\nif abs(len(migrations) - migration_version) &gt; 1:\nraise ValueError(\nf\"Versions of migrations must be consistent: the next version \"\nf\"must be {len(migrations) + 1!r}, but {migration_version!r} received.\"\n)\nfilename_strategy = self._session.session_file_naming_strategy\nif self._session.uses_strict_file_naming:\nmigration_filename = filename_strategy.transform_migration_filename(\nmigration_filename,\nmigration_version,\n)\nif not migration_filename.endswith(\".py\"):\nmigration_filename += \".py\"\nwith open(\nos.path.join(\nself._session.session_scripts_dir,\nmigration_filename,\n),\n\"w\",\n) as file:\nfile.write(\nmigration_file_template.safe_substitute(\nversion=migration_version,\nupgrade_commands=[],\ndowngrade_commands=[],\n)\n)\nreturn None\n</code></pre>"},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.MigrationService.get_migration","title":"<code>get_migration(migration_name, migration_version)</code>","text":"Source code in <code>mongorunway\\application\\services\\migration_service.py</code> <pre><code>def get_migration(\nself,\nmigration_name: str,\nmigration_version: int,\n) -&gt; domain_migration.Migration:\nif self._session.uses_strict_file_naming:\nstrategy = self._session.session_file_naming_strategy\nmigration_name = strategy.transform_migration_filename(\nmigration_name,\nmigration_version,\n)\nmodule = util.get_module(self._session.session_scripts_dir, migration_name)\nmigration_module = domain_module.MigrationBusinessModule(module)\nmodel = self._session.get_migration_model_by_version(module.version)\nmigration = domain_migration.Migration(\nname=migration_module.get_name(),\nversion=module.version,\ndescription=migration_module.description,\nchecksum=checksum_service.calculate_migration_checksum(migration_module),\ndowngrade_process=migration_module.downgrade_process,\nupgrade_process=migration_module.upgrade_process,\nis_applied=False if model is None else model.is_applied,\n)\nreturn migration\n</code></pre>"},{"location":"docs/application/services/migration_service/#mongorunway.application.services.migration_service.MigrationService.get_migrations","title":"<code>get_migrations()</code>","text":"Source code in <code>mongorunway\\application\\services\\migration_service.py</code> <pre><code>@typing.no_type_check\ndef get_migrations(self) -&gt; typing.Sequence[domain_migration.Migration]:\nfilename_strategy = self._session.session_file_naming_strategy\ndirectory = self._session.session_scripts_dir\nif self._session.uses_strict_file_naming:\n# All migrations are in the correct order by name.\nreturn [\nself.get_migration(\nfilename_strategy.transform_migration_filename(migration_name, position),\nposition,\n)\nfor position, migration_name in enumerate(\nsorted(os.listdir(directory)),\nconfig.VERSIONING_STARTS_FROM,\n)\nif util.is_valid_filename(directory, migration_name)\n]\nelse:\nmigrations: typing.Dict[int, domain_migration.Migration] = {}\nfor migration_name in sorted(os.listdir(directory)):\nif not util.is_valid_filename(directory, migration_name):\ncontinue\nmodule = util.get_module(directory, migration_name)\ntry:\nmigration_version = module.version\nexcept AttributeError:\nraise ImportError(\nf\"Migration {migration_name} in non-strict mode must have \"\nf\"'version' variable.\"\n)\nmigrations[migration_version] = self.get_migration(\nmigration_name,\nmigration_version,\n)\nif (start := config.VERSIONING_STARTS_FROM) not in migrations:\n# ...\nraise ValueError(f\"Versioning starts from {start}.\")\nreturn [migrations[key] for key in sorted(migrations.keys())]\n</code></pre>"},{"location":"docs/application/services/status_service/","title":"Status service","text":""},{"location":"docs/application/services/status_service/#mongorunway.application.services.status_service","title":"<code>mongorunway.application.services.status_service</code>","text":""},{"location":"docs/application/services/status_service/#mongorunway.application.services.status_service.__all__","title":"<code>__all__: typing.Sequence[str] = ('check_if_all_pushed_successfully')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/status_service/#mongorunway.application.services.status_service.check_if_all_pushed_successfully","title":"<code>check_if_all_pushed_successfully(application, *, depth=-1)</code>","text":"Source code in <code>mongorunway\\application\\services\\status_service.py</code> <pre><code>def check_if_all_pushed_successfully(\napplication: applications.MigrationApp,\n*,\ndepth: int = -1,\n) -&gt; bool:\nservice = migration_service.MigrationService(application.session)\ndirectory_state = service.get_migrations()\nif not directory_state:\nraise ValueError(\"Migration files does not exist.\")\napplied_state = application.session.get_migration_models_by_flag(is_applied=True)\nif not applied_state:\nraise ValueError(\"There are currently no applied migrations.\")\nif depth &gt; 0:\nif depth &gt; (dir_length := len(directory_state)):\nraise ValueError(\nf\"Depth ({depth}) cannot be more than migration files count ({dir_length}).\"\n)\nreturn len(directory_state[:depth]) == len(applied_state[:depth])\nreturn len(directory_state) == len(applied_state)\n</code></pre>"},{"location":"docs/application/services/validation_service/","title":"Validation service","text":""},{"location":"docs/application/services/validation_service/#mongorunway.application.services.validation_service","title":"<code>mongorunway.application.services.validation_service</code>","text":""},{"location":"docs/application/services/validation_service/#mongorunway.application.services.validation_service.__all__","title":"<code>__all__: typing.Sequence[str] = ('validate_migration_process', 'validate_rule_dependencies_recursive')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/validation_service/#mongorunway.application.services.validation_service.validate_migration_process","title":"<code>validate_migration_process(migration_process, ctx)</code>","text":"Source code in <code>mongorunway\\application\\services\\validation_service.py</code> <pre><code>def validate_migration_process(\nmigration_process: domain_migration.MigrationProcess,\nctx: domain_context.MigrationContext,\n) -&gt; None:\nif migration_process.has_rules():\n_LOGGER.info(\n\"Starting validation of migration process with version %s...\",\nmigration_process.migration_version,\n)\nfor rule in migration_process.rules:\nif not rule.is_independent():\nvalidate_rule_dependencies_recursive(\nctx=ctx,\ndepends_on=rule.depends_on,\n)\nif rule.check_is_broken(ctx):\n_LOGGER.error(\"%s rule failed, raising...\", rule.name)\nraise domain_exception.MigrationBusinessRuleBrokenError(rule)\n_LOGGER.info(\"%s rule successfully passed.\", rule.name)\n</code></pre>"},{"location":"docs/application/services/validation_service/#mongorunway.application.services.validation_service.validate_rule_dependencies_recursive","title":"<code>validate_rule_dependencies_recursive(depends_on, ctx)</code>","text":"Source code in <code>mongorunway\\application\\services\\validation_service.py</code> <pre><code>def validate_rule_dependencies_recursive(\ndepends_on: typing.Sequence[domain_rule.MigrationBusinessRule],\nctx: domain_context.MigrationContext,\n) -&gt; None:\nfor rule in depends_on:\nif rule.check_is_broken(ctx):\n_LOGGER.error(\"%s rule failed, raising...\", rule.name)\nraise domain_exception.MigrationBusinessRuleBrokenError(rule)\n_LOGGER.info(\"%s rule successfully passed.\", rule.name)\nif rule.is_independent():\ncontinue\nvalidate_rule_dependencies_recursive(\nctx=ctx,\ndepends_on=rule.depends_on,\n)\n</code></pre>"},{"location":"docs/application/services/versioning_service/","title":"Versioning service","text":""},{"location":"docs/application/services/versioning_service/#mongorunway.application.services.versioning_service","title":"<code>mongorunway.application.services.versioning_service</code>","text":""},{"location":"docs/application/services/versioning_service/#mongorunway.application.services.versioning_service.__all__","title":"<code>__all__: typing.Sequence[str] = ('get_previous_migration_version')</code>  <code>module-attribute</code>","text":""},{"location":"docs/application/services/versioning_service/#mongorunway.application.services.versioning_service.get_previous_migration_version","title":"<code>get_previous_migration_version(migration)</code>","text":"Source code in <code>mongorunway\\application\\services\\versioning_service.py</code> <pre><code>def get_previous_migration_version(\nmigration: typing.Union[domain_migration.Migration, domain_migration.MigrationReadModel], /\n) -&gt; typing.Optional[int]:\nreturn (migration.version - 1) or None\n</code></pre>"},{"location":"docs/domain/migration/","title":"Migration","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration","title":"<code>mongorunway.domain.migration</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.__all__","title":"<code>__all__: typing.Sequence[str] = ('Migration', 'MigrationProcess', 'MigrationReadModel')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration","title":"<code>Migration</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>class Migration:\n__slots__: typing.Sequence[str] = (\n\"_name\",\n\"_version\",\n\"_checksum\",\n\"_is_applied\",\n\"_description\",\n\"_upgrade_process\",\n\"_downgrade_process\",\n)\ndef __init__(\nself,\n*,\nname: str,\nversion: int,\nchecksum: str,\nis_applied: bool,\ndescription: str,\nupgrade_process: MigrationProcess,\ndowngrade_process: MigrationProcess,\n) -&gt; None:\nself._name = name\nself._version = version\nself._checksum = checksum\nself._is_applied = is_applied\nself._description = description\nself._upgrade_process = upgrade_process\nself._downgrade_process = downgrade_process\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef version(self) -&gt; int:\nreturn self._version\n@property\ndef checksum(self) -&gt; str:\nreturn self._checksum\n@property\ndef description(self) -&gt; str:\nreturn self._description\n@property\ndef is_applied(self) -&gt; bool:\nreturn self._is_applied\n@property\ndef upgrade_process(self) -&gt; MigrationProcess:\nreturn self._upgrade_process\n@property\ndef downgrade_process(self) -&gt; MigrationProcess:\nreturn self._downgrade_process\ndef set_is_applied(self, value: bool, /) -&gt; None:\nself._is_applied = value\ndef to_dict(self, *, unique: bool = False) -&gt; typing.Dict[str, typing.Any]:\nmapping = {\n\"name\": self.name,\n\"version\": self.version,\n\"checksum\": self.checksum,\n\"is_applied\": self.is_applied,\n\"description\": self.description,\n}\nif unique:\nmapping[\"_id\"] = self.version\nreturn mapping\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_name', '_version', '_checksum', '_is_applied', '_description', '_upgrade_process', '_downgrade_process')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.checksum","title":"<code>checksum: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.description","title":"<code>description: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.downgrade_process","title":"<code>downgrade_process: MigrationProcess</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.is_applied","title":"<code>is_applied: bool</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.upgrade_process","title":"<code>upgrade_process: MigrationProcess</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.version","title":"<code>version: int</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.__init__","title":"<code>__init__(*, name, version, checksum, is_applied, description, upgrade_process, downgrade_process)</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def __init__(\nself,\n*,\nname: str,\nversion: int,\nchecksum: str,\nis_applied: bool,\ndescription: str,\nupgrade_process: MigrationProcess,\ndowngrade_process: MigrationProcess,\n) -&gt; None:\nself._name = name\nself._version = version\nself._checksum = checksum\nself._is_applied = is_applied\nself._description = description\nself._upgrade_process = upgrade_process\nself._downgrade_process = downgrade_process\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.set_is_applied","title":"<code>set_is_applied(value)</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def set_is_applied(self, value: bool, /) -&gt; None:\nself._is_applied = value\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.Migration.to_dict","title":"<code>to_dict(*, unique=False)</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def to_dict(self, *, unique: bool = False) -&gt; typing.Dict[str, typing.Any]:\nmapping = {\n\"name\": self.name,\n\"version\": self.version,\n\"checksum\": self.checksum,\n\"is_applied\": self.is_applied,\n\"description\": self.description,\n}\nif unique:\nmapping[\"_id\"] = self.version\nreturn mapping\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess","title":"<code>MigrationProcess</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>class MigrationProcess:\ndef __init__(\nself,\ncommands: domain_command.AnyCommandSequence,\nmigration_version: int,\nname: str,\n) -&gt; None:\nself._rules: domain_rule.RuleSequence = []\nself._name = name\nself._commands = commands\nself._migration_version = migration_version\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef commands(self) -&gt; domain_command.AnyCommandSequence:\nreturn self._commands\n@property\ndef migration_version(self) -&gt; int:\nreturn self._migration_version\n@property\ndef rules(self) -&gt; domain_rule.RuleSequence:\nreturn self._rules\ndef has_rules(self) -&gt; bool:\nreturn bool(self._rules)\ndef add_rule(self: _ProcessT, rule: domain_rule.MigrationBusinessRule, /) -&gt; _ProcessT:\nself._rules.append(rule)\nreturn self\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.commands","title":"<code>commands: domain_command.AnyCommandSequence</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.migration_version","title":"<code>migration_version: int</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.rules","title":"<code>rules: domain_rule.RuleSequence</code>  <code>property</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.__init__","title":"<code>__init__(commands, migration_version, name)</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def __init__(\nself,\ncommands: domain_command.AnyCommandSequence,\nmigration_version: int,\nname: str,\n) -&gt; None:\nself._rules: domain_rule.RuleSequence = []\nself._name = name\nself._commands = commands\nself._migration_version = migration_version\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.add_rule","title":"<code>add_rule(rule)</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def add_rule(self: _ProcessT, rule: domain_rule.MigrationBusinessRule, /) -&gt; _ProcessT:\nself._rules.append(rule)\nreturn self\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationProcess.has_rules","title":"<code>has_rules()</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>def has_rules(self) -&gt; bool:\nreturn bool(self._rules)\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel","title":"<code>MigrationReadModel</code>  <code>dataclass</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>@dataclasses.dataclass\nclass MigrationReadModel:\nname: str\nversion: int\nchecksum: str\ndescription: str\nis_applied: bool\n@classmethod\ndef from_dict(cls, mapping: typing.MutableMapping[str, typing.Any], /) -&gt; MigrationReadModel:\nmapping.pop(\"_id\", None)  # For mongo records\nreturn cls(**mapping)\n@classmethod\ndef from_migration(cls, migration: Migration, /) -&gt; MigrationReadModel:\nreturn cls(\nname=migration.name,\nversion=migration.version,\nchecksum=migration.checksum,\ndescription=migration.description,\nis_applied=migration.is_applied,\n)\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.checksum","title":"<code>checksum: str</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.description","title":"<code>description: str</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.is_applied","title":"<code>is_applied: bool</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.version","title":"<code>version: int</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.from_dict","title":"<code>from_dict(mapping)</code>  <code>classmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>@classmethod\ndef from_dict(cls, mapping: typing.MutableMapping[str, typing.Any], /) -&gt; MigrationReadModel:\nmapping.pop(\"_id\", None)  # For mongo records\nreturn cls(**mapping)\n</code></pre>"},{"location":"docs/domain/migration/#mongorunway.domain.migration.MigrationReadModel.from_migration","title":"<code>from_migration(migration)</code>  <code>classmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration.py</code> <pre><code>@classmethod\ndef from_migration(cls, migration: Migration, /) -&gt; MigrationReadModel:\nreturn cls(\nname=migration.name,\nversion=migration.version,\nchecksum=migration.checksum,\ndescription=migration.description,\nis_applied=migration.is_applied,\n)\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/","title":"Migration auditlog entry","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry","title":"<code>mongorunway.domain.migration_auditlog_entry</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationAuditlogEntry')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry","title":"<code>MigrationAuditlogEntry</code>  <code>dataclass</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>@dataclasses.dataclass\nclass MigrationAuditlogEntry:\nsession_id: bson.Binary\ntransaction_name: str\nmigration_read_model: domain_migration.MigrationReadModel\ndate_fmt: str\ndate: datetime.datetime = dataclasses.field(default_factory=datetime.datetime.utcnow)\nexc_name: typing.Optional[str] = None\nexc_message: typing.Optional[str] = None\n@classmethod\ndef from_dict(\ncls, mapping: typing.MutableMapping[str, typing.Any], /\n) -&gt; MigrationAuditlogEntry:\nmapping.pop(\"_id\", None)  # For mongo records\nreturn cls(**mapping)\ndef is_failed(self) -&gt; bool:\nreturn self.exc_name is not None or self.exc_message is not None\ndef with_error(self: _SelfT, exc: BaseException, /) -&gt; _SelfT:\nself.exc_name = type(exc).__name__\nself.exc_message = str(exc)\nreturn self\ndef with_timezone(self: _SelfT, timezone: str) -&gt; _SelfT:\nif timezone != \"UTC\":\n# Default time is utc\ntry:\nself.date = self.date.astimezone(zoneinfo.ZoneInfo(timezone))\nexcept zoneinfo.ZoneInfoNotFoundError as exc:\nraise ModuleNotFoundError(\n\"'tzdata' module must be installed to use timezones in auditlog journals.\"\n) from exc\nreturn self\ndef format_date(self) -&gt; str:\nreturn self.date.strftime(self.date_fmt)\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.date","title":"<code>date: datetime.datetime = dataclasses.field(default_factory=datetime.datetime.utcnow)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.date_fmt","title":"<code>date_fmt: str</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.exc_message","title":"<code>exc_message: typing.Optional[str] = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.exc_name","title":"<code>exc_name: typing.Optional[str] = None</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.migration_read_model","title":"<code>migration_read_model: domain_migration.MigrationReadModel</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.session_id","title":"<code>session_id: bson.Binary</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.transaction_name","title":"<code>transaction_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.format_date","title":"<code>format_date()</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>def format_date(self) -&gt; str:\nreturn self.date.strftime(self.date_fmt)\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.from_dict","title":"<code>from_dict(mapping)</code>  <code>classmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>@classmethod\ndef from_dict(\ncls, mapping: typing.MutableMapping[str, typing.Any], /\n) -&gt; MigrationAuditlogEntry:\nmapping.pop(\"_id\", None)  # For mongo records\nreturn cls(**mapping)\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.is_failed","title":"<code>is_failed()</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>def is_failed(self) -&gt; bool:\nreturn self.exc_name is not None or self.exc_message is not None\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.with_error","title":"<code>with_error(exc)</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>def with_error(self: _SelfT, exc: BaseException, /) -&gt; _SelfT:\nself.exc_name = type(exc).__name__\nself.exc_message = str(exc)\nreturn self\n</code></pre>"},{"location":"docs/domain/migration_auditlog_entry/#mongorunway.domain.migration_auditlog_entry.MigrationAuditlogEntry.with_timezone","title":"<code>with_timezone(timezone)</code>","text":"Source code in <code>mongorunway\\domain\\migration_auditlog_entry.py</code> <pre><code>def with_timezone(self: _SelfT, timezone: str) -&gt; _SelfT:\nif timezone != \"UTC\":\n# Default time is utc\ntry:\nself.date = self.date.astimezone(zoneinfo.ZoneInfo(timezone))\nexcept zoneinfo.ZoneInfoNotFoundError as exc:\nraise ModuleNotFoundError(\n\"'tzdata' module must be installed to use timezones in auditlog journals.\"\n) from exc\nreturn self\n</code></pre>"},{"location":"docs/domain/migration_business_module/","title":"Migration business module","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module","title":"<code>mongorunway.domain.migration_business_module</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationBusinessModule')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule","title":"<code>MigrationBusinessModule</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_module.py</code> <pre><code>class MigrationBusinessModule:\n__slots__: typing.Sequence[str] = (\n\"_module\",\n\"_upgrade_process\",\n\"_downgrade_process\",\n)\ndef __init__(self, module: types.ModuleType, /) -&gt; None:\nself._module = module\nself._upgrade_process = self._get_business_process(\"upgrade\")\nself._downgrade_process = self._get_business_process(\"downgrade\")\n@property\ndef location(self) -&gt; str:\nreturn self._module.__file__ or \"\"\n@property\ndef description(self) -&gt; str:\nreturn self._module.__doc__ or \"\"\n@property\ndef version(self) -&gt; int:\nreturn typing.cast(int, self._module.version)\n@property\ndef upgrade_process(self) -&gt; domain_migration.MigrationProcess:\nreturn self._upgrade_process\n@property\ndef downgrade_process(self) -&gt; domain_migration.MigrationProcess:\nreturn self._downgrade_process\ndef get_name(self) -&gt; str:\n*_, migration_name = self._module.__name__.split(\".\")\nreturn migration_name.strip()\ndef _get_business_process(self, process_name: str, /) -&gt; domain_migration.MigrationProcess:\nprocess = getattr(self._module, process_name, None)\nif process is None:\nraise ValueError(\nf\"Can't find {process_name!r} process in {self.get_name()!r} migration.\"\n)\nreturn process\n</code></pre>"},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_module', '_upgrade_process', '_downgrade_process')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.description","title":"<code>description: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.downgrade_process","title":"<code>downgrade_process: domain_migration.MigrationProcess</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.location","title":"<code>location: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.upgrade_process","title":"<code>upgrade_process: domain_migration.MigrationProcess</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.version","title":"<code>version: int</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.__init__","title":"<code>__init__(module)</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_module.py</code> <pre><code>def __init__(self, module: types.ModuleType, /) -&gt; None:\nself._module = module\nself._upgrade_process = self._get_business_process(\"upgrade\")\nself._downgrade_process = self._get_business_process(\"downgrade\")\n</code></pre>"},{"location":"docs/domain/migration_business_module/#mongorunway.domain.migration_business_module.MigrationBusinessModule.get_name","title":"<code>get_name()</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_module.py</code> <pre><code>def get_name(self) -&gt; str:\n*_, migration_name = self._module.__name__.split(\".\")\nreturn migration_name.strip()\n</code></pre>"},{"location":"docs/domain/migration_business_rule/","title":"Migration business rule","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule","title":"<code>mongorunway.domain.migration_business_rule</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.RuleSequence","title":"<code>RuleSequence: typing.TypeAlias = typing.MutableSequence['MigrationBusinessRule']</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationBusinessRule', 'AbstractMigrationBusinessRule')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule","title":"<code>AbstractMigrationBusinessRule</code>","text":"<p>         Bases: <code>MigrationBusinessRule</code>, <code>abc.ABC</code></p> Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>class AbstractMigrationBusinessRule(MigrationBusinessRule, abc.ABC):\ndef __init__(self, depends_on: typing.Sequence[MigrationBusinessRule] = ()) -&gt; None:\nself._depends_on = depends_on\n@property\ndef name(self) -&gt; str:\nreturn self.__class__.__name__\n@property\ndef depends_on(self) -&gt; typing.Sequence[MigrationBusinessRule]:\nreturn self._depends_on\ndef is_independent(self) -&gt; bool:\nreturn not self._depends_on\ndef render_broken_rule(self) -&gt; str:\nreturn f\"Business rule {self.name} is broken.\"\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule.depends_on","title":"<code>depends_on: typing.Sequence[MigrationBusinessRule]</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule.__init__","title":"<code>__init__(depends_on=())</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>def __init__(self, depends_on: typing.Sequence[MigrationBusinessRule] = ()) -&gt; None:\nself._depends_on = depends_on\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule.is_independent","title":"<code>is_independent()</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>def is_independent(self) -&gt; bool:\nreturn not self._depends_on\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.AbstractMigrationBusinessRule.render_broken_rule","title":"<code>render_broken_rule()</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>def render_broken_rule(self) -&gt; str:\nreturn f\"Business rule {self.name} is broken.\"\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule","title":"<code>MigrationBusinessRule</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>class MigrationBusinessRule(abc.ABC):\n__slots__ = ()\n@property\n@abc.abstractmethod\ndef name(self) -&gt; str:\n...\n@property\n@abc.abstractmethod\ndef depends_on(self) -&gt; typing.Sequence[MigrationBusinessRule]:\n...\n@abc.abstractmethod\ndef is_independent(self) -&gt; bool:\n...\n@abc.abstractmethod\ndef check_is_broken(self, ctx: domain_context.MigrationContext) -&gt; bool:\n...\n@abc.abstractmethod\ndef render_broken_rule(self) -&gt; str:\n...\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.__slots__","title":"<code>__slots__ = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.depends_on","title":"<code>depends_on: typing.Sequence[MigrationBusinessRule]</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.name","title":"<code>name: str</code>  <code>property</code> <code>abstractmethod</code>","text":""},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.check_is_broken","title":"<code>check_is_broken(ctx)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>@abc.abstractmethod\ndef check_is_broken(self, ctx: domain_context.MigrationContext) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.is_independent","title":"<code>is_independent()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>@abc.abstractmethod\ndef is_independent(self) -&gt; bool:\n...\n</code></pre>"},{"location":"docs/domain/migration_business_rule/#mongorunway.domain.migration_business_rule.MigrationBusinessRule.render_broken_rule","title":"<code>render_broken_rule()</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_business_rule.py</code> <pre><code>@abc.abstractmethod\ndef render_broken_rule(self) -&gt; str:\n...\n</code></pre>"},{"location":"docs/domain/migration_command/","title":"Migration command","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command","title":"<code>mongorunway.domain.migration_command</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.AnyCommand","title":"<code>AnyCommand: typing.TypeAlias = 'MigrationCommand[typing.Any]'</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.AnyCommandSequence","title":"<code>AnyCommandSequence: typing.TypeAlias = typing.Sequence[AnyCommand]</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationCommand', 'AnyCommandSequence', 'AnyCommand')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.MigrationCommand","title":"<code>MigrationCommand</code>","text":"<p>         Bases: <code>typing.Generic[_CallbackT_co]</code>, <code>abc.ABC</code></p> Source code in <code>mongorunway\\domain\\migration_command.py</code> <pre><code>class MigrationCommand(typing.Generic[_CallbackT_co], abc.ABC):\n__slots__ = ()\n@property\ndef name(self) -&gt; str:\nreturn self.__class__.__name__\n@abc.abstractmethod\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; _CallbackT_co:\n...\n</code></pre>"},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.MigrationCommand.__slots__","title":"<code>__slots__ = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.MigrationCommand.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_command/#mongorunway.domain.migration_command.MigrationCommand.execute","title":"<code>execute(ctx)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_command.py</code> <pre><code>@abc.abstractmethod\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; _CallbackT_co:\n...\n</code></pre>"},{"location":"docs/domain/migration_context/","title":"Migration context","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context","title":"<code>mongorunway.domain.migration_context</code>","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationContext')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.MigrationContext","title":"<code>MigrationContext</code>","text":"Source code in <code>mongorunway\\domain\\migration_context.py</code> <pre><code>@attr.define(frozen=True, repr=True)\nclass MigrationContext:\nmongorunway_session_id: str = attr.field(repr=True)\nmongodb_session_id: str = attr.field(repr=True)\nclient: mongo.Client = attr.field(repr=False)\ndatabase: mongo.Database = attr.field(repr=False)\n</code></pre>"},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.MigrationContext.client","title":"<code>client: mongo.Client = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.MigrationContext.database","title":"<code>database: mongo.Database = attr.field(repr=False)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.MigrationContext.mongodb_session_id","title":"<code>mongodb_session_id: str = attr.field(repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_context/#mongorunway.domain.migration_context.MigrationContext.mongorunway_session_id","title":"<code>mongorunway_session_id: str = attr.field(repr=True)</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_event/","title":"Migration event","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event","title":"<code>mongorunway.domain.migration_event</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandler","title":"<code>EventHandler: typing.TypeAlias = typing.Callable[['MigrationEvent'], None]</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerProxyOr","title":"<code>EventHandlerProxyOr: typing.TypeAlias = typing.Union[EventHandlerT, 'EventHandlerProxy']</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerT","title":"<code>EventHandlerT = typing.TypeVar('EventHandlerT', bound=EventHandler)</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.__all__","title":"<code>__all__: typing.Sequence[str] = ('EventHandler', 'EventHandlerProxy', 'EventHandlerProxyOr', 'EventHandlerT', 'StartingEvent', 'ClosingEvent', 'ApplicationEvent', 'MigrationEvent')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.ApplicationEvent","title":"<code>ApplicationEvent</code>","text":"<p>         Bases: <code>MigrationEvent</code></p> Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>@attr.define\nclass ApplicationEvent(MigrationEvent):\napplication: applications.MigrationApp = attr.field()\n</code></pre>"},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.ApplicationEvent.application","title":"<code>application: applications.MigrationApp = attr.field()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.ClosingEvent","title":"<code>ClosingEvent</code>","text":"<p>         Bases: <code>ApplicationEvent</code></p> Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>@attr.define\nclass ClosingEvent(ApplicationEvent):\npass\n</code></pre>"},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerProxy","title":"<code>EventHandlerProxy</code>","text":"Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>@attr.define(eq=True, order=True, hash=True)\nclass EventHandlerProxy:\n_priority: int = attr.field(\neq=True,\nhash=True,\nalias=\"priority\",\n)  # type: ignore[call-overload]\n_handler: EventHandler = attr.field(\neq=False,\nhash=False,\nalias=\"handler\",\n)  # type: ignore[call-overload]\n@property\ndef priority(self) -&gt; int:\nreturn self._priority\n@property\ndef handler(self) -&gt; EventHandler:\nreturn self._handler\ndef __call__(self, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself._handler(*args, **kwargs)\n</code></pre>"},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerProxy.handler","title":"<code>handler: EventHandler</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerProxy.priority","title":"<code>priority: int</code>  <code>property</code>","text":""},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.EventHandlerProxy.__call__","title":"<code>__call__(*args, **kwargs)</code>","text":"Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>def __call__(self, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself._handler(*args, **kwargs)\n</code></pre>"},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.MigrationEvent","title":"<code>MigrationEvent</code>","text":"Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>@attr.define\nclass MigrationEvent:\npass\n</code></pre>"},{"location":"docs/domain/migration_event/#mongorunway.domain.migration_event.StartingEvent","title":"<code>StartingEvent</code>","text":"<p>         Bases: <code>ApplicationEvent</code></p> Source code in <code>mongorunway\\domain\\migration_event.py</code> <pre><code>@attr.define\nclass StartingEvent(ApplicationEvent):\npass\n</code></pre>"},{"location":"docs/domain/migration_event_manager/","title":"Migration event manager","text":""},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager","title":"<code>mongorunway.domain.migration_event_manager</code>","text":""},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationEventManager')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager","title":"<code>MigrationEventManager</code>","text":"<p>         Bases: <code>abc.ABC</code></p> Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>class MigrationEventManager(abc.ABC):\n__slots__: typing.Sequence[str] = ()\n@abc.abstractmethod\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unsubscribe_events(self, event: typing.Type[domain_event.MigrationEvent]) -&gt; None:\n...\n@abc.abstractmethod\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\n...\n@abc.abstractmethod\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\n...\n@abc.abstractmethod\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n@abc.abstractmethod\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\n...\n@abc.abstractmethod\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.dispatch","title":"<code>dispatch(event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef dispatch(self, event: domain_event.MigrationEvent) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.get_event_handlers_for","title":"<code>get_event_handlers_for(event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef get_event_handlers_for(\nself,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.MutableSequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.listen","title":"<code>listen(*events)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef listen(\nself,\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; typing.Callable[\n[domain_event.EventHandlerProxyOr[domain_event.EventHandlerT]],\ndomain_event.EventHandlerProxyOr[domain_event.EventHandlerT],\n]:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.prioritize_handler","title":"<code>prioritize_handler(handler, event, priority)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef prioritize_handler(\nself,\nhandler: domain_event.EventHandler,\nevent: typing.Type[domain_event.MigrationEvent],\npriority: int,\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.subscribe_event_handler","title":"<code>subscribe_event_handler(handler, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef subscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.subscribe_events","title":"<code>subscribe_events(handler, *events)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef subscribe_events(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\n*events: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.unprioritize_handler_proxy","title":"<code>unprioritize_handler_proxy(handler_proxy, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef unprioritize_handler_proxy(\nself,\nhandler_proxy: domain_event.EventHandlerProxy,\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.unsubscribe_event_handler","title":"<code>unsubscribe_event_handler(handler, event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef unsubscribe_event_handler(\nself,\nhandler: domain_event.EventHandlerProxyOr[domain_event.EventHandler],\nevent: typing.Type[domain_event.MigrationEvent],\n) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_event_manager/#mongorunway.domain.migration_event_manager.MigrationEventManager.unsubscribe_events","title":"<code>unsubscribe_events(event)</code>  <code>abstractmethod</code>","text":"Source code in <code>mongorunway\\domain\\migration_event_manager.py</code> <pre><code>@abc.abstractmethod\ndef unsubscribe_events(self, event: typing.Type[domain_event.MigrationEvent]) -&gt; None:\n...\n</code></pre>"},{"location":"docs/domain/migration_exception/","title":"Migration exception","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception","title":"<code>mongorunway.domain.migration_exception</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.__all__","title":"<code>__all__: typing.Sequence[str] = ('MigrationError', 'MigrationFailedError', 'MigrationTransactionFailedError', 'NothingToUpgradeError', 'NothingToDowngradeError', 'MigrationFilesChangedError', 'MigrationFileChangedError')</code>  <code>module-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationBusinessRuleBrokenError","title":"<code>MigrationBusinessRuleBrokenError</code>","text":"<p>         Bases: <code>Exception</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationBusinessRuleBrokenError(Exception):\n__slots__ = (\"rule\",)\ndef __init__(self, rule: domain_rule.MigrationBusinessRule) -&gt; None:\nsuper().__init__(rule.render_broken_rule())\nself.rule = rule\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationBusinessRuleBrokenError.__slots__","title":"<code>__slots__ = ('rule')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationBusinessRuleBrokenError.rule","title":"<code>rule = rule</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationBusinessRuleBrokenError.__init__","title":"<code>__init__(rule)</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __init__(self, rule: domain_rule.MigrationBusinessRule) -&gt; None:\nsuper().__init__(rule.render_broken_rule())\nself.rule = rule\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationError","title":"<code>MigrationError</code>","text":"<p>         Bases: <code>Exception</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationError(Exception):\n__slots__: typing.Sequence[str] = ()\npass\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFailedError","title":"<code>MigrationFailedError</code>","text":"<p>         Bases: <code>MigrationError</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationFailedError(MigrationError):\n__slots__: typing.Sequence[str] = ()\npass\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFailedError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFileChangedError","title":"<code>MigrationFileChangedError</code>","text":"<p>         Bases: <code>BaseException</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationFileChangedError(BaseException):\n__slots__: typing.Sequence[str] = (\n\"failed_migration_name\",\n\"failed_migration_version\",\n)\ndef __init__(self, migration_name: str, migration_version: int) -&gt; None:\nself.failed_migration_name = migration_name\nself.failed_migration_version = migration_version\nsuper().__init__(\nf\"Migration {migration_name!r} with version {migration_version!r} is changed.\"\n)\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFileChangedError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('failed_migration_name', 'failed_migration_version')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFileChangedError.failed_migration_name","title":"<code>failed_migration_name = migration_name</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFileChangedError.failed_migration_version","title":"<code>failed_migration_version = migration_version</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFileChangedError.__init__","title":"<code>__init__(migration_name, migration_version)</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __init__(self, migration_name: str, migration_version: int) -&gt; None:\nself.failed_migration_name = migration_name\nself.failed_migration_version = migration_version\nsuper().__init__(\nf\"Migration {migration_name!r} with version {migration_version!r} is changed.\"\n)\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFilesChangedError","title":"<code>MigrationFilesChangedError</code>","text":"<p>         Bases: <code>BaseException</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationFilesChangedError(BaseException):\n__slots__: typing.Sequence[str] = (\n\"migration_names\",\n)\ndef __init__(self, *migration_names: str) -&gt; None:\nself.migration_names = migration_names\nsuper().__init__(f\"{migration_names!r} migrations files have been modified.\")\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFilesChangedError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('migration_names')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFilesChangedError.migration_names","title":"<code>migration_names = migration_names</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationFilesChangedError.__init__","title":"<code>__init__(*migration_names)</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __init__(self, *migration_names: str) -&gt; None:\nself.migration_names = migration_names\nsuper().__init__(f\"{migration_names!r} migrations files have been modified.\")\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationTransactionFailedError","title":"<code>MigrationTransactionFailedError</code>","text":"<p>         Bases: <code>MigrationFailedError</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class MigrationTransactionFailedError(MigrationFailedError):\n__slots__: typing.Sequence[str] = (\"failed_migration\",)\ndef __init__(self, migration: domain_migration.Migration, /) -&gt; None:\nself.failed_migration = migration\nsuper().__init__(\nf\"Migration {migration.name!r} with version {migration.version!r} is failed.\"\n)\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationTransactionFailedError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('failed_migration')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationTransactionFailedError.failed_migration","title":"<code>failed_migration = migration</code>  <code>instance-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.MigrationTransactionFailedError.__init__","title":"<code>__init__(migration)</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __init__(self, migration: domain_migration.Migration, /) -&gt; None:\nself.failed_migration = migration\nsuper().__init__(\nf\"Migration {migration.name!r} with version {migration.version!r} is failed.\"\n)\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToDowngradeError","title":"<code>NothingToDowngradeError</code>","text":"<p>         Bases: <code>MigrationFailedError</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class NothingToDowngradeError(MigrationFailedError):\n__slots__: typing.Sequence[str] = ()\ndef __str__(self) -&gt; str:\nreturn \"There are currently no applied migrations.\"\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToDowngradeError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToDowngradeError.__str__","title":"<code>__str__()</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __str__(self) -&gt; str:\nreturn \"There are currently no applied migrations.\"\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToUpgradeError","title":"<code>NothingToUpgradeError</code>","text":"<p>         Bases: <code>MigrationFailedError</code></p> Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>class NothingToUpgradeError(MigrationFailedError):\n__slots__: typing.Sequence[str] = ()\ndef __str__(self) -&gt; str:\nreturn \"There are currently no pending migrations.\"\n</code></pre>"},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToUpgradeError.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/domain/migration_exception/#mongorunway.domain.migration_exception.NothingToUpgradeError.__str__","title":"<code>__str__()</code>","text":"Source code in <code>mongorunway\\domain\\migration_exception.py</code> <pre><code>def __str__(self) -&gt; str:\nreturn \"There are currently no pending migrations.\"\n</code></pre>"},{"location":"docs/examples/custom_commands/","title":"Custom commands case","text":"<p>Mongorunway is not limited to a set of standard commands, and you can create your  own commands as needed. An example of such implementation is provided below.</p>"},{"location":"docs/examples/custom_commands/#step-by-step-configuration-of-the-migration-environment","title":"Step-by-Step Configuration of the Migration Environment","text":"<p>In this section, we will walk through the step-by-step configuration of the migration  environment for the proper functioning of the tool.</p>"},{"location":"docs/examples/custom_commands/#project-structure","title":"Project structure","text":"<pre><code>migrations/\n  &lt;!-- This file is optional and is --&gt;\n&lt;!-- used only for example purposes. --&gt;\n  001_create_abc_collection.py\n\n&lt;!-- You can see the implementation of --&gt;\n&lt;!-- this file below this code block    --&gt;\n  002_attach_abc_collection.py\n\n&lt;!-- In this transit file, it will be convenient for us --&gt;\n&lt;!-- to store our custom component implementations.     --&gt;\n  __init__.py\n  mongorunway.yaml\n</code></pre> <p>Next, we will present and discuss the implementations of the components in this  project structure.</p>"},{"location":"docs/examples/custom_commands/#002_attach_abc_collectionpy","title":"<code>002_attach_abc_collection.py</code>","text":"<pre><code>from __future__ import annotations\nimport typing\nimport mongorunway\nimport migrations\n# Required, used by Mongorunway.\nversion = 2\n@mongorunway.migration\ndef upgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nreturn [\nmigrations.AttachCollectionValidator(\"abc\"),\n]\n@mongorunway.migration\ndef downgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nreturn [\nmigrations.DetachCollectionValidator(\"abc\"),\n]\n</code></pre>"},{"location":"docs/examples/custom_commands/#__init__py","title":"<code>__init__.py</code>","text":"<p>Note</p> <p>If we apply the <code>make_snake_case_global_alias</code> decorator to the commands, passing  the current global scope to it (note that by default, commands are registered in the global scope of the  <code>mongorunway.infrastructure.commands</code> module):</p> <pre><code>@mongorunway.make_snake_case_global_alias(obj=globals())\nclass AttachCollectionValidator(mongorunway.MigrationCommand[None]):\npass\n@mongorunway.make_snake_case_global_alias(obj=globals())\nclass DetachCollectionValidator(mongorunway.MigrationCommand[None]):\npass\n</code></pre> <p>then we can use the commands in the following way: <pre><code>migrations.attach_collection_validator(...)\nmigrations.detach_collection_validator(...)\n</code></pre></p> <pre><code>from __future__ import annotations\nimport logging\nimport typing\nimport mongorunway\nfrom mongorunway.application import ux\n_LOGGER: typing.Final[logging.Logger] = logging.getLogger(__name__)\nawesome_validator: typing.Final[typing.Mapping[str, typing.Any]] = {\n\"$jsonSchema\": {\n\"bsonType\": \"object\",\n\"required\": [\n\"_id\",\n\"char\",\n],\n\"properties\": {\n\"_id\": {\n\"bsonType\": \"int\",\n},\n\"char\": {\n\"bsonType\": \"string\",\n\"minLength\": 1,\n},\n},\n},\n}\nclass AttachCollectionValidator(mongorunway.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\"collection\",)\ndef __init__(self, collection: str) -&gt; None:\nself.collection = collection\ndef execute(self, ctx: mongorunway.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\nvalidator = collection.options().get(\"validator\")\nif validator != awesome_validator:\n_LOGGER.info(\"Undefined validator found, removing...\")\nctx.database.command(\n\"collMod\",\ncollection.name,\nvalidationLevel=ux.ValidationLevel.STRICT,\nvalidationAction=ux.ValidationAction.ERROR,\nvalidator=awesome_validator,\n)\n_LOGGER.info(\n\"Awesome schema validator successfully attached to '%s' collection.\",\ncollection.name,\n)\nclass DetachCollectionValidator(mongorunway.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\"collection\",)\ndef __init__(self, collection: str) -&gt; None:\nself.collection = collection\ndef execute(self, ctx: mongorunway.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\nvalidator = collection.options().get(\"validator\")\n_LOGGER.info(\"Schema validation is disabled, checking for validators...\")\nif validator == awesome_validator:\ncollection.database.command(\n\"collMod\",\ncollection.name,\nvalidator={},\n)\n_LOGGER.info(\n\"Awesome schema validator successfully detached from '%s' collection.\",\ncollection.name,\n)\n</code></pre>"},{"location":"docs/examples/custom_commands/#mongorunwayyaml","title":"<code>mongorunway.yaml</code>","text":"<pre><code>mongorunway:\nfilesystem:\nscripts_dir: migrations\napplications:\ntest:\napp_client:\nhost: localhost\nport: 27017\napp_database: TestDatabase\napp_repository:\ncollection: migrations\n</code></pre>"},{"location":"docs/examples/custom_commands/#use-case","title":"Use Case","text":"<p>In this section, we will consider a specific case of managing migration processes.</p>"},{"location":"docs/examples/custom_commands/#downgrading","title":"Downgrading","text":"<pre><code>&gt; mongorunway downgrade test\n2023-06-11 23:51:40 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-11 23:51:40 - mongorunway.session - INFO - Mongorunway MongoDB context successfully initialized with MongoDB session id (a18804e32b1742dc92bd64b6c09a8e9c)\n2023-06-11 23:51:40 - mongorunway.ui - INFO - test: downgrading waiting migration (#2 -&gt; #1)...\n2023-06-11 23:51:40 - mongorunway.session - INFO - Mongorunway transaction context successfully initialized with Mongorunway session id (6bb50e672a464fd59f7055951fdefabd)\n2023-06-11 23:51:40 - mongorunway.transactions - INFO - Beginning a transaction in MongoDB session (a18804e32b1742dc92bd64b6c09a8e9c) for (downgrade) process.\n2023-06-11 23:51:40 - migrations - INFO - Schema validation is disabled, checking for validators...\n2023-06-11 23:51:40 - migrations - INFO - Awesome schema validator successfully detached from 'abc' collection.\n2023-06-11 23:51:40 - mongorunway.transactions - INFO - DetachCollectionValidatorCommand command successfully applied (1 of 1).\n2023-06-11 23:51:40 - mongorunway.ui - INFO - test: successfully downgraded to (#1).\n===========\nMongorunway\n===========\nVerbose mode enabled.\nSuccessfully downgraded 1 migration(s).\nDowngraded 1 migration(s) in 0.01265406608581543s.\n</code></pre>"},{"location":"docs/examples/custom_commands/#upgrading","title":"Upgrading","text":"<pre><code>&gt; mongorunway upgrade test\n2023-06-11 23:52:00 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-11 23:52:00 - mongorunway.session - INFO - Mongorunway MongoDB context successfully initialized with MongoDB session id (6fd55895572f41428b1b42b971cf757a)\n2023-06-11 23:52:00 - mongorunway.ui - INFO - test: upgrading waiting migration (#1 -&gt; #2)...\n2023-06-11 23:52:00 - mongorunway.session - INFO - Mongorunway transaction context successfully initialized with Mongorunway session id (851165ddab894a07a23dd7eced512dd3)\n2023-06-11 23:52:00 - mongorunway.transactions - INFO - Beginning a transaction in MongoDB session (6fd55895572f41428b1b42b971cf757a) for (upgrade) process.\n2023-06-11 23:52:00 - migrations - INFO - Undefined validator found, removing...\n2023-06-11 23:52:00 - migrations - INFO - Awesome schema validator successfully attached to 'abc' collection.\n2023-06-11 23:52:00 - mongorunway.transactions - INFO - AttachCollectionValidatorCommand command successfully applied (1 of 1).\n2023-06-11 23:52:00 - mongorunway.ui - INFO - test: Successfully upgraded to (#2).\n===========\nMongorunway\n===========\nVerbose mode enabled.\nSuccessfully upgraded 1 migration(s).\nUpgraded 1 migration(s) in 0.0130767822265625s.\n</code></pre>"},{"location":"docs/examples/custom_commands/#verifying","title":"Verifying","text":"<pre><code>&gt; mongorunway version test\n2023-06-11 23:52:13 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nCurrent applied version is 2 (2 of 2)\n</code></pre>"},{"location":"docs/examples/custom_event_handlers/","title":"Custom event handlers case","text":"<p>Mongorunway provides a basic set of handlers located in the  <code>mongorunway.infrastructure.event_handlers</code> module, but you can  also create your own handlers.</p> <p>Event type annotation</p> <p>To create an event handler, you need to specify the event type annotation  in the <code>event</code> parameter to which the handler should be added.</p>"},{"location":"docs/examples/custom_event_handlers/#project-structure","title":"Project structure","text":"<pre><code>project/\n    migrations/\n        __init__.py\n        mongorunway.yaml\n        # Your migration files...\n</code></pre>"},{"location":"docs/examples/custom_event_handlers/#__init__py","title":"<code>__init__.py</code>","text":"<pre><code>import mongorunway\ndef on_app_start(event: mongorunway.StartingEvent) -&gt; None:\nprint(f\"{event.application.name!r} app successfully started.\")\ndef on_app_close(event: mongorunway.ClosingEvent) -&gt; None:\nprint(f\"{event.application.name!r} app successfully closed.\")\n</code></pre>"},{"location":"docs/examples/custom_event_handlers/#mongorunwayyaml","title":"<code>mongorunway.yaml</code>","text":"<pre><code>mongorunway:\nfilesystem:\nscripts_dir: project/migrations\napplications:\ntest:\napp_client:\nhost: localhost\nport: 27017\napp_database: TestDatabase\napp_repository:\ncollection: migrations\napp_events:\nmongorunway.StartingEvent:\n- migrations.on_app_start\nmongorunway.ClosingEvent:\n- migrations.on_app_close\n</code></pre>"},{"location":"docs/examples/custom_event_handlers/#conclusion","title":"Conclusion","text":"<p>Furthermore, upon each application creation, events will be dispatched and their  corresponding handlers will be invoked.</p> <p>Here's an example using the Mongorunway API:</p> <p><code>IN:</code> <pre><code>import mongorunway\napp = mongorunway.create_app(\"test\", raise_on_none=True, verbose_exc=True)\nprint(app.session.get_current_version())\n</code></pre></p> <p><code>OUT:</code> <pre><code>'test' app successfully started.\nNone  # &lt;- Your current version, for example\n2023-06-12 16:38:59 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n'test' app successfully closed.\n</code></pre></p>"},{"location":"docs/examples/custom_repository/","title":"Custom repository case","text":"<p>Mongorunway does not restrict you in choosing a migration repository. If necessary, you  can create your own custom implementations of migration repositories for management.</p>"},{"location":"docs/examples/custom_repository/#project-structure","title":"Project structure","text":"<pre><code>project/\n    migrations/\n        mongorunway.yaml\n    config_readers.py\n    json_repository.py\n    migrations.json\n</code></pre> <p>Next, we will present and discuss the implementations of the components in this  project structure.</p>"},{"location":"docs/examples/custom_repository/#mongorunwayyaml","title":"<code>mongorunway.yaml</code>","text":"<pre><code>mongorunway:\nfilesystem:\nscripts_dir: project/migrations\napplications:\nmyapp:\napp_client:\nhost: localhost\nport: 27017\napp_database: TestDatabase\napp_repository:\njson_filepath: migrations.json\ntype: project.json_repository.JSONRepositoryImpl\nreader: project.config_readers.json_repository_reader\n</code></pre>"},{"location":"docs/examples/custom_repository/#config_readerspy","title":"<code>config_readers.py</code>","text":"<pre><code>from __future__ import annotations\nimport typing\nfrom project import json_repository\ndef json_repository_reader(\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; json_repository.JSONRepositoryImpl:\nreturn json_repository.JSONRepositoryImpl(\njson_filepath=application_data[\"app_repository\"][\"json_filepath\"],\n)\n</code></pre>"},{"location":"docs/examples/custom_repository/#migrationsjson","title":"<code>migrations.json</code>","text":"<pre><code>{}\n</code></pre>"},{"location":"docs/examples/custom_repository/#json_repositorypy","title":"<code>json_repository.py</code>","text":"<pre><code>from __future__ import annotations\nimport json\nimport operator\nimport threading\nimport typing\nfrom mongorunway.application.ports import repository as repository_port\nfrom mongorunway.domain import migration as domain_migration\nclass JSONRepositoryImpl(repository_port.MigrationModelRepository):\ndef __init__(self, json_filepath: str) -&gt; None:\nself._fp = json_filepath\nself._lock = threading.RLock()  # Use reentrant lock to allow nested acquire/release\ndef __len__(self) -&gt; int:\nwith self._lock:\nreturn len(self._get_migrations())\ndef __contains__(self, item: typing.Any, /) -&gt; bool:\nwith self._lock:\nreturn self.has_migration(item)\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\nwith self._lock:\nif hasattr(item, \"version\"):\nitem = item.version\nreturn self._get_migrations().get(item) is not None\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\nwith self._lock:\nreturn self._get_migrations().get(migration_version) is not None\ndef has_migrations(self) -&gt; bool:\nwith self._lock:\nreturn bool(self._get_migrations())\ndef acquire_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\ntry:\nmodel_dict = self._get_migrations()[migration_version]\nexcept KeyError:\nreturn None\nreturn domain_migration.MigrationReadModel.from_dict(model_dict)\ndef acquire_migration_model_by_flag(\nself, is_applied: bool\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\nmigrations = [\nv for v in self._get_migrations().values() if v[\"is_applied\"] is is_applied\n]\nif not migrations:\nreturn None\nmigrations.sort(key=operator.itemgetter(\"version\"))\nif is_applied:\n# LIFO\nmigrations.reverse()\nmodel = domain_migration.MigrationReadModel.from_dict(migrations[0])\nreturn model\ndef acquire_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nwith self._lock:\nmigrations = list(self._get_migrations().values())\nmigrations.sort(key=operator.itemgetter(\"version\"))\nif not ascending_id:\nmigrations.reverse()\nwhile migrations:\ntry:\nschema = migrations.pop(0)\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\ndef acquire_migration_models_by_flag(\nself,\n*,\nis_applied: bool,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nwith self._lock:\nmigrations = list(self._get_migrations().values())\nif is_applied:\nmigrations.reverse()\nwhile migrations:\ntry:\nschema = migrations.pop(0)\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; int:\nwith self._lock:\nwith open(self._fp, \"r+\") as file:\ndata = json.load(file)\ndata.update(\n{migration.version: migration.to_dict(unique=False)},\n)\nfile.seek(0)\njson.dump(data, file)\nreturn migration.version\ndef remove_migration(self, migration_version: int, /) -&gt; int:\nwith self._lock:\nmigrations = self._get_migrations()\nwith open(self._fp, \"w\") as f:\nmigrations.pop(migration_version)\njson.dump(migrations, f)\nreturn migration_version\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; int:\nwith self._lock:\nmigrations = self._get_migrations()\nwith open(self._fp, \"w\") as f:\nmigrations[migration.version][\"is_applied\"] = is_applied\njson.dump(migrations, f)\nreturn migration.version\ndef _get_migrations(self) -&gt; typing.Dict[int, typing.Dict[str, typing.Any]]:\nwith self._lock:\nwith open(self._fp, \"r\", encoding=\"utf-8\") as file:\ndata = file.read()\nif not json.loads(data):\nreturn {}\nmigrations = {int(k): v for k, v in json.loads(data).items()}\nreturn migrations\n</code></pre>"},{"location":"docs/examples/custom_rules/","title":"Custom rules case","text":"<p>Mongorunway also allows users to implement their own business rules, which act as  validators and are invoked before a specific migration process.</p> <p>Info</p> <p>In future versions, there are plans to add an additional method, <code>resolve</code>, to  the business rules interface, which would allow for correcting the collection  schema if the rule is violated.</p> <p>Currently, you can handle this manually.</p>"},{"location":"docs/examples/custom_rules/#project-structure","title":"Project structure","text":"<pre><code>migrations/\n__init__.py\n001_create_collection_with_name_abc.py\n002_add_field_to_abc_collection.py\n</code></pre> <p>Next, we will present and discuss the implementations of the components in this  project structure.</p>"},{"location":"docs/examples/custom_rules/#001_create_collection_with_name_abcpy","title":"<code>001_create_collection_with_name_abc.py</code>","text":"<pre><code>from __future__ import annotations\nimport typing\nimport mongorunway\nimport migrations\n# Required, used by Mongorunway.\nversion = 1\n@mongorunway.migration\ndef upgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nreturn [\nmongorunway.create_collection(\"abc\"),\n]\n# This process will not be executed only if the 'abc' \n# collection has been deleted.\n@mongorunway.migration_with_rule(migrations.CollectionRequired(\"abc\"))\n@mongorunway.migration\ndef downgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nreturn [\nmongorunway.drop_collection(\"abc\"),\n]\n</code></pre>"},{"location":"docs/examples/custom_rules/#002_add_field_to_abc_collectionpy","title":"<code>002_add_field_to_abc_collection.py</code>","text":"<pre><code>from __future__ import annotations\nimport typing\nimport mongorunway\nimport migrations\n# Required, used by Mongorunway.\nversion = 2\n@mongorunway.migration\ndef upgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nr\"\"\"Adds 'field' field to each document of the collection.\"\"\"\nreturn [\nmongorunway.update_many({}, {\"$set\": {\"field\": \"\"}}),\n]\n# This process will not be executed only if the 'abc' \n# collection has been deleted or if any of the documents \n# in the collection lacks a field named 'field'.\n@mongorunway.migration_with_rule(migrations.FieldRequired(field=\"field\", collection=\"abc\"))\n@mongorunway.migration\ndef downgrade() -&gt; typing.Sequence[mongorunway.MigrationCommand]:\nr\"\"\"Removes 'field' field from each document of the collection.\"\"\"\nreturn [\nmongorunway.update_many({}, [{\"$unset\": [\"field\"]}]),\n]\n</code></pre>"},{"location":"docs/examples/custom_rules/#__init__py","title":"<code>__init__.py</code>","text":"<pre><code>from __future__ import annotations\n__all__: typing.Sequence[str] = (\"FiledRequired\", \"CollectionRequired\")\nimport typing\nimport mongorunway\nclass FiledRequired(mongorunway.AbstractMigrationBusinessRule):\ndef __init__(\nself,\ncollection: str,\nfield: str,\n) -&gt; None:\n# Now, before executing the checks of this rule, both\n# `CollectionRequired` and all rules on which `CollectionRequired`\n# depends will be recursively validated.\nsuper().__init__(depends_on=[CollectionRequired(collection=collection)])\nself._field = field\nself._collection = collection\ndef check_is_broken(self, ctx: mongorunway.MigrationContext) -&gt; bool:\nr\"\"\"Checks if all documents have a certain field.\"\"\"\ncollection = ctx.database.get_collection(self._collection)\ndocuments = collection.find({})\ncount = 0\nwhile True:\ntry:\ndocument = documents.next()\nexcept StopIteration:\nif not count:\n# If the collection is empty and no documents have\n# been processed.\nreturn True\n# Otherwise, all documents have been processed successfully,\n# and the rule is not violated.\nreturn False\nif self._field not in document:\n# Checks if a specific field exists in the collection document.\nreturn True\ncount += 1\ndef render_broken_rule(self) -&gt; str:\nreturn (\nsuper().render_broken_rule()\n+ \" \"\n+ f\"There are not documents or document does\"\nf\" \"\nf\"not have '{self._field}' field.\"\n)\nclass CollectionRequired(mongorunway.AbstractMigrationBusinessRule):\ndef __init__(\nself, \ncollection: str, \ndepends_on: typing.Sequence[mongorunway.MigrationBusinessRule] = (),\n) -&gt; None:\nsuper().__init__(depends_on=depends_on)\nself._collection = collection\ndef check_is_broken(self, ctx: mongorunway.MigrationContext) -&gt; bool:\nr\"\"\"Checks if a specific collection exists in the current database.\"\"\"\nreturn self._collection not in ctx.database.list_collection_names()\ndef render_broken_rule(self) -&gt; str:\nreturn (\nsuper().render_broken_rule()\n+ \" \"\n+ f\"Collection {self._collection}' is not created.\"\n)\n</code></pre>"},{"location":"docs/examples/use_api/","title":"Use API case","text":"<p>Mongorunway provides a comprehensive user API, and in this example, we will explore the  usage of its basic functionality. For more detailed information about Mongorunway's features,  you can refer to the <code>API Reference</code> section.</p>"},{"location":"docs/examples/use_api/#in","title":"IN:","text":"<pre><code>import pprint\nimport mongorunway\nfrom mongorunway.application.services import migration_service\nfrom mongorunway.application import use_cases\n# Creating an application with the `raise_on_none` and `verbose_exc`\n# parameters for more detailed debugging.\napp = mongorunway.create_app(\"test\", raise_on_none=True, verbose_exc=True)\n# The application encapsulates all event manager methods.\n@app.listen()\ndef on_app_close(event: mongorunway.ClosingEvent) -&gt; None:\nprint(f\"{event.application.name!r} app successfully closed.\")\n# Create a migration service that interacts with the file system\n# and will be useful for creating a migration template file.\nservice = migration_service.MigrationService(app.session)\n# By default, the status indicator to which no migration has been\n# applied is set to builtins.None. The version count starts from one.\nassert app.session.get_current_version() is None\n# Create a template migration file with the name `my_awesome_migration`.\nservice.create_migration_file_template(\"my_awesome_migration\")\n# The file is not synchronized with the database during creation.\n# To synchronize the file system with the database, we can use the\n# corresponding use case.\nassert len(app.session.get_all_migration_models()) == 0\n# Synchronize the file system with the database.\nuse_cases.refresh(app, verbose_exc=True)\n# Verify that the synchronization was successful and the migration\n# was added to the database.\nassert len(app.session.get_all_migration_models()) == 1\n# Next, we can use the lower-level API (migration application methods) or\n# the higher-level API (use cases). Let's explore the first option.\napp.upgrade_once()\n# Since we have configured the audit log in the configuration, let's check \n# its functionality.\nassert app.session.uses_auditlog\nfor entry in app.session.history():\npprint.pprint(entry)\n</code></pre>"},{"location":"docs/examples/use_api/#out","title":"OUT:","text":"<p><pre><code>MigrationAuditlogEntry(session_id=Binary(b'@\\x96\\x1c\\x93\\xaa\\x83O_\\xb9\\xceO\\xb7y\\xc0R\\x9f', 4),\ntransaction_name='UpgradeTransaction',\nmigration_read_model=MigrationReadModel(name='001_my_awesome_migration',\nversion=1,\nchecksum='76b6a991ca38100583cc75b020da77fc',\ndescription='',\nis_applied=False),\ndate_fmt='%Y-%m-%d %H:%M:%S',\ndate=datetime.datetime(2023, 6, 12, 14, 48, 50, 199000),\nexc_name=None,\nexc_message=None)\n</code></pre> <pre><code>'test' app successfully closed.\n</code></pre></p>"},{"location":"docs/infrastructure/auditlog_journals/","title":"Auditlog journals","text":""},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals","title":"<code>mongorunway.infrastructure.persistence.auditlog_journals</code>","text":""},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.__all__","title":"<code>__all__: typing.Sequence[str] = ('MongoAuditlogJournalImpl')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl","title":"<code>MongoAuditlogJournalImpl</code>","text":"<p>         Bases: <code>auditlog_journal_port.AuditlogJournal</code></p> Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>class MongoAuditlogJournalImpl(auditlog_journal_port.AuditlogJournal):\n__slots__: typing.Sequence[str] = (\"_collection\", \"_max_records\")\ndef __init__(\nself,\nauditlog_collection: mongo.Collection,\nmax_records: typing.Optional[int] = None,\n) -&gt; None:\nself._max_records = max_records\nself._collection = auditlog_collection\n@property\ndef max_records(self) -&gt; typing.Optional[int]:\nreturn self._max_records\ndef set_max_records(self, value: typing.Optional[int], /) -&gt; None:\nself._max_records = value\ndef append_entries(\nself,\nentries: typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry],\n) -&gt; None:\ntotal = self._collection.count_documents({})\nif self._max_records is not None:\nremove = max(0, total - self._max_records + len(entries))\nif remove:\nids = [r[\"_id\"] for r in self._collection.find().limit(remove)]\n# Delete extra records based on the FIFO algorithm.\nself._collection.delete_many({\"_id\": {\"$in\": ids}})\nself._collection.insert_many(\n[dataclasses.asdict(entry) for entry in entries],\n# Audit log records have an automatically generated\n# identifier that does not need to be sorted.\nordered=False,\n)\ndef load_entries(\nself, limit: typing.Optional[int] = None\n) -&gt; typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry]:\npipeline: typing.List[typing.Any] = [{\"$match\": {}}]\nif limit is not None:\npipeline.append({\"$limit\": limit})\nentries = [\ndomain_auditlog_entry.MigrationAuditlogEntry.from_dict(entry)\nfor entry in self._collection.aggregate(pipeline)\n]\nreturn entries\ndef history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\npipeline: typing.List[typing.Any] = [\n{\"$sort\": {\"date\": pymongo.ASCENDING if ascending_date else pymongo.DESCENDING}}\n]\nif start is not None:\npipeline.append({\"$match\": {\"date\": {\"$gte\": start}}})\nif end is not None:\npipeline.append({\"$match\": {\"date\": {\"$lte\": end}}})\nif limit is not None:\npipeline.append({\"$limit\": limit})\nschemas = self._collection.aggregate(pipeline)\nfor schema in schemas:\nschema[\"migration_read_model\"] = domain_migration.MigrationReadModel.from_dict(\nschema[\"migration_read_model\"],\n)\nyield domain_auditlog_entry.MigrationAuditlogEntry.from_dict(schema)\n</code></pre>"},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_collection', '_max_records')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.max_records","title":"<code>max_records: typing.Optional[int]</code>  <code>property</code>","text":""},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.__init__","title":"<code>__init__(auditlog_collection, max_records=None)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>def __init__(\nself,\nauditlog_collection: mongo.Collection,\nmax_records: typing.Optional[int] = None,\n) -&gt; None:\nself._max_records = max_records\nself._collection = auditlog_collection\n</code></pre>"},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.append_entries","title":"<code>append_entries(entries)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>def append_entries(\nself,\nentries: typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry],\n) -&gt; None:\ntotal = self._collection.count_documents({})\nif self._max_records is not None:\nremove = max(0, total - self._max_records + len(entries))\nif remove:\nids = [r[\"_id\"] for r in self._collection.find().limit(remove)]\n# Delete extra records based on the FIFO algorithm.\nself._collection.delete_many({\"_id\": {\"$in\": ids}})\nself._collection.insert_many(\n[dataclasses.asdict(entry) for entry in entries],\n# Audit log records have an automatically generated\n# identifier that does not need to be sorted.\nordered=False,\n)\n</code></pre>"},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.history","title":"<code>history(start=None, end=None, limit=None, ascending_date=True)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>def history(\nself,\nstart: typing.Optional[datetime.datetime] = None,\nend: typing.Optional[datetime.datetime] = None,\nlimit: typing.Optional[int] = None,\nascending_date: bool = True,\n) -&gt; typing.Iterator[domain_auditlog_entry.MigrationAuditlogEntry]:\npipeline: typing.List[typing.Any] = [\n{\"$sort\": {\"date\": pymongo.ASCENDING if ascending_date else pymongo.DESCENDING}}\n]\nif start is not None:\npipeline.append({\"$match\": {\"date\": {\"$gte\": start}}})\nif end is not None:\npipeline.append({\"$match\": {\"date\": {\"$lte\": end}}})\nif limit is not None:\npipeline.append({\"$limit\": limit})\nschemas = self._collection.aggregate(pipeline)\nfor schema in schemas:\nschema[\"migration_read_model\"] = domain_migration.MigrationReadModel.from_dict(\nschema[\"migration_read_model\"],\n)\nyield domain_auditlog_entry.MigrationAuditlogEntry.from_dict(schema)\n</code></pre>"},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.load_entries","title":"<code>load_entries(limit=None)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>def load_entries(\nself, limit: typing.Optional[int] = None\n) -&gt; typing.Sequence[domain_auditlog_entry.MigrationAuditlogEntry]:\npipeline: typing.List[typing.Any] = [{\"$match\": {}}]\nif limit is not None:\npipeline.append({\"$limit\": limit})\nentries = [\ndomain_auditlog_entry.MigrationAuditlogEntry.from_dict(entry)\nfor entry in self._collection.aggregate(pipeline)\n]\nreturn entries\n</code></pre>"},{"location":"docs/infrastructure/auditlog_journals/#mongorunway.infrastructure.persistence.auditlog_journals.MongoAuditlogJournalImpl.set_max_records","title":"<code>set_max_records(value)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\auditlog_journals.py</code> <pre><code>def set_max_records(self, value: typing.Optional[int], /) -&gt; None:\nself._max_records = value\n</code></pre>"},{"location":"docs/infrastructure/commands/","title":"Commands","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands","title":"<code>mongorunway.infrastructure.commands</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.__aliases__","title":"<code>__aliases__: typing.List[str] = []</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.__all__","title":"<code>__all__: typing.Tuple[str, ...] = ('make_snake_case_global_alias', 'CreateDatabase', 'DropDatabase', 'CreateCollection', 'DropCollection', 'InsertMany', 'InsertOne', 'DeleteOne', 'DeleteMany', 'UpdateOne', 'UpdateMany', 'ReplaceOne', 'CreateIndex', 'CreateIndexes', 'DropIndex', 'DropIndexes', 'RenameCollection', 'SendCommand')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite","title":"<code>BulkWrite</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.BulkWriteResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass BulkWrite(domain_command.MigrationCommand[results.BulkWriteResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n\"bulk_operations\",\n)\ndef __init__(\nself,\ncollection: str,\nbulk_operations: typing.Sequence[\ntyping.Union[\npymongo.InsertOne[mongo.DocumentType],\npymongo.ReplaceOne[mongo.DocumentType],\npymongo.UpdateOne,\npymongo.UpdateMany,\npymongo.DeleteOne,\npymongo.DeleteMany,\n],\n],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.collection = collection\nself.bulk_operations = bulk_operations\nself.args = args\nself.kwargs = kwargs\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.BulkWriteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.bulk_write(self.bulk_operations, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection', 'bulk_operations')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.bulk_operations","title":"<code>bulk_operations = bulk_operations</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.__init__","title":"<code>__init__(collection, bulk_operations, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nbulk_operations: typing.Sequence[\ntyping.Union[\npymongo.InsertOne[mongo.DocumentType],\npymongo.ReplaceOne[mongo.DocumentType],\npymongo.UpdateOne,\npymongo.UpdateMany,\npymongo.DeleteOne,\npymongo.DeleteMany,\n],\n],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.collection = collection\nself.bulk_operations = bulk_operations\nself.args = args\nself.kwargs = kwargs\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.BulkWrite.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.BulkWriteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.bulk_write(self.bulk_operations, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection","title":"<code>CreateCollection</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[mongo.Collection]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass CreateCollection(domain_command.MigrationCommand[mongo.Collection]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n)\ndef __init__(self, collection: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.collection = collection\nself.args = args\nself.kwargs = kwargs\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; mongo.Collection:\ncollection = ctx.database.create_collection(self.collection, *self.args, **self.kwargs)\nreturn collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.__init__","title":"<code>__init__(collection, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(self, collection: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.collection = collection\nself.args = args\nself.kwargs = kwargs\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateCollection.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; mongo.Collection:\ncollection = ctx.database.create_collection(self.collection, *self.args, **self.kwargs)\nreturn collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase","title":"<code>CreateDatabase</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[mongo.Database]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass CreateDatabase(domain_command.MigrationCommand[mongo.Database]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n\"database\",\n)\ndef __init__(\nself,\ncollection: str,\ndatabase: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.collection = collection\nself.database = database\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; mongo.Database:\ndatabase = ctx.client.get_database(self.database)\ndatabase.create_collection(self.collection, *self.args, **self.kwargs)\nreturn database\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection', 'database')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.database","title":"<code>database = database</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.__init__","title":"<code>__init__(collection, database, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\ndatabase: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.collection = collection\nself.database = database\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateDatabase.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; mongo.Database:\ndatabase = ctx.client.get_database(self.database)\ndatabase.create_collection(self.collection, *self.args, **self.kwargs)\nreturn database\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex","title":"<code>CreateIndex</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[str]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass CreateIndex(domain_command.MigrationCommand[str]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"keys\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nkeys: pymongo.collection._IndexKeyHint,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.keys = keys\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; str:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.create_index(self.keys, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'keys', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.keys","title":"<code>keys = keys</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.__init__","title":"<code>__init__(collection, keys, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nkeys: pymongo.collection._IndexKeyHint,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.keys = keys\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndex.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; str:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.create_index(self.keys, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes","title":"<code>CreateIndexes</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[typing.List[str]]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass CreateIndexes(domain_command.MigrationCommand[typing.List[str]]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"keys\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nkeys: typing.Sequence[pymongo.IndexModel],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.keys = keys\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; typing.List[str]:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.create_indexes(self.keys, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'keys', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.keys","title":"<code>keys = keys</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.__init__","title":"<code>__init__(collection, keys, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nkeys: typing.Sequence[pymongo.IndexModel],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.keys = keys\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.CreateIndexes.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; typing.List[str]:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.create_indexes(self.keys, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany","title":"<code>DeleteMany</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.DeleteResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DeleteMany(domain_command.MigrationCommand[results.DeleteResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"filter\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.DeleteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.delete_many(self.filter, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'filter', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.filter","title":"<code>filter = filter</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.__init__","title":"<code>__init__(collection, filter, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteMany.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.DeleteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.delete_many(self.filter, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne","title":"<code>DeleteOne</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.DeleteResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DeleteOne(domain_command.MigrationCommand[results.DeleteResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"filter\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.DeleteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.delete_one(self.filter, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'filter', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.filter","title":"<code>filter = filter</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.__init__","title":"<code>__init__(collection, filter, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DeleteOne.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.DeleteResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.delete_one(self.filter, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection","title":"<code>DropCollection</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[None]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DropCollection(domain_command.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n)\ndef __init__(self, collection: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.collection = collection\nself.args = args\nself.kwargs = kwargs\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; None:\nctx.database.drop_collection(self.collection, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.__init__","title":"<code>__init__(collection, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(self, collection: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.collection = collection\nself.args = args\nself.kwargs = kwargs\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropCollection.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; None:\nctx.database.drop_collection(self.collection, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase","title":"<code>DropDatabase</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[None]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DropDatabase(domain_command.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"database\",\n)\ndef __init__(self, database: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.database = database\nself.args = args\nself.kwargs = kwargs\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; None:\nctx.client.drop_database(self.database, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'database')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.database","title":"<code>database = database</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.__init__","title":"<code>__init__(database, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(self, database: str, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.database = database\nself.args = args\nself.kwargs = kwargs\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropDatabase.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; None:\nctx.client.drop_database(self.database, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex","title":"<code>DropIndex</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[None]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DropIndex(domain_command.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"index_or_name\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nindex_or_name: pymongo.collection._IndexKeyHint,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.index_or_name = index_or_name\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\ncollection.drop_index(self.index_or_name, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'index_or_name', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.index_or_name","title":"<code>index_or_name = index_or_name</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.__init__","title":"<code>__init__(collection, index_or_name, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nindex_or_name: pymongo.collection._IndexKeyHint,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.index_or_name = index_or_name\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndex.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\ncollection.drop_index(self.index_or_name, *self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes","title":"<code>DropIndexes</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[None]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass DropIndexes(domain_command.MigrationCommand[None]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\ncollection.drop_indexes(*self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.__init__","title":"<code>__init__(collection, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.DropIndexes.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; None:\ncollection = ctx.database.get_collection(self.collection)\ncollection.drop_indexes(*self.args, **self.kwargs)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany","title":"<code>InsertMany</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.InsertManyResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass InsertMany(domain_command.MigrationCommand[results.InsertManyResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"documents\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\ndocuments: typing.Iterable[typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.documents = documents\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.InsertManyResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.insert_many(self.documents, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'documents', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.documents","title":"<code>documents = documents</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.__init__","title":"<code>__init__(collection, documents, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\ndocuments: typing.Iterable[typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.documents = documents\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertMany.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.InsertManyResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.insert_many(self.documents, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne","title":"<code>InsertOne</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.InsertOneResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass InsertOne(domain_command.MigrationCommand[results.InsertOneResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"document\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\ndocument: typing.Any,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.document = document\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.InsertOneResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.insert_one(self.document, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'document', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.document","title":"<code>document = document</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.__init__","title":"<code>__init__(collection, document, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\ndocument: typing.Any,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.document = document\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.InsertOne.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.InsertOneResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.insert_one(self.document, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection","title":"<code>RenameCollection</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[typing.MutableMapping[str, typing.Any]]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass RenameCollection(domain_command.MigrationCommand[typing.MutableMapping[str, typing.Any]]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"new_name\",\n\"collection\",\n)\ndef __init__(\nself,\ncollection: str,\nnew_name: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.new_name = new_name\nself.collection = collection\ndef execute(\nself,\nctx: domain_context.MigrationContext,\n) -&gt; typing.MutableMapping[str, typing.Any]:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.rename(self.new_name, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'new_name', 'collection')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.new_name","title":"<code>new_name = new_name</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.__init__","title":"<code>__init__(collection, new_name, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nnew_name: str,\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.new_name = new_name\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.RenameCollection.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(\nself,\nctx: domain_context.MigrationContext,\n) -&gt; typing.MutableMapping[str, typing.Any]:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.rename(self.new_name, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne","title":"<code>ReplaceOne</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.UpdateResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass ReplaceOne(domain_command.MigrationCommand[results.UpdateResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n\"filter\",\n\"replacement\",\n)\ndef __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nreplacement: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.replacement = replacement\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.replace_one(self.filter, self.replacement, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection', 'filter', 'replacement')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.filter","title":"<code>filter = filter</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.replacement","title":"<code>replacement = replacement</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.__init__","title":"<code>__init__(collection, filter, replacement, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nreplacement: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.replacement = replacement\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.ReplaceOne.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.replace_one(self.filter, self.replacement, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand","title":"<code>SendCommand</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[typing.Any]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass SendCommand(domain_command.MigrationCommand[typing.Any]):\n__slots__: typing.Sequence[str] = (\"args\", \"kwargs\")\ndef __init__(self, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.args = args\nself.kwargs = kwargs\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; typing.Any:\nreturn ctx.database.command(*self.args, **self.kwargs)\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand.__init__","title":"<code>__init__(*args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(self, *args: typing.Any, **kwargs: typing.Any) -&gt; None:\nself.args = args\nself.kwargs = kwargs\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.SendCommand.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; typing.Any:\nreturn ctx.database.command(*self.args, **self.kwargs)\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany","title":"<code>UpdateMany</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.UpdateResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass UpdateMany(domain_command.MigrationCommand[results.UpdateResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n\"filter\",\n\"update\",\n)\ndef __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nupdate: typing.Union[\ntyping.Mapping[str, typing.Any], typing.Sequence[typing.Mapping[str, typing.Any]]\n],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.update = update\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.update_many(self.filter, self.update, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection', 'filter', 'update')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.filter","title":"<code>filter = filter</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.update","title":"<code>update = update</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.__init__","title":"<code>__init__(collection, filter, update, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nupdate: typing.Union[\ntyping.Mapping[str, typing.Any], typing.Sequence[typing.Mapping[str, typing.Any]]\n],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.update = update\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateMany.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.update_many(self.filter, self.update, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne","title":"<code>UpdateOne</code>","text":"<p>         Bases: <code>domain_command.MigrationCommand[results.UpdateResult]</code></p> Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>@make_snake_case_global_alias\nclass UpdateOne(domain_command.MigrationCommand[results.UpdateResult]):\n__slots__: typing.Sequence[str] = (\n\"args\",\n\"kwargs\",\n\"collection\",\n\"filter\",\n\"update\",\n)\ndef __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nupdate: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.update = update\nself.collection = collection\ndef execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.update_one(self.filter, self.update, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('args', 'kwargs', 'collection', 'filter', 'update')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.args","title":"<code>args = args</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.collection","title":"<code>collection = collection</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.filter","title":"<code>filter = filter</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.kwargs","title":"<code>kwargs = kwargs</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.update","title":"<code>update = update</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.__init__","title":"<code>__init__(collection, filter, update, *args, **kwargs)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def __init__(\nself,\ncollection: str,\nfilter: typing.Mapping[str, typing.Any],\nupdate: typing.Mapping[str, typing.Any],\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; None:\nself.args = args\nself.kwargs = kwargs\nself.filter = filter\nself.update = update\nself.collection = collection\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.UpdateOne.execute","title":"<code>execute(ctx)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def execute(self, ctx: domain_context.MigrationContext) -&gt; results.UpdateResult:\ncollection = ctx.database.get_collection(self.collection)\nresult = collection.update_one(self.filter, self.update, *self.args, **self.kwargs)\nreturn result\n</code></pre>"},{"location":"docs/infrastructure/commands/#mongorunway.infrastructure.commands.make_snake_case_global_alias","title":"<code>make_snake_case_global_alias(obj)</code>","text":"Source code in <code>mongorunway\\infrastructure\\commands.py</code> <pre><code>def make_snake_case_global_alias(\nobj: typing.Union[_CommandTT, typing.MutableMapping[str, typing.Any]],\n) -&gt; typing.Union[_CommandTT, typing.Callable[[_CommandTT], _CommandTT]]:\ndef decorator(\ncls: _CommandTT,\ncalled_without_args: bool,\n) -&gt; _CommandTT:\ndef func(\n*args: typing.Any,\n**kwargs: typing.Any,\n) -&gt; typing.Any:\ncls_instance = cls(*args, **kwargs)\nreturn cls_instance\nfunc.__name__ = util.as_snake_case(cls)\nfunc.__doc__ = cls.__doc__\nfunc.__module__ = cls.__module__\nif called_without_args:\nglobals().update({func.__name__: func})\nelse:\nassert isinstance(obj, collections.abc.MutableMapping)  # For type checkers only\nobj.update({func.__name__: func})\nreturn cls\nif inspect.isclass(obj):\nreturn decorator(\ntyping.cast(_CommandTT, obj),\ncalled_without_args=True,\n)\nreturn typing.cast(\ntyping.Callable[[_CommandTT], _CommandTT],\nfunctools.partial(decorator, called_without_args=False),\n)\n</code></pre>"},{"location":"docs/infrastructure/config_readers/","title":"Config readers","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers","title":"<code>mongorunway.infrastructure.config_readers</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.__all__","title":"<code>__all__: typing.Sequence[str] = ('default_mongo_repository_reader', 'default_mongo_auditlog_journal_reader', 'read_repository', 'read_events', 'read_event_handlers', 'read_auditlog_journal', 'read_filename_strategy', 'BaseConfigReader', 'YamlConfigReader')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.event_handler_pattern","title":"<code>event_handler_pattern: typing.Pattern[str] = re.compile('\\n    ^                  # Start of the string\\n    Prioritized\\\\[      # Match the literal string \"Prioritized[\"\\n        (\\\\d+),         # Group 1: Match one or more digits (priority)\\n \\\\s*            # Match zero or more whitespace characters\\n        (.+)           # Group 2: Match one or more characters (handler function path)\\n \\\\]$                # Match the closing square bracket and end of the string\\n    |                  # OR\\n    ^                  # Start of the string\\n    ([^,\\\\[\\\\]]+)        # Group 3: Match any characters except comma, square brackets\\n    $                  # End of the string\\n    ', flags=re.VERBOSE)</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.logging_config","title":"<code>logging_config: typing.Dict[str, typing.Any] = {'version': 1, 'disable_existing_loggers': False, 'formatters': {'simpleFormatter': {'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s', 'datefmt': '%Y-%m-%d %H:%M:%S'}}, 'handlers': {'consoleHandler': {'class': 'logging.StreamHandler', 'level': 'DEBUG', 'formatter': 'simpleFormatter'}}, 'loggers': {'root': {'level': 'INFO', 'handlers': ['consoleHandler'], 'propagate': 0}}}</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader","title":"<code>BaseConfigReader</code>","text":"<p>         Bases: <code>config_reader_port.ConfigReader</code></p> Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>class BaseConfigReader(config_reader_port.ConfigReader):\npotential_config_filenames: typing.List[str]\ndef __init__(self, application_name: str) -&gt; None:\nself.application_name = application_name\n@classmethod\ndef from_application_name(cls, application_name: str, /) -&gt; config_reader_port.ConfigReader:\nreturn cls(application_name=application_name)\ndef read_config(\nself,\nconfig_filepath: typing.Optional[str] = None,\n) -&gt; typing.Optional[config.Config]:\nif config_filepath:\nconfig_filepaths = filesystem.find_any(config_filepath)\nif not config_filepaths:\nraise FileNotFoundError(f\"Could not find {config_filepath!r} configuration file.\")\nelse:\nconfig_filepaths = filesystem.find_any(*self.potential_config_filenames)\nif not config_filepaths:\nreturn None\n# Search until at least one config is found\nfor config_filepath in config_filepaths:\nconfiguration = self._read_config(config_filepath)\nif configuration:\nreturn configuration\nreturn None\n@abc.abstractmethod\ndef _read_config(self, config_filepath: str) -&gt; typing.Optional[config.Config]:\n...\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader.application_name","title":"<code>application_name = application_name</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader.potential_config_filenames","title":"<code>potential_config_filenames: typing.List[str]</code>  <code>instance-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader.__init__","title":"<code>__init__(application_name)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>def __init__(self, application_name: str) -&gt; None:\nself.application_name = application_name\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader.from_application_name","title":"<code>from_application_name(application_name)</code>  <code>classmethod</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@classmethod\ndef from_application_name(cls, application_name: str, /) -&gt; config_reader_port.ConfigReader:\nreturn cls(application_name=application_name)\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.BaseConfigReader.read_config","title":"<code>read_config(config_filepath=None)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>def read_config(\nself,\nconfig_filepath: typing.Optional[str] = None,\n) -&gt; typing.Optional[config.Config]:\nif config_filepath:\nconfig_filepaths = filesystem.find_any(config_filepath)\nif not config_filepaths:\nraise FileNotFoundError(f\"Could not find {config_filepath!r} configuration file.\")\nelse:\nconfig_filepaths = filesystem.find_any(*self.potential_config_filenames)\nif not config_filepaths:\nreturn None\n# Search until at least one config is found\nfor config_filepath in config_filepaths:\nconfiguration = self._read_config(config_filepath)\nif configuration:\nreturn configuration\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.YamlConfigReader","title":"<code>YamlConfigReader</code>","text":"<p>         Bases: <code>BaseConfigReader</code></p> Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>class YamlConfigReader(BaseConfigReader):\npotential_config_filenames = [\"mongorunway.yaml\", \"mongorunway.yml\"]\ndef _read_config(self, config_filepath: str) -&gt; typing.Optional[config.Config]:\nwith open(config_filepath, \"r\") as config_file:\nconfigration_data = yaml.safe_load(config_file)[\"mongorunway\"]\nreturn config.Config(\nfilesystem=self._read_filesystem_config(\nconfigration_data[\"filesystem\"],\nconfig_filepath,\n),\napplication=self._read_application_config(\nconfigration_data[\"applications\"][self.application_name],\n),\nlogging_dict=configration_data.get(\"logging\", logging_config),\n)\ndef _read_filesystem_config(\nself,\nfilesystem_data: typing.Dict[str, typing.Any],\nconfig_filepath: str,\n) -&gt; config.FileSystemConfig:\nreturn config.FileSystemConfig(\nconfig_dir=config_filepath,\nscripts_dir=filesystem_data[\"scripts_dir\"],\nfilename_strategy=read_filename_strategy(\nfilesystem_data.get(\n\"filename_strategy\",\n\"mongorunway.infrastructure.filename_strategies.NumericalFilenameStrategy\",\n),\n),\n**util.build_optional_kwargs(\n(\"use_filename_strategy\",),\nfilesystem_data,\n),\n)\ndef _read_application_config(\nself,\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; config.ApplicationConfig:\nreturn config.ApplicationConfig(\napp_name=self.application_name,\napp_client=(\nclient := mongo.Client(**util.build_mapping_values(application_data[\"app_client\"]))\n),\napp_database=client.get_database(application_data[\"app_database\"]),\napp_repository=read_repository(application_data),\napp_auditlog_journal=read_auditlog_journal(application_data),\napp_events=read_events(application_data.get(\"app_events\", {})),\n**util.build_optional_kwargs(\n(\n\"app_timezone\",\n\"app_date_format\",\n\"app_auditlog_limit\",\n\"use_logging\",\n\"use_auditlog\",\n\"use_indexing\",\n\"use_schema_validation\",\n\"raise_on_transaction_failure\",\n),\napplication_data,\n),\n)\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.YamlConfigReader.potential_config_filenames","title":"<code>potential_config_filenames = ['mongorunway.yaml', 'mongorunway.yml']</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.default_mongo_auditlog_journal_reader","title":"<code>default_mongo_auditlog_journal_reader(application_data)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>def default_mongo_auditlog_journal_reader(\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; typing.Optional[auditlog_journal_port.AuditlogJournal]:\nif (collection := application_data[\"app_auditlog_journal\"].get(\"collection\")) is None:\nreturn None\nclient = mongo.Client(**util.build_mapping_values(application_data[\"app_client\"]))\ndatabase = client.get_database(application_data[\"app_database\"])\ncollection = database.get_collection(collection)\nreturn auditlog_journals.MongoAuditlogJournalImpl(collection)\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.default_mongo_repository_reader","title":"<code>default_mongo_repository_reader(application_data)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>def default_mongo_repository_reader(\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; repository_port.MigrationModelRepository:\nclient = mongo.Client(**util.build_mapping_values(application_data[\"app_client\"]))\ndatabase = client.get_database(application_data[\"app_database\"])\ncollection = database.get_collection(application_data[\"app_repository\"][\"collection\"])\nreturn repositories.MongoModelRepositoryImpl(collection)\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.read_auditlog_journal","title":"<code>read_auditlog_journal(application_data)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@typing.no_type_check\ndef read_auditlog_journal(\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; typing.Optional[auditlog_journal_port.AuditlogJournal]:\ntry:\nif (auditlog_value := application_data.get(\"app_auditlog_journal\")) is None:\nreturn None\nif (reader_value := auditlog_value.get(\"reader\")) is not None:\nreader = util.import_obj(\nreader_value,\ncast=typing.Callable[\n[typing.Dict[str, typing.Any]],\nauditlog_journal_port.AuditlogJournal,\n],\n)\nreturn reader(application_data)\nif (audit_type := application_data.get(\"type\")) is None:\nreader = util.import_obj(\n\"mongorunway.infrastructure.config_readers.default_mongo_auditlog_journal_reader\",\ncast=typing.Callable[\n[typing.Dict[str, typing.Any]],\nauditlog_journal_port.AuditlogJournal,\n],\n)\nreturn reader(application_data)\nauditlog_journal_type = util.import_obj(\naudit_type,\ncast=auditlog_journal_port.AuditlogJournal,\n)\nexcept AttributeError as exc:\nraise AttributeError(\nf\"Undefined reader or repository received.\"\n) from exc\nreturn auditlog_journal_type()\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.read_event_handlers","title":"<code>read_event_handlers(handler_name_seq)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@typing.no_type_check\ndef read_event_handlers(\nhandler_name_seq: typing.Sequence[str],\n) -&gt; typing.List[domain_event.EventHandlerProxyOr[domain_event.EventHandler]]:\nhandlers: typing.List[domain_event.EventHandlerProxyOr[domain_event.EventHandler]] = []\nfor handler_name in handler_name_seq:\nmatch = re.match(event_handler_pattern, handler_name.replace(\" \", \"\"))\nif match:\nif match.group(1):  # If there is a group 1, then there is a structure \"Priority\".\npriority = int(match.group(1))\nhandler_func_path = match.group(2)\nelse:\npriority = None\nhandler_func_path = match.group(3)\ntry:\nhandler = util.import_obj(handler_func_path, cast=domain_event.EventHandler)\nexcept AttributeError as exc:\nraise AttributeError(f\"Undefined event handler: {handler_func_path!r}.\") from exc\nif priority is not None:\nhandler = domain_event.EventHandlerProxy(priority=priority, handler=handler)\nhandlers.append(handler)\nelse:\nraise ValueError(\"Invalid handler format.\")\nreturn handlers\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.read_events","title":"<code>read_events(event_dict)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@typing.no_type_check\ndef read_events(\nevent_dict: typing.Dict[str, typing.Sequence[str]],\n) -&gt; typing.Mapping[\ntyping.Type[domain_event.MigrationEvent],\ntyping.Sequence[domain_event.EventHandlerProxyOr[domain_event.EventHandler]],\n]:\ntry:\nmapping = {\nutil.import_obj(event_name, cast=domain_event.MigrationEvent): read_event_handlers(\nhandler_name_seq\n)\nfor event_name, handler_name_seq in event_dict.items()\n}\nexcept AttributeError as exc:\nraise AttributeError(f\"Undefined event or event handler.\") from exc\nreturn mapping\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.read_filename_strategy","title":"<code>read_filename_strategy(strategy_path)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@typing.no_type_check\ndef read_filename_strategy(strategy_path: str) -&gt; filename_strategy_port.FilenameStrategy:\ntry:\nstrategy_type = util.import_obj(\nstrategy_path.strip(),\ncast=filename_strategy_port.FilenameStrategy,\n)\nexcept AttributeError as exc:\nraise AttributeError(f\"Undefined filename strategy {strategy_path!r}.\") from exc\nreturn strategy_type()\n</code></pre>"},{"location":"docs/infrastructure/config_readers/#mongorunway.infrastructure.config_readers.read_repository","title":"<code>read_repository(application_data)</code>","text":"Source code in <code>mongorunway\\infrastructure\\config_readers.py</code> <pre><code>@typing.no_type_check\ndef read_repository(\napplication_data: typing.Dict[str, typing.Any],\n) -&gt; repository_port.MigrationModelRepository:\ntry:\nif (repository_data := application_data.get(\"app_repository\")) is None:\nraise KeyError(\"Missing 'app_repository' section.\")\nif (reader_value := repository_data.get(\"reader\")) is not None:\nreader = util.import_obj(\nreader_value,\ncast=typing.Callable[\n[typing.Dict[str, typing.Any]],\nrepository_port.MigrationModelRepository,\n],\n)\nreturn reader(application_data)\nif (repo_type := application_data.get(\"type\")) is None:\nreader = util.import_obj(\n\"mongorunway.infrastructure.config_readers.default_mongo_repository_reader\",\ncast=typing.Callable[\n[typing.Dict[str, typing.Any]],\nrepository_port.MigrationModelRepository,\n],\n)\nreturn reader(application_data)\nrepository_type = util.import_obj(\nrepo_type,\ncast=repository_port.MigrationModelRepository,\n)\nexcept AttributeError as exc:\nraise AttributeError(f\"Undefined reader or repository received.\") from exc\nreturn repository_type()\n</code></pre>"},{"location":"docs/infrastructure/event_handlers/","title":"Event handlers","text":""},{"location":"docs/infrastructure/event_handlers/#mongorunway.infrastructure.event_handlers","title":"<code>mongorunway.infrastructure.event_handlers</code>","text":""},{"location":"docs/infrastructure/event_handlers/#mongorunway.infrastructure.event_handlers.__all__","title":"<code>__all__: typing.Sequence[str] = ('sync_scripts_with_repository', 'recalculate_migrations_checksum', 'raise_if_migrations_checksum_mismatch')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/event_handlers/#mongorunway.infrastructure.event_handlers.raise_if_migrations_checksum_mismatch","title":"<code>raise_if_migrations_checksum_mismatch(event)</code>","text":"Source code in <code>mongorunway\\infrastructure\\event_handlers.py</code> <pre><code>def raise_if_migrations_checksum_mismatch(event: domain_event.ApplicationEvent) -&gt; None:\nservice = migration_service.MigrationService(event.application.session)\nfor migration in event.application.session.get_all_migration_models():\ncurrent_migration_state = service.get_migration(migration.name, migration.version)\nif current_migration_state.checksum != migration.checksum:\n_LOGGER.error(\n\"%s: migration file '%s' with version %s is changed, raising...\",\nraise_if_migrations_checksum_mismatch.__name__,\nmigration.name,\nmigration.version,\n)\nraise domain_exception.MigrationFileChangedError(\nmigration_name=migration.name,\nmigration_version=migration.version,\n)\n</code></pre>"},{"location":"docs/infrastructure/event_handlers/#mongorunway.infrastructure.event_handlers.recalculate_migrations_checksum","title":"<code>recalculate_migrations_checksum(event)</code>","text":"Source code in <code>mongorunway\\infrastructure\\event_handlers.py</code> <pre><code>def recalculate_migrations_checksum(event: domain_event.ApplicationEvent) -&gt; None:\nservice = migration_service.MigrationService(event.application.session)\nfor migration in event.application.session.get_all_migration_models():\ncurrent_migration_state = service.get_migration(migration.name, migration.version)\nif current_migration_state.checksum != migration.checksum:\nevent.application.session.remove_migration(migration.version)\nevent.application.session.append_migration(current_migration_state)\n_LOGGER.info(\n\"%s: migration file '%s' with version %s is changed, checksum successfully\"\n\" \"\n\"recalculated (%s) -&gt; (%s).\",\nrecalculate_migrations_checksum.__name__,\nmigration.name,\nmigration.version,\nmigration.checksum,\ncurrent_migration_state.checksum,\n)\n</code></pre>"},{"location":"docs/infrastructure/event_handlers/#mongorunway.infrastructure.event_handlers.sync_scripts_with_repository","title":"<code>sync_scripts_with_repository(event)</code>","text":"Source code in <code>mongorunway\\infrastructure\\event_handlers.py</code> <pre><code>def sync_scripts_with_repository(event: domain_event.ApplicationEvent) -&gt; None:\nservice = migration_service.MigrationService(event.application.session)\nfor migration in service.get_migrations():\nif not event.application.session.has_migration(migration):\nevent.application.session.append_migration(migration)\n_LOGGER.info(\n\"%s: migration '%s' with version %s was synced\"\n\" \"\n\"and successfully append to pending.\",\nsync_scripts_with_repository.__name__,\nmigration.name,\nmigration.version,\n)\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/","title":"Filename strategies","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies","title":"<code>mongorunway.infrastructure.filename_strategies</code>","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.__all__","title":"<code>__all__: typing.Sequence[str] = ('MissingFilenameStrategy', 'NumericalFilenameStrategy', 'UnixFilenameStrategy')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.MissingFilenameStrategy","title":"<code>MissingFilenameStrategy</code>","text":"<p>         Bases: <code>filename_strategy_port.FilenameStrategy</code></p> Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>class MissingFilenameStrategy(filename_strategy_port.FilenameStrategy):\n__slots__: typing.Sequence[str] = ()\ndef is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn True\ndef transform_migration_filename(self, filename: str, position: int) -&gt; str:\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.MissingFilenameStrategy.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.MissingFilenameStrategy.is_valid_filename","title":"<code>is_valid_filename(filename)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn True\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.MissingFilenameStrategy.transform_migration_filename","title":"<code>transform_migration_filename(filename, position)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def transform_migration_filename(self, filename: str, position: int) -&gt; str:\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.NumericalFilenameStrategy","title":"<code>NumericalFilenameStrategy</code>","text":"<p>         Bases: <code>filename_strategy_port.FilenameStrategy</code></p> Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>class NumericalFilenameStrategy(filename_strategy_port.FilenameStrategy):\n__slots__: typing.Sequence[str] = ()\ndef is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn all(char.isdigit() for char in filename[:3])\ndef transform_migration_filename(self, filename: str, position: int) -&gt; str:\nif not self.is_valid_filename(filename):\nfilename_parts = [i for i in filename.split(\"_\") if i]\nreturn str(position).zfill(3) + \"_\" + \"_\".join(filename_parts)\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.NumericalFilenameStrategy.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.NumericalFilenameStrategy.is_valid_filename","title":"<code>is_valid_filename(filename)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn all(char.isdigit() for char in filename[:3])\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.NumericalFilenameStrategy.transform_migration_filename","title":"<code>transform_migration_filename(filename, position)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def transform_migration_filename(self, filename: str, position: int) -&gt; str:\nif not self.is_valid_filename(filename):\nfilename_parts = [i for i in filename.split(\"_\") if i]\nreturn str(position).zfill(3) + \"_\" + \"_\".join(filename_parts)\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.UnixFilenameStrategy","title":"<code>UnixFilenameStrategy</code>","text":"<p>         Bases: <code>filename_strategy_port.FilenameStrategy</code></p> Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>class UnixFilenameStrategy(filename_strategy_port.FilenameStrategy):\n__slots__: typing.Sequence[str] = ()\ndef is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn bool(re.match(r\"^\\d{10,}\", filename))\ndef transform_migration_filename(self, filename: str, position: int) -&gt; str:\nif not self.is_valid_filename(filename):\nfilename_parts = [i for i in filename.split(\"_\") if i]\nreturn str(int(time.time())) + \"_\" + \"_\".join(filename_parts)\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.UnixFilenameStrategy.__slots__","title":"<code>__slots__: typing.Sequence[str] = ()</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.UnixFilenameStrategy.is_valid_filename","title":"<code>is_valid_filename(filename)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def is_valid_filename(self, filename: str, /) -&gt; bool:\nreturn bool(re.match(r\"^\\d{10,}\", filename))\n</code></pre>"},{"location":"docs/infrastructure/filename_strategies/#mongorunway.infrastructure.filename_strategies.UnixFilenameStrategy.transform_migration_filename","title":"<code>transform_migration_filename(filename, position)</code>","text":"Source code in <code>mongorunway\\infrastructure\\filename_strategies.py</code> <pre><code>def transform_migration_filename(self, filename: str, position: int) -&gt; str:\nif not self.is_valid_filename(filename):\nfilename_parts = [i for i in filename.split(\"_\") if i]\nreturn str(int(time.time())) + \"_\" + \"_\".join(filename_parts)\nreturn filename\n</code></pre>"},{"location":"docs/infrastructure/repositories/","title":"Repositories","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories","title":"<code>mongorunway.infrastructure.persistence.repositories</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.__all__","title":"<code>__all__: typing.Sequence[str] = ('MongoModelRepositoryImpl')</code>  <code>module-attribute</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.Index","title":"<code>Index</code>","text":"<p>         Bases: <code>enum.Enum</code></p> Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>class Index(enum.Enum):\nUNAPPLIED = [(\"is_applied\", pymongo.ASCENDING)]\nAPPLIED = [(\"is_applied\", pymongo.ASCENDING), (\"_id\", pymongo.DESCENDING)]\nUNIQUE = \"_id_\"\ndef translate(self) -&gt; str:\nreturn mongo.translate_index(self.value)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.Index.APPLIED","title":"<code>APPLIED = [('is_applied', pymongo.ASCENDING), ('_id', pymongo.DESCENDING)]</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.Index.UNAPPLIED","title":"<code>UNAPPLIED = [('is_applied', pymongo.ASCENDING)]</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.Index.UNIQUE","title":"<code>UNIQUE = '_id_'</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.Index.translate","title":"<code>translate()</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def translate(self) -&gt; str:\nreturn mongo.translate_index(self.value)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl","title":"<code>MongoModelRepositoryImpl</code>","text":"<p>         Bases: <code>repository_port.MigrationModelRepository</code></p> Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>class MongoModelRepositoryImpl(repository_port.MigrationModelRepository):\n__slots__: typing.Sequence[str] = (\n\"_collection\",\n\"_lock\",\n)\ndef __init__(self, migrations_collection: mongo.Collection) -&gt; None:\nself._collection = migrations_collection\nself._lock = threading.RLock()  # Use reentrant lock to allow nested acquire/release\ndef __len__(self) -&gt; int:\nwith self._lock:\nreturn self.has_migrations()\ndef __contains__(self, item: typing.Any, /) -&gt; bool:\nwith self._lock:\nreturn self.has_migration(item)\ndef has_migration(self, item: typing.Any, /) -&gt; bool:\nversion: typing.Optional[int] = getattr(item, \"version\", None)\nif version is None:\nreturn NotImplemented\nwith self._lock:\nreturn self.has_migration_with_version(version)\ndef has_migration_with_version(self, migration_version: int, /) -&gt; bool:\nwith self._lock:\nreturn self._collection.count_documents(\n{\"_id\": migration_version}\n) &gt; 0\ndef has_migrations(self) -&gt; bool:\nwith self._lock:\nreturn bool(\nself._collection.count_documents(\n{},\nlimit=1,\n)\n)\ndef acquire_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\nschema = self._collection.find_one({\"_id\": migration_version})\nif schema is not None:\nreturn domain_migration.MigrationReadModel.from_dict(schema)\nreturn None\ndef acquire_migration_model_by_flag(\nself, is_applied: bool\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\nif is_applied:\n# LIFO\nschema = self._collection.find({\"is_applied\": True}).sort(\"_id\", -1).limit(1)\nelse:\n# FIFO\nschema = self._collection.find({\"is_applied\": False}).sort(\"_id\", 1).limit(1)\ntry:\nmodel = domain_migration.MigrationReadModel.from_dict(schema.next())\nexcept StopIteration:\nreturn None\nreturn model\ndef acquire_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nindexes = Index.APPLIED if is_applied else Index.UNAPPLIED\nwith self._lock:\nschemas = mongo.hint_or_sort_cursor(\nself._collection.find({\"is_applied\": is_applied}),\nindexes=indexes.value,\n)\nwhile True:\ntry:\nschema = schemas.next()\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\ndef acquire_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nwith self._lock:\nif ascending_id:\n# By default, the collection has already created an index for the\n# unique key `_id` which sorts them in ascending order.\nschemas = mongo.hint_or_sort_cursor(\nself._collection.find({}),\nindexes=Index.UNIQUE.value,\n)\nelse:\nschemas = self._collection.find({}).sort([(\"version\", pymongo.DESCENDING)])\nwhile True:\ntry:\nschema = schemas.next()\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\ndef append_migration(self, migration: domain_migration.Migration, /) -&gt; int:\nschema = migration.to_dict(unique=True)\nwith self._lock:\nself._collection.insert_one(\nschema,\nbypass_document_validation=True,\n)\nreturn migration.version\ndef remove_migration(self, migration_version: int, /) -&gt; int:\nwith self._lock:\nself._collection.delete_one({\"_id\": migration_version})\nreturn migration_version\ndef set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; int:\nwith self._lock:\nself._collection.update_one(\n{\"_id\": migration.version},\n{\"$set\": {\"is_applied\": is_applied}},\nbypass_document_validation=True,\n)\nreturn migration.version\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_collection', '_lock')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.__contains__","title":"<code>__contains__(item)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def __contains__(self, item: typing.Any, /) -&gt; bool:\nwith self._lock:\nreturn self.has_migration(item)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.__init__","title":"<code>__init__(migrations_collection)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def __init__(self, migrations_collection: mongo.Collection) -&gt; None:\nself._collection = migrations_collection\nself._lock = threading.RLock()  # Use reentrant lock to allow nested acquire/release\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.__len__","title":"<code>__len__()</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def __len__(self) -&gt; int:\nwith self._lock:\nreturn self.has_migrations()\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.acquire_all_migration_models","title":"<code>acquire_all_migration_models(*, ascending_id=True)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def acquire_all_migration_models(\nself,\n*,\nascending_id: bool = True,\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nwith self._lock:\nif ascending_id:\n# By default, the collection has already created an index for the\n# unique key `_id` which sorts them in ascending order.\nschemas = mongo.hint_or_sort_cursor(\nself._collection.find({}),\nindexes=Index.UNIQUE.value,\n)\nelse:\nschemas = self._collection.find({}).sort([(\"version\", pymongo.DESCENDING)])\nwhile True:\ntry:\nschema = schemas.next()\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.acquire_migration_model_by_flag","title":"<code>acquire_migration_model_by_flag(is_applied)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def acquire_migration_model_by_flag(\nself, is_applied: bool\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\nif is_applied:\n# LIFO\nschema = self._collection.find({\"is_applied\": True}).sort(\"_id\", -1).limit(1)\nelse:\n# FIFO\nschema = self._collection.find({\"is_applied\": False}).sort(\"_id\", 1).limit(1)\ntry:\nmodel = domain_migration.MigrationReadModel.from_dict(schema.next())\nexcept StopIteration:\nreturn None\nreturn model\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.acquire_migration_model_by_version","title":"<code>acquire_migration_model_by_version(migration_version)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def acquire_migration_model_by_version(\nself,\nmigration_version: int,\n) -&gt; typing.Optional[domain_migration.MigrationReadModel]:\nwith self._lock:\nschema = self._collection.find_one({\"_id\": migration_version})\nif schema is not None:\nreturn domain_migration.MigrationReadModel.from_dict(schema)\nreturn None\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.acquire_migration_models_by_flag","title":"<code>acquire_migration_models_by_flag(*, is_applied)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def acquire_migration_models_by_flag(\nself, *, is_applied: bool\n) -&gt; typing.Iterator[domain_migration.MigrationReadModel]:\nindexes = Index.APPLIED if is_applied else Index.UNAPPLIED\nwith self._lock:\nschemas = mongo.hint_or_sort_cursor(\nself._collection.find({\"is_applied\": is_applied}),\nindexes=indexes.value,\n)\nwhile True:\ntry:\nschema = schemas.next()\nexcept StopIteration:\nbreak\nyield domain_migration.MigrationReadModel.from_dict(schema)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.append_migration","title":"<code>append_migration(migration)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def append_migration(self, migration: domain_migration.Migration, /) -&gt; int:\nschema = migration.to_dict(unique=True)\nwith self._lock:\nself._collection.insert_one(\nschema,\nbypass_document_validation=True,\n)\nreturn migration.version\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.has_migration","title":"<code>has_migration(item)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def has_migration(self, item: typing.Any, /) -&gt; bool:\nversion: typing.Optional[int] = getattr(item, \"version\", None)\nif version is None:\nreturn NotImplemented\nwith self._lock:\nreturn self.has_migration_with_version(version)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.has_migration_with_version","title":"<code>has_migration_with_version(migration_version)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def has_migration_with_version(self, migration_version: int, /) -&gt; bool:\nwith self._lock:\nreturn self._collection.count_documents(\n{\"_id\": migration_version}\n) &gt; 0\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.has_migrations","title":"<code>has_migrations()</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def has_migrations(self) -&gt; bool:\nwith self._lock:\nreturn bool(\nself._collection.count_documents(\n{},\nlimit=1,\n)\n)\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.remove_migration","title":"<code>remove_migration(migration_version)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def remove_migration(self, migration_version: int, /) -&gt; int:\nwith self._lock:\nself._collection.delete_one({\"_id\": migration_version})\nreturn migration_version\n</code></pre>"},{"location":"docs/infrastructure/repositories/#mongorunway.infrastructure.persistence.repositories.MongoModelRepositoryImpl.set_applied_flag","title":"<code>set_applied_flag(migration, is_applied)</code>","text":"Source code in <code>mongorunway\\infrastructure\\persistence\\repositories.py</code> <pre><code>def set_applied_flag(self, migration: domain_migration.Migration, is_applied: bool) -&gt; int:\nwith self._lock:\nself._collection.update_one(\n{\"_id\": migration.version},\n{\"$set\": {\"is_applied\": is_applied}},\nbypass_document_validation=True,\n)\nreturn migration.version\n</code></pre>"},{"location":"docs/presentation/cli/","title":"Cli","text":""},{"location":"docs/presentation/cli/#mongorunway.presentation.cli","title":"<code>mongorunway.presentation.cli</code>","text":""},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.__all__","title":"<code>__all__: typing.Sequence[str] = ('pass_application', 'auditlog', 'create_template', 'cli', 'status', 'walk', 'downgrade', 'upgrade', 'refresh', 'version', 'init', 'safe_remove', 'safe_remove_all', 'check_files', 'refresh_checksums')</code>  <code>module-attribute</code>","text":""},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.auditlog","title":"<code>auditlog(application, start, end, limit, ascending, verbose_exc, **params)</code>","text":"<p>Display the audit log entries for the specified application.</p> <p>This command allows you to view the audit log entries for the specified application. You can filter the entries by specifying a start and/or end timestamp or date. The maximum number of entries displayed can be limited, and you can choose to sort the entries in ascending order by date.</p> <p>Optionally, you can enable verbose output for exceptions that may occur during the audit log command.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"-s\",\n\"--start\",\ntype=click.STRING,\ndefault=None,\nnargs=\"?\",\nhelp=\"Specify the start timestamp or date for filtering audit log entries.\"\n)\n@click.option(\n\"-e\",\n\"--end\",\ntype=click.STRING,\ndefault=None,\nnargs=\"?\",\nhelp=\"Specify the end timestamp or date for filtering audit log entries.\"\n)\n@click.option(\n\"-l\",\n\"--limit\",\ntype=click.INT,\ndefault=10,\nhelp=\"Specify the maximum number of audit log entries to display.\"\n)\n@click.option(\n\"-a\",\n\"--ascending\",\nis_flag=True,\nhelp=\"Sort the audit log entries in ascending order by date.\"\n)\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the audit log command.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef auditlog(\napplication: applications.MigrationApp,\nstart: typing.Optional[typing.Sequence[str]],\nend: typing.Optional[typing.Sequence[str]],\nlimit: int,\nascending: bool,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Display the audit log entries for the specified application.\n    This command allows you to view the audit log entries for the\n    specified application. You can filter the entries by specifying a\n    start and/or end timestamp or date. The maximum number of entries\n    displayed can be limited, and you can choose to sort the entries\n    in ascending order by date.\n    Optionally, you can enable verbose output for exceptions that may\n    occur during the audit log command.\n    \"\"\"\npresenters.show_auditlog_entries(\napplication=application,\nstart=start,\nend=end,\nlimit=limit,\nverbose_exc=verbose_exc,\nascending_date=ascending,\n)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.check_files","title":"<code>check_files(application, raise_exc, verbose_exc, **params)</code>","text":"<p>Check the integrity of files in the specified application.</p> <p>This command verifies the integrity of files in the specified application. It compares the checksums of the files stored in the repository with the checksums of the corresponding files in the file system. If any differences are found, an appropriate message is displayed.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose exception output.\",\n)\n@click.option(\n\"--raise-exc\",\nis_flag=True,\nhelp=\"Throws an exception if a mismatch is found.\",\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef check_files(\napplication: applications.MigrationApp,\nraise_exc: bool,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Check the integrity of files in the specified application.\n    This command verifies the integrity of files in the specified\n    application. It compares the checksums of the files stored in\n    the repository with the checksums of the corresponding files\n    in the file system. If any differences are found, an appropriate\n    message is displayed.\n    \"\"\"\nexit_code = use_cases.check_files(\napplication=application,\nraise_exc=raise_exc,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.cli","title":"<code>cli()</code>","text":"Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@click.group()\ndef cli() -&gt; None:\npass\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.create_template","title":"<code>create_template(application, name, verbose_exc, version=None, **params)</code>","text":"<p>Create a migration template for the specified application.</p> <p>This command allows you to create a migration template for the specified application. The template can be customized with a name and an optional version number.</p> <p>Optionally, you can enable verbose output for exceptions during the template creation process.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"-n\",\n\"--name\",\ntype=click.STRING,\nhelp=\"Specify the name of the migration template.\"\n)\n@click.option(\n\"-v\",\n\"--version\",\ntype=click.INT,\ndefault=None,\nrequired=False,\nhelp=\"Specify the version number of the migration template.\"\n)\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the template creation process.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef create_template(\napplication: applications.MigrationApp,\nname: str,\nverbose_exc: bool,\nversion: typing.Optional[int] = None,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Create a migration template for the specified application.\n    This command allows you to create a migration template for the specified\n    application. The template can be customized with a name and an optional\n    version number.\n    Optionally, you can enable verbose output for exceptions during the\n    template creation process.\n    \"\"\"\nexit_code = use_cases.create_migration_file(\napplication=application,\nmigration_filename=name,\nmigration_version=version,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.downgrade","title":"<code>downgrade(application, expression, verbose_exc, **params)</code>","text":"<p>Downgrade the specified application.</p> <p>This command allows you to downgrade the specified application using the given expression or additional arguments. Optionally, you can enable verbose output or verbose output for exceptions during the downgrade process.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the downgrade process.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@click.argument(\n\"expression\",\ntype=click.STRING,\ndefault=\"-\",\nmetavar=\"EXPRESSION\",\nrequired=False,\n)\n@pass_application\ndef downgrade(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Downgrade the specified application.\n    This command allows you to downgrade the specified application using the\n    given expression or additional arguments. Optionally, you can enable verbose\n    output or verbose output for exceptions during the downgrade process.\n    \"\"\"\nexit_code = use_cases.downgrade(\napplication=application,\nexpression=expression,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.init","title":"<code>init(application, scripts_dir, collection, indexes, verbose_exc, schema_validation, **params)</code>","text":"<p>Initialize the specified application for migration.</p> <p>This command allows you to initialize the specified application for migration. You can choose to initialize the scripts directory, collection, indexes, and enable schema validation for the application's collection.</p> <p>Initializing the scripts directory will create the necessary directory structure for storing migration scripts.</p> <p>Initializing the collection will create the migration collection in the database.</p> <p>Initializing the indexes will create the required indexes for the migration collection.</p> <p>Enabling schema validation will enforce the defined schema on the migration collection.</p> <p>Note: Use caution when running the init command as it may modify the application's database.</p> <p>Optionally, you can enable verbose output for exceptions that may occur during the init command.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the init command.\"\n)\n@click.option(\n\"--scripts-dir\",\nis_flag=True,\nhelp=\"Initialize the scripts directory for the specified application.\"\n)\n@click.option(\n\"--collection\",\nis_flag=True,\nhelp=\"Initialize the collection for the specified application.\"\n)\n@click.option(\n\"--indexes\",\nis_flag=True,\nhelp=\"Initialize the indexes for the specified application's collection.\"\n)\n@click.option(\n\"--schema-validation\",\nis_flag=True,\nhelp=\"Enable schema validation for the specified application's collection.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef init(\napplication: applications.MigrationApp,\nscripts_dir: bool,\ncollection: bool,\nindexes: bool,\nverbose_exc: bool,\nschema_validation: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Initialize the specified application for migration.\n    This command allows you to initialize the specified application\n    for migration. You can choose to initialize the scripts directory,\n    collection, indexes, and enable schema validation for the\n    application's collection.\n    Initializing the scripts directory will create the necessary\n    directory structure for storing migration scripts.\n    Initializing the collection will create the migration collection in\n    the database.\n    Initializing the indexes will create the required indexes for the\n    migration collection.\n    Enabling schema validation will enforce the defined schema on the\n    migration collection.\n    Note: Use caution when running the init command as it may modify\n    the application's database.\n    Optionally, you can enable verbose output for exceptions that may\n    occur during the init command.\n    \"\"\"\nexit_code = use_cases.init(\napplication=application,\nverbose_exc=verbose_exc,\ninit_scripts_dir=scripts_dir,\ninit_collection=collection,\ninit_collection_indexes=indexes,\ninit_collection_schema_validation=schema_validation,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.pass_application","title":"<code>pass_application(command)</code>","text":"Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>def pass_application(command: typing.Callable[_P, _T]) -&gt; typing.Callable[_P, _T]:\nclick.option(\"--config-file\", type=click.STRING)(command)\n@click.pass_context\ndef wrapper(ctx: click.Context, *args: _P.args, **kwargs: _P.kwargs) -&gt; _T:\nconfiguration = use_cases.read_configuration(\nctx.params[\"config_file\"],\napp_name=ctx.params[\"application_name\"],\nverbose_exc=ctx.params.get(\"verbose_exc\", False),\n)\nif configuration is use_cases.UseCaseFailed:\nctx.fail(\"Configuration failed.\")\napplication = applications.MigrationAppImpl(configuration)\nreturn typing.cast(_T, ctx.invoke(command, *args, application=application, **kwargs))\nreturn typing.cast(\ntyping.Callable[_P, _T],\nfunctools.update_wrapper(wrapper, command),\n)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.refresh","title":"<code>refresh(application, verbose_exc, **params)</code>","text":"<p>Refreshes the specified application.</p> <p>This command refreshes the specified application by performing certain actions. It accepts an APPLICATION_NAME as a required argument and provides an option to enable verbose exception mode using the --verbose-exc flag.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose exception mode.\",\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef refresh(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Refreshes the specified application.\n    This command refreshes the specified application by performing certain actions.\n    It accepts an APPLICATION_NAME as a required argument and provides an option\n    to enable verbose exception mode using the --verbose-exc flag.\n    \"\"\"\nexit_code = use_cases.refresh(\napplication=application,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.refresh_checksums","title":"<code>refresh_checksums(application, verbose_exc, **params)</code>","text":"<p>Refresh the checksums of files in the specified application.</p> <p>This command updates the checksums of files in the specified application. It recalculates the checksums of all files in the repository and updates them accordingly. This can be useful when the files in the application have been modified or when the checksums need to be synchronized with the repository.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose exception output.\",\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef refresh_checksums(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Refresh the checksums of files in the specified application.\n    This command updates the checksums of files in the specified\n    application. It recalculates the checksums of all files in the\n    repository and updates them accordingly. This can be useful when\n    the files in the application have been modified or when the\n    checksums need to be synchronized with the repository.\n    \"\"\"\nexit_code = use_cases.refresh_checksums(\napplication=application,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.safe_remove","title":"<code>safe_remove(application, migration_version, verbose_exc, **params)</code>","text":"<p>Safely removes a migration from the specified application.</p> <p>This command allows you to safely remove a migration from the specified application. It ensures that the removal process is handled securely and provides an option to enable verbose exception output for detailed error messages.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose exception output.\",\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@click.argument(\n\"migration_version\",\ntype=click.INT,\nmetavar=\"MIGRATION_VERSION\",\nrequired=True,\n)\n@pass_application\ndef safe_remove(\napplication: applications.MigrationApp,\nmigration_version: int,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Safely removes a migration from the specified application.\n    This command allows you to safely remove a migration from the\n    specified application. It ensures that the removal process is\n    handled securely and provides an option to enable verbose\n    exception output for detailed error messages.\n    \"\"\"\nexit_code = use_cases.safe_remove_migration(\napplication=application,\nmigration_version=migration_version,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.safe_remove_all","title":"<code>safe_remove_all(application, verbose_exc, **params)</code>","text":"<p>Safely removes all migrations from the specified application.</p> <p>This command allows you to safely remove all migrations from the specified application. It ensures that the removal process is handled securely and provides an option to enable verbose exception output for detailed error messages.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose exception output.\",\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef safe_remove_all(\napplication: applications.MigrationApp,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Safely removes all migrations from the specified application.\n    This command allows you to safely remove all migrations from the\n    specified application. It ensures that the removal process is\n    handled securely and provides an option to enable verbose exception\n    output for detailed error messages.\n    \"\"\"\nexit_code = use_cases.safe_remove_all_migrations(\napplication=application,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.status","title":"<code>status(application, depth, verbose_exc, **params)</code>","text":"<p>Display the migration status for the specified application.</p> <p>This command allows you to view the migration status of the specified application. It shows the history of applied migrations up to the specified depth.</p> <p>Optionally, you can enable verbose output for the status command and verbose output for exceptions that may occur during the status check.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the status command.\"\n)\n@click.option(\n\"-d\",\n\"--depth\",\ntype=click.INT,\ndefault=-1,\nrequired=False,\nhelp=\"Specify the depth of the migration history to display.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef status(\napplication: applications.MigrationApp,\ndepth: int,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Display the migration status for the specified application.\n    This command allows you to view the migration status of the specified\n    application. It shows the history of applied migrations up to the\n    specified depth.\n    Optionally, you can enable verbose output for the status command and\n    verbose output for exceptions that may occur during the status check.\n    \"\"\"\npresenters.show_status(\napplication=application,\npushed_depth=depth,\nverbose_exc=verbose_exc,\n)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.upgrade","title":"<code>upgrade(application, expression, verbose_exc, **params)</code>","text":"<p>Upgrade the specified application.</p> <p>This command allows you to upgrade the specified application using the given expression or additional arguments. Optionally, you can enable verbose output or verbose output for exceptions during the upgrade process.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the upgrade process.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@click.argument(\n\"expression\",\ntype=click.STRING,\ndefault=\"+\",\nmetavar=\"EXPRESSION\",\nrequired=False,\n)\n@pass_application\ndef upgrade(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"Upgrade the specified application.\n    This command allows you to upgrade the specified application using the\n    given expression or additional arguments. Optionally, you can enable\n    verbose output or verbose output for exceptions during the upgrade process.\n    \"\"\"\nexit_code = use_cases.upgrade(\napplication=application,\nexpression=expression,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.version","title":"<code>version(application, **params)</code>","text":"<p>Display the version information for the specified application.</p> <p>This command allows you to view the version information of the specified application. It shows details such as the application's name, version number, and other relevant details.</p> <p>Optionally, you can enable verbose output for the version command to get more detailed information.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the version command.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@pass_application\ndef version(application: applications.MigrationApp, **params: typing.Any) -&gt; None:\n\"\"\"Display the version information for the specified application.\n    This command allows you to view the version information of the\n    specified application. It shows details such as the application's\n    name, version number, and other relevant details.\n    Optionally, you can enable verbose output for the version command\n    to get more detailed information.\n    \"\"\"\npresenters.show_version(application=application)\n</code></pre>"},{"location":"docs/presentation/cli/#mongorunway.presentation.cli.walk","title":"<code>walk(application, expression, verbose_exc, **params)</code>","text":"<p>Walk through the specified application.</p> <p>This command allows you to perform a walk operation on the specified application using the given expression or additional arguments. The walk operation enables you to traverse the application's structure or perform specific actions.</p> <p>Optionally, you can enable verbose output or verbose output for exceptions during the walk process.</p> Source code in <code>mongorunway\\presentation\\cli.py</code> <pre><code>@cli.command()\n@click.option(\n\"--verbose-exc\",\nis_flag=True,\nhelp=\"Enable verbose output for exceptions during the walk process.\"\n)\n@click.argument(\n\"application_name\",\ntype=click.STRING,\nmetavar=\"APPLICATION_NAME\",\nrequired=True,\n)\n@click.argument(\n\"expression\",\ntype=click.STRING,\nmetavar=\"EXPRESSION\",\nrequired=True,\n)\n@pass_application\ndef walk(\napplication: applications.MigrationApp,\nexpression: str,\nverbose_exc: bool,\n**params: typing.Any,\n) -&gt; None:\n\"\"\"\n    Walk through the specified application.\n    This command allows you to perform a walk operation on the specified\n    application using the given expression or additional arguments. The\n    walk operation enables you to traverse the application's structure or\n    perform specific actions.\n    Optionally, you can enable verbose output or verbose output for exceptions\n    during the walk process.\n    \"\"\"\nexit_code = use_cases.walk(\napplication=application,\nexpression=expression,\nverbose_exc=verbose_exc,\n)\nsys.exit(exit_code)\n</code></pre>"},{"location":"docs/presentation/formatters/","title":"Formatters","text":""},{"location":"docs/presentation/formatters/#mongorunway.presentation.formatters","title":"<code>mongorunway.presentation.formatters</code>","text":""},{"location":"docs/presentation/formatters/#mongorunway.presentation.formatters.__all__","title":"<code>__all__: typing.Sequence[str] = ('format_auditlog_entry', 'format_app_date')</code>  <code>module-attribute</code>","text":""},{"location":"docs/presentation/formatters/#mongorunway.presentation.formatters.format_app_date","title":"<code>format_app_date(application, date_parts)</code>","text":"Source code in <code>mongorunway\\presentation\\formatters.py</code> <pre><code>def format_app_date(\napplication: applications.MigrationApp,\ndate_parts: typing.Optional[typing.Sequence[str]],\n) -&gt; typing.Optional[datetime.datetime]:\nif date_parts is None:\nreturn None\nreturn datetime.datetime.strptime(\n\" \".join(date_parts),\napplication.session.session_date_format,\n)\n</code></pre>"},{"location":"docs/presentation/formatters/#mongorunway.presentation.formatters.format_auditlog_entry","title":"<code>format_auditlog_entry(entry)</code>","text":"Source code in <code>mongorunway\\presentation\\formatters.py</code> <pre><code>def format_auditlog_entry(\nentry: domain_auditlog_entry.MigrationAuditlogEntry, /\n) -&gt; typing.Sequence[str]:\nmigration = entry.migration_read_model\nfailed_msg = \"False\"\nif entry.is_failed():\nfailed_msg = f\"Error: {entry.exc_name}\\nMessage: {entry.exc_message}\"\nreturn [\nentry.format_date(),\nfailed_msg,\nentry.transaction_name,\nf\"Name: {migration.name}\\n\"\nf\"Version: {migration.version}\\n\"\nf\"Is applied: {migration.is_applied}\\n\",\n]\n</code></pre>"},{"location":"docs/presentation/presenters/","title":"Presenters","text":""},{"location":"docs/presentation/presenters/#mongorunway.presentation.presenters","title":"<code>mongorunway.presentation.presenters</code>","text":""},{"location":"docs/presentation/presenters/#mongorunway.presentation.presenters.__all__","title":"<code>__all__: typing.Sequence[str] = ('show_status', 'show_version', 'show_auditlog_entries')</code>  <code>module-attribute</code>","text":""},{"location":"docs/presentation/presenters/#mongorunway.presentation.presenters.show_auditlog_entries","title":"<code>show_auditlog_entries(application, verbose_exc, ascending_date, start=None, end=None, limit=10)</code>","text":"Source code in <code>mongorunway\\presentation\\presenters.py</code> <pre><code>def show_auditlog_entries(\napplication: applications.MigrationApp,\nverbose_exc: bool,\nascending_date: bool,\nstart: typing.Optional[typing.Sequence[str]] = None,\nend: typing.Optional[typing.Sequence[str]] = None,\nlimit: typing.Optional[int] = 10,\n) -&gt; None:\nentries_result = use_cases.get_auditlog_entries(\napplication,\nstart=formatters.format_app_date(application, start),\nend=formatters.format_app_date(application, end),\nlimit=limit,\nverbose_exc=verbose_exc,\nascending_date=ascending_date,\n)\nif entries_result is not use_cases.UseCaseFailed:\noutput.print(\nterminaltables.SingleTable(\n[\n[\"Date\", \"Is Failed\", \"Transaction Type\", \"Migration\"],\n*(formatters.format_auditlog_entry(entry) for entry in entries_result),\n]\n).table\n)\n</code></pre>"},{"location":"docs/presentation/presenters/#mongorunway.presentation.presenters.show_status","title":"<code>show_status(application, verbose_exc, pushed_depth=-1)</code>","text":"Source code in <code>mongorunway\\presentation\\presenters.py</code> <pre><code>def show_status(\napplication: applications.MigrationApp,\nverbose_exc: bool,\npushed_depth: int = -1,\n) -&gt; None:\nstatus_result = use_cases.get_status(\napplication=application,\nverbose_exc=verbose_exc,\npushed_depth=pushed_depth,\n)\nif status_result is not use_cases.UseCaseFailed:\nall_pushed_successfully, pushed_depth = status_result\nif all_pushed_successfully:\npresentation = f\"All migrations applied successfully in depth {pushed_depth!r}\"\nelse:\npresentation = f\"Applying failed in depth {pushed_depth!r}\"\npresentation += f\" \" + (\nf\"({application.session.get_current_version()}\"\nf\" \"\nf\"of {len(list(application.session.get_all_migration_models()))})\"\n)\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_info(presentation)\n</code></pre>"},{"location":"docs/presentation/presenters/#mongorunway.presentation.presenters.show_version","title":"<code>show_version(application)</code>","text":"Source code in <code>mongorunway\\presentation\\presenters.py</code> <pre><code>def show_version(application: applications.MigrationApp) -&gt; None:\nversion_result = application.session.get_current_version()\nif version_result is not use_cases.UseCaseFailed:\npresentation = f\"Current applied version is {version_result}\"\nall_applied_migrations_len = len(list(application.session.get_all_migration_models()))\npresentation += f\" \" + f\"({version_result} of {all_applied_migrations_len})\"\noutput.print_heading(output.HEADING_LEVEL_ONE, output.TOOL_HEADING_NAME)\noutput.print_success(presentation)\n</code></pre>"},{"location":"docs/quickstart_steps/installation/","title":"Introduction to Mongorunway","text":"<p>Mongorunway is hosted on GitHub at https://github.com/Animatea/mongorunway</p> <p>To install Mongorunway, you can use any package manager such as pip, poetry, etc.</p>"},{"location":"docs/quickstart_steps/installation/#install-with-pip","title":"Install with Pip","text":"<pre><code>pip install mongorunway\n</code></pre>"},{"location":"docs/quickstart_steps/installation/#install-with-poetry","title":"Install with Poetry","text":"<pre><code>poetry add mongorunway\n</code></pre>"},{"location":"docs/quickstart_steps/setup/","title":"Configuring Mongorunway","text":"<p>Mongorunway configuration starts with a configuration file. Currently, Mongorunway supports the  <code>.yaml</code> configuration file format. Therefore, you need to create a <code>mongorunway.yaml</code> file and place  it either in the current directory or in one of the directories within the current directory.  Let's consider the second option. The structure of your project may look like this:</p> <pre><code>project/\nmigrations/\n# The `__init__.py` file will be convenient for \n# storing migration process rules in the future.\n__init__.py \nmongorunway.yaml\n</code></pre>"},{"location":"docs/quickstart_steps/setup/#configuration-file","title":"Configuration file","text":"<p>Object path</p> <p>In some configuration file options, you need to provide a module path that contains the  name of a specific object. Most objects are imported in the <code>root</code> <code>__init__.py</code> of the  <code>mongorunway</code> package, which allows you to omit the full path to the implementations of  certain objects.</p> <p>If any errors occur with these options, you can specify the full path to the object,  for example, <code>mongorunway.domain.migration_event.StartingEvent</code> instead of  <code>mongorunway.StartingEvent</code>. </p> <p>Both options are valid.</p> <pre><code>mongorunway:\n# Required. Filesystem configuration.\nfilesystem:\n# Required. Path to the directory that contains migration files.\nscripts_dir: project/migrations\n# Optional. Path to the class that implements the filename strategy \n# interface. Default value is shown below.\nfilename_strategy: mongorunway.NumericalFilenameStrategy\n# Optional. If set to True, the filename will be transformed according \n# to the specified filename strategy when generating a migration file \n# template.\nuse_filename_strategy: true\n# Required. This section contains keys that represent the names of migration \n# applications.\napplications:\n# Required. Here is the configuration of the application named 'test'. You \n# can create multiple applications, for example, one application connects \n# to a test database, and once its migration is successful, you can \n# confidently migrate the same process using the main application.\n# You can use the corresponding service to check the migration status.\ntest:\n# Required. This section contains parameters that will be passed to the \n# pymongo.MongoClient constructor.\napp_client:\nhost: localhost\nport: 27017\n# Required. The name of the database that will be used for migration.\napp_database: TestDatabase\n# Required. This section contains the configuration of the migration \n# repository, which is used for managing migration records.\napp_repository:\n# Case #1 (Required/Optional): If you want to use a repository based \n# on MongoDB, you only need to specify this parameter, which represents \n# the collection where migrations will be stored.\ncollection: migrations\n# Case #2 (Required/Optional): Otherwise, if you want to use your own \n# implementation of the repository, you can pass two parameters: \n# `reader` and `type`.\n#\n# ! It is worth noting that the `reader` implementation by default \n# takes one argument, which is the entire configuration of the current\n# application (test). This way, you can pass your own arguments to the \n# `reader` from the configuration file and initialize them as needed.\n# Required/Optional. Path to the class that implements the repository \n# interface.\ntype: mongorunway.MongoModelRepositoryImpl\n# Required/Optional. Path to the function that reads the configuration \n# and initializes the received data from the configuration file if \n# necessary.\nreader: mongorunway.default_mongo_repository_reader\n# (Required/Optional). This section contains the configuration of the \n# migration audit log, which is used for logging the migration history.\napp_auditlog_journal:\n# Case #1 (Required/Optional): If you want to use an audit log based \n# on MongoDB, you only need to specify this parameter, which represents \n# the collection where audit log entries will be stored.\ncollection: auditlog\n# Case #2 (Required/Optional): Otherwise, if you want to use your own \n# implementation of the audit log, you can pass two parameters: `reader` \n# and `type`.\n#\n# ! It is worth noting that the `reader` implementation by default takes \n# one argument, which is the entire configuration of the current \n# application (test). This way, you can pass your own arguments to the \n# `reader` from the configuration file and initialize them as needed.\n# Required/Optional. Path to the class that implements the audit log \n# interface.\ntype: mongorunway.MongoAuditlogJournalImpl\n# Required/Optional. Path to the function that reads the configuration \n# and initializes the received data from the configuration file if \n# necessary.\nreader: mongorunway.default_mongo_auditlog_journal_reader\n# Optional. Timezone for the migration application, which is used wherever \n# the current date is recorded (e.g., in the audit log).\napp_timezone: \"UTC\"\n# Optional. Audit log limit (int), default is None. If specified, it deletes  \n# old entries and adds new ones once the limit is reached.\napp_auditlog_limit: None\n# Optional. Events to which the application will subscribe.\napp_events:\n# Path to the class that is a subclass of the base Mongorunway event.\nmongorunway.StartingEvent:\n# List of paths to handler functions that will be added to the \n# specified event.\n#\n# ! Currently, you can use the \"magical\" prefix `Prioritized`, \n# which wraps the handler function in a prioritized proxy. \n# Such handlers are processed first, compared to ordinary ones, \n# regardless of the priority of prioritized handlers. \n# If multiple prioritized handlers are set, they will be processed \n# sequentially according to their priority.\n- mongorunway.sync_scripts_with_repository\n- Prioritized[1, mongorunway.recalculate_migrations_checksum]\n# mongorunway.ClosingEvent:\n#   - ...\n# Optional. If set to False, regardless of the audit log configuration, \n# it will not be used. Otherwise, the audit log configuration is required.\nuse_auditlog: true\n# Optional. If set to False, all logging handlers in the `logging` module \n# will be disabled.\nuse_logging: true\n# Optional. If set to False, all Mongorunway indexes will be removed from \n# the migrations collection. Otherwise, they will be added.\n#\n# ! This parameter is only relevant if your repository is based on MongoDB.\nuse_indexing: true\n# Optional. If set to False, Mongorunway schema validation rules will be \n# removed from the migrations collection. Otherwise, they will be added.\n#\n# ! This parameter is only relevant if your repository is based on MongoDB.\nuse_schema_validation: true\n# Optional. If set to False, the handling of a transaction that fails will \n# be limited to console output. Otherwise, an exception will be raised.\nraise_on_transaction_failure: true\n# Optional. Mongorunway loggers configuration.\n# The default configuration is provided below.\nlogging:\nversion: 1\ndisable_existing_loggers: false\nformatters:\nsimpleFormatter:\nformat: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\ndatefmt: \"%Y-%m-%d %H:%M:%S\"\nhandlers:\nconsoleHandler:\nclass: \"logging.StreamHandler\"\nlevel: \"DEBUG\"\nformatter: \"simpleFormatter\"\nloggers:\nroot:\nlevel: \"INFO\"\nhandlers:\n- \"consoleHandler\"\npropagate: 0\n</code></pre>"},{"location":"docs/quickstart_steps/setup/#clean-configuration-file","title":"Clean configuration file","text":"<p>A clean configuration file with minimal settings may look like this:</p> <pre><code>mongorunway:\nfilesystem:\nscripts_dir: project/migrations\napplications:\ntest:\napp_client:\nhost: localhost\nport: 27017\napp_database: TestDatabase\napp_repository:\ncollection: migrations\n</code></pre>"},{"location":"docs/quickstart_steps/setup/#optional-optimizations","title":"Optional optimizations","text":"<p>If you are using a MongoDB-based repository or need to initialize, for example, a directory  for migrations, you can use the <code>init</code> command.</p>"},{"location":"docs/quickstart_steps/setup/#init","title":"&gt; init","text":"Argument Description <code>APPLICATION_NAME</code> The name of the application to initialize. Option Description <code>--verbose-exc</code> Enable verbose output for exceptions during the init command. <code>--scripts-dir</code> Initialize the scripts directory for the specified application. <code>--collection</code> Initialize the collection for the specified application <code>--indexes</code> Initialize the indexes for the specified application's collection. <code>--schema-validation</code> Enable schema validation for the specified application's collection."},{"location":"docs/quickstart_steps/usage/","title":"Using Mongorunway","text":""},{"location":"docs/quickstart_steps/usage/#introduction-to-usage","title":"Introduction to usage","text":"<p>So, we have configured our minimal configuration file, and now it looks as follows:</p> <pre><code>mongorunway:\nfilesystem:\nscripts_dir: project/mongorunway\napplications:\ntest:\napp_client:\nhost: localhost\nport: 27017\napp_database: TestDatabase\napp_repository:\ncollection: migrations\n</code></pre> <p>Mongorunway provides the following list of commands:</p> <pre><code>Usage: mongorunway [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  auditlog           Display the audit log entries for the specified...\n  check-files        Check the integrity of files in the specified...\n  create-template    Create a migration template for the specified...\n  downgrade          Downgrade the specified application.\n  init               Initialize the specified application for migration.\n  refresh            Refreshes the specified application.\n  refresh-checksums  Refresh the checksums of files in the specified...\n  safe-remove        Safely removes a migration from the specified...\n  safe-remove-all    Safely removes all migrations from the specified...\n  status             Display the migration status for the specified...\n  upgrade            Upgrade the specified application.\n  version            Display the version information for the specified...\n  walk               Walk through the specified application.\n</code></pre> <p>Next, let's proceed with a step-by-step breakdown of the functionality.</p>"},{"location":"docs/quickstart_steps/usage/#1-creating-migration-files","title":"#1 Creating migration files","text":"<p>The next thing we need to do is create migration files. To do this, we can use the command  <code>create-template</code> or create the file manually. Let's explore the first option:</p> <pre><code>mongorunway create-template test --name create_abc_collection --version 1\n</code></pre> <p>Where the <code>-n,--name</code> option is required and represents the name of the migration file, and the  <code>-v,--version</code> option is optional and represents the migration version.</p> <p>Note</p> <p>The --version option must be sequential. For example, if the version of the last migration is  2, then the version passed to this option should only be 3; otherwise, an error will be raised.</p> <p>A migration file was created in the migrations directory with a transformed name  (<code>001_create_abc_collection.py</code>, by default set to <code>NumericalFilenameStrategy</code>):</p> <pre><code>project/\n    mongorunway/\n        __init__.py \n        001_create_abc_collection.py\n        mongorunway.yaml     \n</code></pre> Show migration file source <pre><code>from __future__ import annotations\nimport typing\nimport mongorunway\n# Required, used by Mongorunway.\nversion = 1\n@mongorunway.migration\ndef upgrade() -&gt; typing.List[mongorunway.MigrationCommand]:\nreturn []\n@mongorunway.migration\ndef downgrade() -&gt; typing.List[mongorunway.MigrationCommand]:\nreturn []\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#2-modifying-the-migration-file","title":"#2 Modifying the migration file","text":"<p>Let's make sure that the content of the migration file matches its name by adding commands.</p> <p>Info</p> <p>To add a description to the migration, include documentation in the migration module.</p> Show refactored migration file source <pre><code>from __future__ import annotations\nimport typing\nimport mongorunway\n# Required, used by Mongorunway.\nversion = 1\n@mongorunway.migration\ndef upgrade() -&gt; typing.List[mongorunway.MigrationCommand]:\nreturn [\nmongorunway.create_collection(\"abc\"),\n]\n@mongorunway.migration\ndef downgrade() -&gt; typing.List[mongorunway.MigrationCommand]:\nreturn [\nmongorunway.drop_collection(\"abc\"),\n]\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#command-aliases","title":"Command Aliases","text":"<p>Here it is worth noting that <code>create_collection</code> and <code>drop_collection</code> are aliases that have been  injected into the global scope of the mongorunway.infrastructure.commands module using the  make_snake_case_global_alias decorator. For a more explicit implementation, you can use the  direct implementation of commands as classes <code>CreateCollection</code> and <code>DropCollection</code>.</p>"},{"location":"docs/quickstart_steps/usage/#3-updating-the-current-state","title":"#3 Updating the current state","text":"<p>To update the current state of migrations (synchronize recently created migration files with  the repository), you can use the <code>refresh</code> command:</p> <pre><code>mongorunway refresh test\n</code></pre> Argument Description <code>APPLICATION_NAME</code> Name of the application to refresh. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the refresh command. Expand example output <pre><code>&gt; mongorunway refresh test\n2023-06-11 01:17:53 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-11 01:17:53 - mongorunway.ux - INFO - sync_scripts_with_repository: migration '001_create_abc_collection' with version 1 was synced and successfully append to pending.\n===========\nMongorunway\n===========\n'001_create_abc_collection' migrations was successfully synced.\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#4-managing-migration-processes","title":"#4 Managing migration processes","text":"<p>There are currently three commands available to manage migration processes: <code>downgrade</code>,  <code>upgrade</code>, and <code>walk</code>.</p>"},{"location":"docs/quickstart_steps/usage/#downgrade","title":"&gt; downgrade","text":"<p>This command allows you to downgrade the specified application using the given expression or additional arguments. Optionally, you can enable verbose output or verbose output for exceptions during the downgrade process.</p> <p>Supported expressions: <code>-?\\d+ | - | all</code></p> <p>Note</p> <p>To prevent click from interpreting negative numbers as options, you need to precede the  number with --. See the example output below (Expand example output).</p> Expand Example <pre><code>mongorunway downgrade test -1\nmongorunway downgrade test 1\nmongorunway downgrade test all\nmongorunway downgrade test -\n</code></pre> Argument Description <code>APPLICATION_NAME</code> The name of the application to downgrade. <code>EXPRESSION</code>, optional An optional expression or additional argument for the downgrade command. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the downgrade command. Expand example output <pre><code>&gt; mongorunway downgrade test -- -1\n2023-06-10 23:35:56 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-10 23:35:56 - mongorunway.session - INFO - Mongorunway MongoDB context successfully initialized with MongoDB session id (ca795db9ff034582b05847faf480aae9)\n2023-06-10 23:35:56 - mongorunway.ui - INFO - test: downgrading waiting migration (#1 -&gt; #None)...\n2023-06-10 23:35:56 - mongorunway.session - INFO - Mongorunway transaction context successfully initialized with Mongorunway session id (0710ebfd1c414d34bbe6f62730a9c36d)\n2023-06-10 23:35:56 - mongorunway.transactions - INFO - Beginning a transaction in MongoDB session (ca795db9ff034582b05847faf480aae9) for (downgrade) process.\n2023-06-10 23:35:56 - mongorunway.transactions - INFO - DropCollection command successfully applied (1 of 1).\n2023-06-10 23:35:56 - mongorunway.ui - INFO - test: successfully downgraded to (#None).\n===========\nMongorunway\n===========\nVerbose mode enabled.\nSuccessfully downgraded 1 migration(s).\nDowngraded 1 migration(s) in 0.0055162906646728516s.\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#upgrade","title":"&gt; upgrade","text":"<p>This command allows you to upgrade the specified application using the given expression or additional arguments. Optionally, you can enable verbose output or verbose output for exceptions during the upgrade process.</p> <p>Supported expressions: <code>+?\\d+ | + | all</code></p> Expand Example <pre><code>mongorunway upgrade test +1\nmongorunway upgrade test 1\nmongorunway upgrade test all\nmongorunway upgrade test +\n</code></pre> Argument Description <code>APPLICATION_NAME</code> The name of the application to upgrade. <code>EXPRESSION</code>, optional An optional expression or additional argument for the upgrade command. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the upgrade command. Expand example output <pre><code>&gt; mongorunway upgrade test +1    \n2023-06-10 23:36:16 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-10 23:36:16 - mongorunway.session - INFO - Mongorunway MongoDB context successfully initialized with MongoDB session id (ef6ece8e7c97436cbf691f1d91fc33bc)\n2023-06-10 23:36:16 - mongorunway.ui - INFO - test: upgrading waiting migration (#None -&gt; #1)...\n2023-06-10 23:36:16 - mongorunway.session - INFO - Mongorunway transaction context successfully initialized with Mongorunway session id (0659cda9dc464ffd9b8169b090e38195)\n2023-06-10 23:36:16 - mongorunway.transactions - INFO - Beginning a transaction in MongoDB session (ef6ece8e7c97436cbf691f1d91fc33bc) for (upgrade) process.\n2023-06-10 23:36:16 - mongorunway.transactions - INFO - CreateCollection command successfully applied (1 of 1).\n2023-06-10 23:36:16 - mongorunway.ui - INFO - test: Successfully upgraded to (#1).\n===========\nMongorunway\n===========\nVerbose mode enabled.\n10003 Successfully upgraded 1 migration(s).\nUpgraded 1 migration(s) in 0.012265443801879883s.\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#walk","title":"&gt; walk","text":"<p>This command allows you to perform a walk operation on the specified application using the given expression or additional arguments. The walk operation enables you to traverse the application's structure or perform specific actions.</p> <p>Optionally, you can enable verbose output or verbose output for exceptions during the walk process.</p> <p>Supported expressions: <code>[+-]?\\d+ | + | -</code></p> Expand Example <pre><code>mongorunway walk test +1\nmongorunway walk test -1\nmongorunway walk test +\nmongorunway walk test -\n</code></pre> Argument Description <code>APPLICATION_NAME</code> The name of the application for the walk command. <code>EXPRESSION</code> Expression or additional argument for the walk command. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the walk command. Expand example output <pre><code>&gt; mongorunway walk test -\n2023-06-10 23:32:57 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n2023-06-10 23:32:57 - mongorunway.session - INFO - Mongorunway MongoDB context successfully initialized with MongoDB session id (766a81ff90574c23ab950d13bd1a3cb5)\n2023-06-10 23:32:57 - mongorunway.ui - INFO - test: downgrading waiting migration (#1 -&gt; #None)...\n2023-06-10 23:32:57 - mongorunway.session - INFO - Mongorunway transaction context successfully initialized with Mongorunway session id (cfa37d128911401198fddab4741ea8a7)\n2023-06-10 23:32:57 - mongorunway.transactions - INFO - Beginning a transaction in MongoDB session (766a81ff90574c23ab950d13bd1a3cb5) for (downgrade) process.\n2023-06-10 23:32:57 - mongorunway.transactions - INFO - DropCollection command successfully applied (1 of 1).\n2023-06-10 23:32:57 - mongorunway.ui - INFO - test: successfully downgraded to (#None).\n===========\nMongorunway\n===========\nVerbose mode enabled.\n10003 Successfully downgraded 1 migration(s).\nDowngraded 1 migration(s) in 0.0050008296966552734s.\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#5-verifying-migration-results","title":"#5 Verifying migration results","text":"<p>To retrieve the current state, there are commands such as <code>auditlog</code>, <code>status</code>, and <code>version</code>.</p>"},{"location":"docs/quickstart_steps/usage/#auditlog","title":"&gt; auditlog","text":"<p>This command allows you to view the audit log entries for the specified application. You can filter the entries by specifying a start and/or end timestamp or date. The maximum number of entries displayed can be limited, and you can choose to sort the entries in ascending order by date.</p> <p>Optionally, you can enable verbose output for exceptions that may occur during the audit log command.</p> <p>Info</p> <p>To enable the audit log functionality, I added the following parameters to the  configuration file: <pre><code>mongorunway:\n# ...\napplications:\n# ...\napp_auditlog_journal:\ncollection: auditlog\nuse_auditlog: true\n</code></pre></p> <p>Start, End</p> <p>You should specify the <code>--start</code> and <code>--end</code> options in the format specified in the application  configuration by the application.app_date_fmt parameter.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application for which to display the audit log entries. Option Is Flag Description <code>-s</code>, <code>--start</code> False Start timestamp or date for filtering audit log entries. <code>-e</code>, <code>--end</code> False End timestamp or date for filtering audit log entries. <code>-l</code>, <code>--limit</code> False Maximum number of audit log entries to display. <code>-a</code>, <code>--ascending</code> True Sort the audit log entries in ascending order by date. <code>--verbose-exc</code> True Enable verbose output for exceptions during the audit log command. Expand example output <pre><code>&gt; mongorunway auditlog test                 \n2023-06-11 00:21:55 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n</code></pre> Date Is Failed Transaction Type Migration 2023-06-10 21:21:06 False UpgradeTransaction Name: 001_create_abc_collection Version: 1 Is applied: False"},{"location":"docs/quickstart_steps/usage/#status","title":"&gt; status","text":"<p>This command allows you to view the migration status of the specified application. It shows the history of applied migrations up to the specified depth.</p> <p>Optionally, you can enable verbose output for the status command and verbose output for exceptions that may occur during the status check.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application for which to display the migration status. Option Is Flag Description <code>-d</code>, <code>--depth</code> False Specify the depth of the migration history to display. <code>--verbose-exc</code> True Enable verbose output for exceptions during the status command. Expand example output <ul> <li> <p>Case 1 <pre><code>&gt; mongorunway status test \n2023-06-11 00:25:04 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nAll migrations applied successfully in depth -1 (1 of 1)\n</code></pre></p> </li> <li> <p>Case 2 <pre><code>&gt; mongorunway status test -d 2\n2023-06-11 00:25:42 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nValueError : Depth (2) cannot be more than migration files count (1).\n</code></pre></p> </li> </ul>"},{"location":"docs/quickstart_steps/usage/#version","title":"&gt; version","text":"<p>This command allows you to view the version information of the specified application. It shows details such as the application's name, version number, and other relevant details.</p> <p>Optionally, you can enable verbose output for the version command to get more detailed information.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application for which to display the version information. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the version command. Expand example output <pre><code>&gt; mongorunway version test\n2023-06-11 00:15:53 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nCurrent applied version is 1 (1 of 1)\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#6-removing-migrations-safely","title":"#6 Removing migrations safely","text":"<p>There are two commands available for safe removal of migrations:  <code>safe-remove</code> and <code>safe-remove-all</code> .</p> <p>Why are they safe?</p> <p>These methods are safe in a way that they allow you to control the process  of removing migrations sequentially. For example, if you are on schema version 4,  you will not be able to remove the schema with version 3.</p> <p>These methods also allow you to remove migration data both from your repository  and from the migrations directory.</p>"},{"location":"docs/quickstart_steps/usage/#safe-remove","title":"&gt; safe-remove","text":"Argument Description <code>APPLICATION_NAME</code> The name of the application to remove migration from. <code>MIGRATION_VERSION</code> Migration version to remove. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the safe-remove command. Expand example output <pre><code>&gt; mongorunway safe-remove test 3\n2023-06-12 14:31:32 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nMigration with version 3 has been successfully deleted.\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#safe-remove-all","title":"&gt; safe-remove-all","text":"<p>Warning</p> <p>This command deletes all files in the directory that do NOT start with an underscore (_)  and have the extension <code>.py</code>.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application to remove migrations from. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the safe-remove-all command. Expand example output <pre><code>&gt; mongorunway safe-remove-all test\n2023-06-12 14:32:19 - mongorunway.ux - INFO - Mongorunway loggers successfully configured.\n===========\nMongorunway\n===========\nSuccessfully deleted 2 migration(s).\n</code></pre>"},{"location":"docs/quickstart_steps/usage/#7-checking-files-integrity-and-fixing-any-inconsistencies","title":"#7 Checking files integrity and fixing any inconsistencies","text":""},{"location":"docs/quickstart_steps/usage/#refresh-checksums","title":"&gt; refresh-checksums","text":"<p>If your application is subscribed to a handler that compares checksums of files from the  repository with the current state of the migration file, and it detects any inconsistencies,  you can recalculate the checksums of modified files using the <code>refresh-checksums</code> command.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application to refresh checksums for. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the refresh-checksums command."},{"location":"docs/quickstart_steps/usage/#check-files","title":"&gt; check-files","text":"<p>If you want to monitor changes in your files, you can use the <code>check-files</code> command, which  compares the checksums of files and displays information in the terminal in case of any  inconsistencies.</p> <p>This command also supports raising an error, which can be useful for CI  (Continuous Integration) purposes.</p> Argument Description <code>APPLICATION_NAME</code> The name of the application to refresh checksums for. Option Is Flag Description <code>--verbose-exc</code> True Enable verbose output for exceptions during the check-files command. <code>--raise-exc</code> True Throws an exception if a mismatch is found."},{"location":"docs/shared/api/","title":"Api","text":""},{"location":"docs/shared/api/#mongorunway.api","title":"<code>mongorunway.api</code>","text":"<p>A module that provides high-level tools for public use.</p>"},{"location":"docs/shared/api/#mongorunway.api.__all__","title":"<code>__all__: typing.Sequence[str] = ('create_app', 'raise_if_migration_version_mismatch', 'migration', 'migration_with_rule')</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/api/#mongorunway.api.create_app","title":"<code>create_app(name, configuration=None, *, raise_on_none=False, verbose_exc=False)</code>","text":"<p>Creates a migration application.</p> <p>Creates a migration application based on the provided parameters. Uses a use case to initialize the application configuration.</p> PARAMETER DESCRIPTION <code>name</code> <p>The name of the application for which the creation options will be taken from the configuration file. The application name should match the application name in the configuration file.</p> <p> TYPE: <code>str</code> </p> <code>configuration</code> <p>The path to the configuration file or the configuration object required for initializing the application.</p> <p> TYPE: <code>typing.Optional[typing.Union[os.PathLike[str], str, pathlib.Path, config.Config]]</code> DEFAULT: <code>None</code> </p> <code>raise_on_none</code> <p>By default, the use-cases return None and do not raise exceptions. If <code>raise_on_none</code> is True, an exception will be raised on a failed attempt to initialize the application.</p> <p> TYPE: <code>bool, optional</code> DEFAULT: <code>False</code> </p> <code>verbose_exc</code> <p>In case of an exception being raised on a failed attempt to initialize the application, the exception information will be more detailed if <code>verbose_exc</code> is True.</p> <p> TYPE: <code>bool, optional</code> DEFAULT: <code>False</code> </p> RAISES DESCRIPTION <code>RuntimeError</code> <p>If <code>raise_on_none</code> is True and the initialization of the application fails, this exception will be raised.</p> RETURNS DESCRIPTION <code>typing.Union[MigrationApp, typing.Optional[MigrationApp]]</code> <p>If <code>raise_on_none</code> is True, an application object is guaranteed to be returned or an exception is raised. Otherwise, if the application initialization fails, None is returned.</p> Source code in <code>mongorunway\\api.py</code> <pre><code>def create_app(\nname: str,\nconfiguration: typing.Optional[\ntyping.Union[os.PathLike[str], str, pathlib.Path, config.Config]\n] = None,\n*,\nraise_on_none: bool = False,\nverbose_exc: bool = False,\n) -&gt; typing.Union[MigrationApp, typing.Optional[MigrationApp]]:\nr\"\"\"Creates a migration application.\n    Creates a migration application based on the provided parameters.\n    Uses a use case to initialize the application configuration.\n    Parameters\n    ----------\n    name : str\n        The name of the application for which the creation options will\n        be taken from the configuration file. The application name should\n        match the application name in the configuration file.\n    configuration : typing.Optional[typing.Union[os.PathLike[str], str, pathlib.Path, config.Config]]\n        The path to the configuration file or the configuration object\n        required for initializing the application.\n    raise_on_none : bool, optional\n        By default, the use-cases return None and do not raise exceptions.\n        If `raise_on_none` is True, an exception will be raised on a failed\n        attempt to initialize the application.\n    verbose_exc : bool, optional\n        In case of an exception being raised on a failed attempt to initialize\n        the application, the exception information will be more detailed if\n        `verbose_exc` is True.\n    Raises\n    ------\n    RuntimeError\n        If `raise_on_none` is True and the initialization of the application fails,\n        this exception will be raised.\n    Returns\n    -------\n    typing.Union[MigrationApp, typing.Optional[MigrationApp]]\n        If `raise_on_none` is True, an application object is guaranteed to be\n        returned or an exception is raised. Otherwise, if the application\n        initialization fails, None is returned.\n    \"\"\"\nif not isinstance(configuration, config.Config) or configuration is None:\nconfiguration = use_cases.read_configuration(\nconfig_filepath=str(configuration) if configuration is not None else configuration,\napp_name=name,\nverbose_exc=verbose_exc,\n)\nif configuration is not use_cases.UseCaseFailed:\nreturn applications.MigrationAppImpl(configuration=configuration)\nif raise_on_none:\nraise RuntimeError(f\"Creation of {name!r} application is failed.\")\nreturn None\n</code></pre>"},{"location":"docs/shared/api/#mongorunway.api.migration","title":"<code>migration(process_func)</code>","text":"<p>Wraps a function in a migration process.</p> <p>Wraps a function in a migration process. The function should return either a ready-to-use migration process object or a sequence containing implementations of migration command interfaces. Otherwise, an exception will be raised (see the <code>Raises</code> section).</p> <p>Note</p> <p>name: If the provided object does not have the <code>__name__</code> attribute, the default name <code>UNDEFINED_PROCESS</code> will be set, which is used for debugging and logging migration processes.</p> <p>globals: If the provided object does not have the <code>__globals__</code> attribute, an <code>AttributeError</code> will be raised (see the <code>Raises</code> section).</p> PARAMETER DESCRIPTION <code>process_func</code> <p>The function that returns either a ready-to-use migration process object or a sequence containing implementations of migration command interfaces.</p> <p> TYPE: <code>types.FunctionType</code> </p> RETURNS DESCRIPTION <code>domain_migration.MigrationProcess</code> <p>A migration process object that contains information about the migration version, process name, and set of migration commands. If the function returns an already created migration process, no new objects will be created.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the function did not return an instance of the migration process class and the return value is not an instance of collections.abc.Sequence.</p> <code>AttributeError</code> <p>If the function did not return an instance of the migration process class and the module where the function is implemented does not contain the global value <code>version</code>.</p> Source code in <code>mongorunway\\api.py</code> <pre><code>def migration(process_func: types.FunctionType, /) -&gt; domain_migration.MigrationProcess:\nr\"\"\"Wraps a function in a migration process.\n    Wraps a function in a migration process. The function should return\n    either a ready-to-use migration process object or a sequence containing\n    implementations of migration command interfaces. Otherwise, an exception\n    will be raised (see the `Raises` section).\n    !!! note\n        **__name__**: If the provided object does not have the `__name__`\n        attribute, the default name `UNDEFINED_PROCESS` will be set, which is\n        used for debugging and logging migration processes.\n        **__globals__**: If the provided object does not have the `__globals__`\n        attribute, an `AttributeError` will be raised (see the `Raises`\n        section).\n    Parameters\n    ----------\n    process_func : types.FunctionType\n        The function that returns either a ready-to-use migration process object\n        or a sequence containing implementations of migration command interfaces.\n    Returns\n    -------\n    domain_migration.MigrationProcess\n        A migration process object that contains information about the migration\n        version, process name, and set of migration commands. If the function\n        returns an already created migration process, no new objects will be\n        created.\n    Raises\n    ------\n    ValueError\n        If the function did not return an instance of the migration process\n        class and the return value is not an instance of collections.abc.Sequence.\n    AttributeError\n        If the function did not return an instance of the migration process\n        class and the module where the function is implemented does not contain\n        the global value `version`.\n    \"\"\"\nfunc_callback = process_func()\nif isinstance(func_callback, domain_migration.MigrationProcess):\nreturn func_callback\nif not isinstance(func_callback, collections.abc.Sequence):\nraise ValueError(\nf\"Migration process func {process_func!r} must return sequence of commands.\"\n)\nversion = getattr(process_func, \"__globals__\", {}).get(\"version\", None)\nif version is None:\nfunc_file = \"\"\nif hasattr(process_func, \"__code__\"):\nfunc_file = process_func.__code__.co_filename\nraise AttributeError(f\"Migration module {func_file!r} should have 'version' variable.\")\nreturn domain_migration.MigrationProcess(\nfunc_callback,\nmigration_version=version,\nname=getattr(process_func, \"__name__\", \"UNDEFINED_PROCESS\"),\n)\n</code></pre>"},{"location":"docs/shared/api/#mongorunway.api.migration_with_rule","title":"<code>migration_with_rule(rule)</code>","text":"<p>Adds a rule to the migration process.</p> <p>Returns the provided migration process object with the added rule.</p> PARAMETER DESCRIPTION <code>rule</code> <p>The rule to add to the migration process.</p> <p> TYPE: <code>domain_rule.MigrationBusinessRule</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>If the value passed to the decorator is not an instance of the migration process class.</p> Source code in <code>mongorunway\\api.py</code> <pre><code>def migration_with_rule(\nrule: domain_rule.MigrationBusinessRule, /\n) -&gt; typing.Callable[[_ProcessT], _ProcessT]:\nr\"\"\"Adds a rule to the migration process.\n    Returns the provided migration process object with the added rule.\n    Parameters\n    ----------\n    rule : domain_rule.MigrationBusinessRule\n        The rule to add to the migration process.\n    Raises\n    ------\n    ValueError\n        If the value passed to the decorator is not an instance of the migration\n        process class.\n    \"\"\"\nif not isinstance(rule, domain_rule.MigrationBusinessRule):\nraise ValueError(f\"Rule must be instance of {domain_rule.MigrationBusinessRule!r}.\")\ndef decorator(process: _ProcessT) -&gt; _ProcessT:\nprocess.add_rule(rule)\nreturn process\nreturn decorator\n</code></pre>"},{"location":"docs/shared/api/#mongorunway.api.raise_if_migration_version_mismatch","title":"<code>raise_if_migration_version_mismatch(application, expected_version)</code>","text":"<p>Raises an error if the versions do not match.</p> <p>Raises an error if the provided version or version getter does not match the version of the given migration application. The expected version or the return value of the expected version getter should be an instance of the <code>int</code> class. Otherwise, the comparison operation may behave unpredictably.</p> PARAMETER DESCRIPTION <code>application</code> <p>The migration application whose version you want to check.</p> <p> TYPE: <code>applications.MigrationApp</code> </p> <code>expected_version</code> <p>The expected version of the current migration application. The expected version or the return value of the expected version getter should be an instance of the <code>int</code> class. Otherwise, the comparison operation may behave unpredictably.</p> <p> TYPE: <code>typing.Union[int, typing.Callable[[], int]]</code> </p> RAISES DESCRIPTION <code>ValueError</code> <p>Raises an error if the provided version or version getter does not match the version of the given migration application.</p> Source code in <code>mongorunway\\api.py</code> <pre><code>def raise_if_migration_version_mismatch(\napplication: applications.MigrationApp,\nexpected_version: typing.Union[int, typing.Callable[[], int]],\n) -&gt; None:\nr\"\"\"Raises an error if the versions do not match.\n    Raises an error if the provided version or version getter does not\n    match the version of the given migration application. The expected\n    version or the return value of the expected version getter should\n    be an instance of the `int` class. Otherwise, the comparison operation\n    may behave unpredictably.\n    Parameters\n    ----------\n    application : applications.MigrationApp\n        The migration application whose version you want to check.\n    expected_version : typing.Union[int, typing.Callable[[], int]]\n        The expected version of the current migration application.\n        The expected version or the return value of the expected version\n        getter should be an instance of the `int` class. Otherwise, the\n        comparison operation may behave unpredictably.\n    Raises\n    ------\n    ValueError\n        Raises an error if the provided version or version getter does\n        not match the version of the given migration application.\n    \"\"\"\nif callable(expected_version):\nexpected_version = expected_version()\nif (current_version := (application.session.get_current_version() or 0)) != expected_version:\nraise ValueError(\nf\"Migration version mismatch.\"\n\" \"\nf\"Actual: {current_version!r}, but {expected_version!r} expected.\"\n)\nreturn None\n</code></pre>"},{"location":"docs/shared/mongo/","title":"Mongo","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo","title":"<code>mongorunway.mongo</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.Client","title":"<code>Client = pymongo.MongoClient[DocumentType]</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.ClientSession","title":"<code>ClientSession = client_session.ClientSession</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.Collection","title":"<code>Collection = pymongo.collection.Collection[DocumentType]</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.Cursor","title":"<code>Cursor = pymongo.cursor.Cursor[DocumentType]</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.Database","title":"<code>Database = database.Database[DocumentType]</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.DocumentType","title":"<code>DocumentType: typing.TypeAlias = typing.Dict[str, typing.Any]</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.__all__","title":"<code>__all__: typing.Sequence[str] = ('DocumentType', 'Client', 'Database', 'Collection', 'ClientSession', 'Cursor', 'hint_or_sort_cursor', 'translate_index')</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/mongo/#mongorunway.mongo.hint_or_sort_cursor","title":"<code>hint_or_sort_cursor(cursor, /, indexes)</code>","text":"Source code in <code>mongorunway\\mongo.py</code> <pre><code>def hint_or_sort_cursor(\ncursor: Cursor,\n/,\nindexes: typing.Union[str, typing.Sequence[typing.Tuple[str, int]]],\n) -&gt; Cursor:\nindex_info = cursor.collection.index_information()\nif isinstance(indexes, str):\nif indexes not in index_info:\nreturn cursor.sort(indexes)\nelse:\nfor index in indexes:\nif isinstance(index, tuple):\nindex_name, _ = index\nif index_name not in index_info:\nreturn cursor.sort(indexes)\nif isinstance(index, str):\nif index not in index_info:\nreturn cursor.sort(indexes)\nreturn cursor.hint(indexes)\n</code></pre>"},{"location":"docs/shared/mongo/#mongorunway.mongo.translate_index","title":"<code>translate_index(indexes)</code>","text":"Source code in <code>mongorunway\\mongo.py</code> <pre><code>def translate_index(\nindexes: typing.Union[str, typing.Sequence[typing.Tuple[str, int]], typing.Tuple[str, int]], /\n) -&gt; str:\nif isinstance(indexes, str):\nreturn indexes\nif isinstance(indexes, tuple) and isinstance(indexes[0], str):\nreturn f\"{indexes[0]}_{indexes[1]}\"\ntranslated_index = \"_\".join(f\"{x}_{y}\" for x, y in indexes)\nreturn translated_index\n</code></pre>"},{"location":"docs/shared/util/","title":"Util","text":""},{"location":"docs/shared/util/#mongorunway.util","title":"<code>mongorunway.util</code>","text":"<p>Utilities.</p> <p>The module contains utilities that can be used in a project.</p> <p>Info</p> <p>This module is independent of all other modules and can only use built-in or third-party libraries.</p>"},{"location":"docs/shared/util/#mongorunway.util.__all__","title":"<code>__all__: typing.Sequence[str] = ('get_module', 'as_snake_case', 'import_obj', 'convert_string', 'build_mapping_values', 'build_optional_kwargs', 'is_valid_filename', 'hexlify')</code>  <code>module-attribute</code>","text":""},{"location":"docs/shared/util/#mongorunway.util.number_pattern","title":"<code>number_pattern: typing.Final[typing.Pattern[str]] = re.compile('\\n    [-+]?                    # Matches an optional sign character (- or +)\\n    (?:                       # Non-capturing group:\\n \\\\d{1,3}                # Matches 1 to 3 digits\\n       (?:_\\\\d{3})*            # Matches an underscore (_) followed by exactly 3 digits, \\n                              #                             repeated zero or more times.\\n       |                      # Alternation operator, allows matching either the previous pattern \\n                              #                                         or the following pattern.\\n       [\\\\d_]+                 # Matches one or more digits or underscores\\n       (?:\\\\.\\\\d+)?             # Matches an optional decimal part, where \\\\.\\\\d+ matches a dot \\n                              #                                 followed by one or more digits.\\n    )\\n    ', flags=re.VERBOSE)</code>  <code>module-attribute</code>","text":"<p>Regular expression for numeric values.</p> <p>The number_pattern constant is a regular expression pattern used for  matching numeric values.</p>"},{"location":"docs/shared/util/#mongorunway.util.string_case_pattern","title":"<code>string_case_pattern: typing.Final[typing.Pattern[str]] = re.compile('\\n    (?&lt;=_)     # Positive lookbehind assertion for an underscore character\\n    (\\\\w+)      # Match and capture one or more word characters (alphanumeric or underscore)\\n    |          # Or\\n    ([A-Z][a-z]+)   # Match and capture an uppercase letter followed by one or more lowercase letters\\n    |          # Or\\n    ([a-z]+)   # Match and capture one or more lowercase letters\\n    (?=[A-Z])  # Positive lookahead assertion for an uppercase letter\\n    ', flags=re.VERBOSE)</code>  <code>module-attribute</code>","text":"<p>Regular expression for string cases.</p> <p>The <code>string_case_pattern</code> constant is a regular expression pattern  used for matching different cases in strings.</p>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer","title":"<code>SystemTimer</code>","text":"<p>Implementation of a system timer for code benchmarks.</p> <p>This class represents an implementation of a system timer for measuring the execution time of a specific code block. It is a context manager and can be conveniently used with the <code>with</code> statement.</p> Source code in <code>mongorunway\\util.py</code> <pre><code>class SystemTimer:\n\"\"\"Implementation of a system timer for code benchmarks.\n    This class represents an implementation of a system timer for measuring\n    the execution time of a specific code block. It is a context manager and\n    can be conveniently used with the `with` statement.\n    \"\"\"\n__slots__: typing.Sequence[str] = (\n\"_start\",\n\"_executed_in\",\n)\ndef __init__(self) -&gt; None:\nself._start = 0.0\nself._executed_in = 0.0\n@property\ndef start(self) -&gt; float:\n\"\"\"Returns the start time of the benchmark.\n        Returns the system time that was set in the `__enter__` method of\n        this class.\n        Returns\n        -------\n        float\n            The system time when the code block started execution.\n        \"\"\"\nreturn self._start\n@property\ndef executed_in(self) -&gt; float:\n\"\"\"Returns the execution time of a code block.\n        Returns the time it took for the code block to execute. The\n        calculation is done using the system time from the `time` module.\n        Returns\n        -------\n        float\n            The execution time of the code block.\n        \"\"\"\nreturn self._executed_in\ndef __enter__(self) -&gt; SystemTimer:\nself._start = time.time()\nreturn self\n@typing.overload\ndef __exit__(self, exc_type: None, exc_val: None, exc_tb: None) -&gt; None:\n...\n@typing.overload\ndef __exit__(\nself,\nexc_type: typing.Type[BaseException],\nexc_val: BaseException,\nexc_tb: types.TracebackType,\n) -&gt; None:\n...\ndef __exit__(\nself,\nexc_type: typing.Optional[typing.Type[BaseException]],\nexc_val: typing.Optional[BaseException],\nexc_tb: typing.Optional[types.TracebackType],\n) -&gt; None:\nend = time.time()\nself._executed_in = end - self.start\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.__slots__","title":"<code>__slots__: typing.Sequence[str] = ('_start', '_executed_in')</code>  <code>instance-attribute</code> <code>class-attribute</code>","text":""},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.executed_in","title":"<code>executed_in: float</code>  <code>property</code>","text":"<p>Returns the execution time of a code block.</p> <p>Returns the time it took for the code block to execute. The calculation is done using the system time from the <code>time</code> module.</p> RETURNS DESCRIPTION <code>float</code> <p>The execution time of the code block.</p>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.start","title":"<code>start: float</code>  <code>property</code>","text":"<p>Returns the start time of the benchmark.</p> <p>Returns the system time that was set in the <code>__enter__</code> method of this class.</p> RETURNS DESCRIPTION <code>float</code> <p>The system time when the code block started execution.</p>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.__enter__","title":"<code>__enter__()</code>","text":"Source code in <code>mongorunway\\util.py</code> <pre><code>def __enter__(self) -&gt; SystemTimer:\nself._start = time.time()\nreturn self\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.__exit__","title":"<code>__exit__(exc_type, exc_val, exc_tb)</code>","text":"Source code in <code>mongorunway\\util.py</code> <pre><code>def __exit__(\nself,\nexc_type: typing.Optional[typing.Type[BaseException]],\nexc_val: typing.Optional[BaseException],\nexc_tb: typing.Optional[types.TracebackType],\n) -&gt; None:\nend = time.time()\nself._executed_in = end - self.start\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.SystemTimer.__init__","title":"<code>__init__()</code>","text":"Source code in <code>mongorunway\\util.py</code> <pre><code>def __init__(self) -&gt; None:\nself._start = 0.0\nself._executed_in = 0.0\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.as_snake_case","title":"<code>as_snake_case(obj)</code>","text":"<p>Converts an object to snake case format.</p> <p>Converts an object to snake case format regardless of the type of the object passed. If the object is an instance of the <code>str</code> class, the object itself will be converted. Otherwise, the <code>obj.__name__</code> will be taken, and if it is not available, the attribute will be taken from the type of the object passed.</p> PARAMETER DESCRIPTION <code>obj</code> <p>The object, name, or value to be converted to snake case.</p> <p> TYPE: <code>typing.Any</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The converted name of the object or its value in snake case. It may return the original object if the object does not match the regular expression.</p>"},{"location":"docs/shared/util/#mongorunway.util.as_snake_case--example","title":"Example","text":"<pre><code>&gt;&gt;&gt; class DummyClass: pass\n&gt;&gt;&gt; dummy_obj = DummyClass()\n&gt;&gt;&gt; as_snake_case(DummyClass)\n'dummy_class'\n&gt;&gt;&gt; as_snake_case(dummy_obj)  # Takes `type(dummy_obj).__name__` .\n'dummy_class'\n&gt;&gt;&gt; as_snake_case(\"snake_case_str\")\n'snake_case_str'\n&gt;&gt;&gt; as_snake_case(\"camelCase\")\n'camel_case'\n</code></pre> Source code in <code>mongorunway\\util.py</code> <pre><code>def as_snake_case(obj: typing.Any) -&gt; str:\nr\"\"\"Converts an object to snake case format.\n    Converts an object to snake case format regardless of the type of the\n    object passed. If the object is an instance of the `str` class, the object\n    itself will be converted. Otherwise, the `obj.__name__` will be taken,\n    and if it is not available, the attribute will be taken from the type of\n    the object passed.\n    Parameters\n    ----------\n    obj : typing.Any\n        The object, name, or value to be converted to snake case.\n    Returns\n    -------\n    str\n        The converted name of the object or its value in snake case. It may\n        return the original object if the object does not match the regular\n        expression.\n    Example\n    -------\n    ```py\n    &gt;&gt;&gt; class DummyClass: pass\n    &gt;&gt;&gt; dummy_obj = DummyClass()\n    &gt;&gt;&gt; as_snake_case(DummyClass)\n    'dummy_class'\n    &gt;&gt;&gt; as_snake_case(dummy_obj)  # Takes `type(dummy_obj).__name__` .\n    'dummy_class'\n    &gt;&gt;&gt; as_snake_case(\"snake_case_str\")\n    'snake_case_str'\n    &gt;&gt;&gt; as_snake_case(\"camelCase\")\n    'camel_case'\n    ```\n    \"\"\"\nif not isinstance(obj, str):\nobj_name = getattr(obj, \"__name__\", None)\nobj = type(obj).__name__ if obj_name is None else obj_name\nif obj.count(\"_\"):\n# Does not support mix of string cases and skips snake case.\nreturn obj\nobj_match = re.findall(string_case_pattern, obj)\nobj_name = \"_\".join((\"\".join(i.lower() for i in g) for g in obj_match))\nreturn obj_name\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.build_mapping_values","title":"<code>build_mapping_values(mapping)</code>","text":"<p>Converts string values in a mutable mapping.</p> <p>Converts string values in a mutable mapping to corresponding named objects. If a string fails validation, the original value is retained.</p> PARAMETER DESCRIPTION <code>mapping</code> <p>Mutable mapping whose values need to be converted.</p> <p> TYPE: <code>typing.MutableMapping[_T, typing.Any]</code> </p> RETURNS DESCRIPTION <code>typing.MutableMapping[_T, typing.Any]</code> <p>Mutable mapping with converted values.</p>"},{"location":"docs/shared/util/#mongorunway.util.build_mapping_values--example","title":"Example","text":"<pre><code>&gt;&gt;&gt; build_mapping_values({1: \"undefined\", 2: \"ok\", 3: \"no\"})\n{1: None, 2: True, 3: False}\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.build_mapping_values--see-also","title":"See Also","text":"<p>convert_string</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def build_mapping_values(\nmapping: typing.MutableMapping[_T, typing.Any], /\n) -&gt; typing.MutableMapping[_T, typing.Any]:\nr\"\"\"Converts string values in a mutable mapping.\n    Converts string values in a mutable mapping to corresponding named\n    objects. If a string fails validation, the original value is retained.\n    Parameters\n    ----------\n    mapping : typing.MutableMapping[_T, typing.Any]\n        Mutable mapping whose values need to be converted.\n    Returns\n    -------\n    typing.MutableMapping[_T, typing.Any]\n        Mutable mapping with converted values.\n    Example\n    -------\n    ```py\n    &gt;&gt;&gt; build_mapping_values({1: \"undefined\", 2: \"ok\", 3: \"no\"})\n    {1: None, 2: True, 3: False}\n    ```\n    See Also\n    --------\n    convert_string\n    \"\"\"\nfor key, value in copy.copy(mapping).items():\nmapping[key] = convert_string(value)\nreturn mapping\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.build_optional_kwargs","title":"<code>build_optional_kwargs(keys, mapping)</code>","text":"<p>Converts string values in a mutable mapping.</p> <p>Converts string values in a mutable mapping to corresponding named objects. If the value of a dictionary is None, the loop will move to the next iteration. Returns a mutable mapping with the keys passed to this function.</p> PARAMETER DESCRIPTION <code>keys</code> <p>Keys of optional values to be converted if their value is not None.</p> <p> TYPE: <code>typing.Iterable[_T]</code> </p> <code>mapping</code> <p>Mutable mapping whose values need to be converted.</p> <p> TYPE: <code>typing.MutableMapping[typing.Any, typing.Any]</code> </p> RETURNS DESCRIPTION <code>typing.MutableMapping[_T, typing.Any]</code> <p>Mutable mapping with all non-None values converted.</p>"},{"location":"docs/shared/util/#mongorunway.util.build_optional_kwargs--example","title":"Example","text":"<pre><code>&gt;&gt;&gt; build_optional_kwargs([1, 2], {1: None, 2: \"ok\", 3: \"no\"})\n{2: True}\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.build_optional_kwargs--see-also","title":"See Also","text":"<p>convert_string</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def build_optional_kwargs(\nkeys: typing.Iterable[_T],\nmapping: typing.MutableMapping[typing.Any, typing.Any],\n) -&gt; typing.MutableMapping[_T, typing.Any]:\nr\"\"\"Converts string values in a mutable mapping.\n    Converts string values in a mutable mapping to corresponding named\n    objects. If the value of a dictionary is None, the loop will move\n    to the next iteration. Returns a mutable mapping with the keys passed\n    to this function.\n    Parameters\n    ----------\n    keys : typing.Iterable[_T]\n        Keys of optional values to be converted if their value is not None.\n    mapping : typing.MutableMapping[typing.Any, typing.Any]\n        Mutable mapping whose values need to be converted.\n    Returns\n    -------\n    typing.MutableMapping[_T, typing.Any]\n        Mutable mapping with all non-None values converted.\n    Example\n    -------\n    ```py\n    &gt;&gt;&gt; build_optional_kwargs([1, 2], {1: None, 2: \"ok\", 3: \"no\"})\n    {2: True}\n    ```\n    See Also\n    --------\n    convert_string\n    \"\"\"\nkwargs = {}\nfor key in keys:\nvalue = mapping.get(key)\nif value is not None:\nkwargs[key] = convert_string(value)\nreturn kwargs\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.convert_string","title":"<code>convert_string(value)</code>","text":"<p>Converts a string.</p> <p>Converts a string depending on the received value. Case-insensitive string conversion. If the string fails all the checks, the passed value will be returned.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value that needs to be converted.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>typing.Union[int, float, bool, str, None]</code> <p>None, if the value is one of {\"none\", \"nothing\", \"undefined\"}.</p>"},{"location":"docs/shared/util/#mongorunway.util.convert_string--see-also","title":"See Also","text":"<p>number_pattern : Relationship. distutils.util.strtobool : Relationship.</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def convert_string(value: str, /) -&gt; typing.Union[int, float, bool, str, None]:\nr\"\"\"Converts a string.\n    Converts a string depending on the received value. Case-insensitive\n    string conversion. If the string fails all the checks, the passed\n    value will be returned.\n    Parameters\n    ----------\n    value : str\n        The value that needs to be converted.\n    Returns\n    -------\n    typing.Union[int, float, bool, str, None]\n        None, if the value is one of {\"none\", \"nothing\", \"undefined\"}.\n    See Also\n    --------\n    number_pattern : Relationship.\n    distutils.util.strtobool : Relationship.\n    \"\"\"\nif not isinstance(value, str):\nreturn value  # type: ignore[unreachable]\nvalue_lower = value.lower().strip()\nif value_lower in {\"none\", \"nothing\", \"undefined\"}:\nreturn None\nif digit_matches := re.findall(number_pattern, value_lower):\n# For floating point numbers.\nif len(digit_matches) &gt; 1:\n# Floating-point numbers should not have more than one decimal point.\ndigit_matches = digit_matches[:2]\n# To handle numbers that use an underscore.\nif any(m.count(\"_\") for m in digit_matches):\nreturn int(\"\".join(digit_matches))\nreturn float(\".\".join(digit_matches))\n(digit_string,) = digit_matches\nreturn int(digit_string)\ntry:\ninteger = distutils.util.strtobool(value_lower)\nexcept ValueError:\nreturn value\nreturn bool(integer)\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.get_module","title":"<code>get_module(directory, filename)</code>","text":"<p>Loads a module from given directory.</p> <p>Load and return a module based on the given directory and filename. Also supports the format without a file extension e.g. '.py' .</p> PARAMETER DESCRIPTION <code>directory</code> <p>The path to the directory where the file is located.</p> <p> TYPE: <code>str</code> </p> <code>filename</code> <p>The name of the file containing the module.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>types.ModuleType</code> <p>The module object that is loaded from the file.</p> RAISES DESCRIPTION <code>ModuleNotFoundError</code> <p>If the file specified by <code>directory</code> and <code>filename</code> parameters cannot be found.</p>"},{"location":"docs/shared/util/#mongorunway.util.get_module--example","title":"Example","text":"<pre><code>&gt;&gt;&gt; from types import ModuleType\n... # Obtains the current file util.py when running doctest\n... # in the current directory.\n&gt;&gt;&gt; assert isinstance(get_module(\"\", \"util.py\"), ModuleType)\n...\n&gt;&gt;&gt; from types import ModuleType\n... # Also supports the format without a file extension.\n&gt;&gt;&gt; assert isinstance(get_module(\"\", \"util\"), ModuleType)\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.get_module--see-also","title":"See Also","text":"<p>importlib.spec_from_file_location</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def get_module(directory: str, filename: str) -&gt; types.ModuleType:\nr\"\"\"Loads a module from given directory.\n    Load and return a module based on the given directory and filename.\n    Also supports the format without a file extension e.g. '.py' .\n    Parameters\n    ----------\n    directory : str\n        The path to the directory where the file is located.\n    filename : str\n        The name of the file containing the module.\n    Returns\n    -------\n    types.ModuleType\n        The module object that is loaded from the file.\n    Raises\n    ------\n    ModuleNotFoundError\n        If the file specified by `directory` and `filename` parameters\n        cannot be found.\n    Example\n    -------\n    ```py\n    &gt;&gt;&gt; from types import ModuleType\n    ... # Obtains the current file util.py when running doctest\n    ... # in the current directory.\n    &gt;&gt;&gt; assert isinstance(get_module(\"\", \"util.py\"), ModuleType)\n    ...\n    &gt;&gt;&gt; from types import ModuleType\n    ... # Also supports the format without a file extension.\n    &gt;&gt;&gt; assert isinstance(get_module(\"\", \"util\"), ModuleType)\n    ```\n    See Also\n    --------\n    importlib.spec_from_file_location\n    \"\"\"\nsys.path.append(os.getcwd())\nif not filename.endswith(\".py\"):\nfilename += \".py\"\nspec = importlib.util.spec_from_file_location(\nfilename.rstrip(\".py\"), (path := os.path.join(directory, filename))\n)\nif spec is None:\nraise ModuleNotFoundError(f\"Module {path!r} is not found.\")\nmodule = importlib.util.module_from_spec(spec)\nassert spec.loader is not None  # For type checkers only\nspec.loader.exec_module(module)\nsys.path.remove(os.getcwd())\nreturn module\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.hexlify","title":"<code>hexlify(binary)</code>","text":"<p>Converts a binary object to hexadecimal.</p> <p>Converts a binary object to a more user-friendly hexadecimal string. This method can be useful for converting session IDs in both pymongo and mongorunway, as these tools use the same format for identifiers.</p> PARAMETER DESCRIPTION <code>binary</code> <p>Binary representation of the object to be converted to a hexadecimal string.</p> <p> TYPE: <code>bson.binary.Binary</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The converted binary object as a hexadecimal string.</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def hexlify(binary: bson.binary.Binary) -&gt; str:\nr\"\"\"Converts a binary object to hexadecimal.\n    Converts a binary object to a more user-friendly hexadecimal string.\n    This method can be useful for converting session IDs in both pymongo\n    and mongorunway, as these tools use the same format for identifiers.\n    Parameters\n    ----------\n    binary : bson.binary.Binary\n        Binary representation of the object to be converted to a hexadecimal\n        string.\n    Returns\n    -------\n    str\n        The converted binary object as a hexadecimal string.\n    \"\"\"\nhex_id = binascii.hexlify(binary).decode()\nreturn hex_id\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.import_obj","title":"<code>import_obj(obj_path, /, cast)</code>","text":"<p>Imports a class from the specified module.</p> <p>Imports a class from the specified module. The module path should be specified using dot notation, with the class itself at the end.</p> PARAMETER DESCRIPTION <code>obj_path</code> <p>The path to the obj to be imported.</p> <p> TYPE: <code>str</code> </p> <code>cast</code> <p>The type to which the value should be cast. This is used to provide more clarity in the code. This parameter is also useful for compatibility with type checkers.</p> <p> TYPE: <code>_TT</code> </p> RETURNS DESCRIPTION <code>_TT</code> <p>The type to which we cast the imported obj.</p>"},{"location":"docs/shared/util/#mongorunway.util.import_obj--see-also","title":"See Also","text":"<p>importlib.import_module</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def import_obj(obj_path: str, /, cast: _TT) -&gt; _TT:\nr\"\"\"Imports a class from the specified module.\n    Imports a class from the specified module. The module path should\n    be specified using dot notation, with the class itself at the end.\n    Parameters\n    ----------\n    obj_path : str\n        The path to the obj to be imported.\n    cast : _TT\n        The type to which the value should be cast. This is used to\n        provide more clarity in the code. This parameter is also useful\n        for compatibility with type checkers.\n    Returns\n    -------\n    _TT\n        The type to which we cast the imported obj.\n    See Also\n    --------\n    importlib.import_module\n    \"\"\"\nmodule_name, obj_name = obj_path.rsplit(\".\", maxsplit=1)\nmodule = importlib.import_module(module_name)\nreturn typing.cast(cast, getattr(module, obj_name))\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.is_valid_filename","title":"<code>is_valid_filename(directory, filename)</code>","text":"<p>Validates the file in the given directory.</p> <p>Check whether a given filename is a valid migration file in the given directory.</p> PARAMETER DESCRIPTION <code>directory</code> <p>The path of the directory where the file is located.</p> <p> TYPE: <code>str</code> </p> <code>filename</code> <p>The name of the file to be checked.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the filename is a valid migration file, False otherwise.</p> RAISES DESCRIPTION <code>ValueError</code> <p>If the value passed to the directory parameter is not a directory.</p>"},{"location":"docs/shared/util/#mongorunway.util.is_valid_filename--notes","title":"Notes","text":"<p>The function checks if a file exists in the specified directory. Additionally, the file must have the extension '.py' and should not start with a dunder1.</p>"},{"location":"docs/shared/util/#mongorunway.util.is_valid_filename--references","title":"References","text":"<ol> <li> <p>Dunder: The term \"dunder\" is a short form of \"double underscore\" and is commonly used to refer to special methods or attributes in Python that are surrounded by double underscores on both sides, such as init or name.\u00a0\u21a9</p> </li> </ol> Source code in <code>mongorunway\\util.py</code> <pre><code>def is_valid_filename(directory: str, filename: str) -&gt; bool:\nr\"\"\"Validates the file in the given directory.\n    Check whether a given filename is a valid migration file in the\n    given directory.\n    Parameters\n    ----------\n    directory : str\n        The path of the directory where the file is located.\n    filename : str\n        The name of the file to be checked.\n    Returns\n    -------\n    bool\n        True if the filename is a valid migration file, False otherwise.\n    Raises\n    ------\n    ValueError\n        If the value passed to the directory parameter is not a directory.\n    Notes\n    -----\n    The function checks if a file exists in the specified directory.\n    Additionally, the file must have the extension '.py' and should not\n    start with a dunder[^1].\n    References\n    ----------\n    [^1]:\n        Dunder: The term \"dunder\" is a short form of \"double underscore\"\n        and is commonly used to refer to special methods or attributes in\n        Python that are surrounded by double underscores on both sides, such\n        as __init__ or __name__.\n    \"\"\"\nif not os.path.isdir(directory):\nraise ValueError(f\"The specified path {directory!r} is not a directory.\")\nreturn (\nos.path.isfile(os.path.join(directory, filename))\nand filename.endswith(\".py\")\nand not filename.startswith(\"__\")\n)\n</code></pre>"},{"location":"docs/shared/util/#mongorunway.util.timeit_func","title":"<code>timeit_func(func, *args, **kwargs)</code>","text":"<p>Benchmarks the execution time of a function.</p> <p>Returns the execution time of a function and the resulting output of calling the function with given parameters.</p> PARAMETER DESCRIPTION <code>func</code> <p>The function whose execution time needs to be benched.</p> <p> TYPE: <code>Callable[_P, _T]</code> </p> <code>args</code> <p>Positional arguments of a function.</p> <p> TYPE: <code>_P.args</code> DEFAULT: <code>()</code> </p> <code>kwargs</code> <p>Keyword arguments of a function</p> <p> TYPE: <code>_P.kwargs</code> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Tuple[_T, float]</code> <p>A tuple where the first element is the type of the returned result of the function, and the second element is the time taken to execute the function.</p>"},{"location":"docs/shared/util/#mongorunway.util.timeit_func--see-also","title":"See Also","text":"<p>SystemTimer</p> Source code in <code>mongorunway\\util.py</code> <pre><code>def timeit_func(\nfunc: typing.Callable[_P, _T],\n*args: _P.args,\n**kwargs: _P.kwargs,\n) -&gt; typing.Tuple[_T, float]:\nr\"\"\"Benchmarks the execution time of a function.\n    Returns the execution time of a function and the resulting output of\n    calling the function with given parameters.\n    Parameters\n    ----------\n    func : Callable[_P, _T]\n        The function whose execution time needs to be benched.\n    args : _P.args\n        Positional arguments of a function.\n    kwargs : _P.kwargs\n        Keyword arguments of a function\n    Returns\n    -------\n    Tuple[_T, float]\n        A tuple where the first element is the type of the returned result\n        of the function, and the second element is the time taken to execute\n        the function.\n    See Also\n    --------\n    SystemTimer\n    \"\"\"\nwith SystemTimer() as timer:\nresult = func(*args, **kwargs)\nreturn result, timer.executed_in\n</code></pre>"}]}